,EventTemplate,Occurrences
0,"setSystemUiVisibility vis=<*> mask=<*> oldVal=<*> newVal=<*> diff=<*> fullscreenStackVis=<*> dockedStackVis=<*>, fullscreenStackBounds=Rect(<*>), dockedStackBounds=Rect(<*>)",200
1,"ready=<*>,policy=<*>,wakefulness=<*>,wksummary=<*>,uasummary=<*>,bootcompleted=<*>,boostinprogress=<*>,waitmodeenable=<*>,mode=<*>,manual=<*>,auto=<*>,adj=<*>=<*>",199
2,setLightsOn(<*>),181
3,HBM brightnessIn =<*>,85
4,HBM brightnessOut =<*>,85
5,"Animating brightness: target=<*>, rate=<*>",85
6,"userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=<*>, uid=<*>",69
7,updateDimmedActivatedHideSensitive overlap:<*>,64
8,getRunningAppProcesses: caller <*> does not hold <*>; limiting output,56
9,"updateClipping isOverlap:<*>, getTopPadding=<*>, Translation=<*>",54
10,shouldBlockLocation running ...,37
11,shouldBlockLocation ret:<*>,37
12,"Releasing suspend blocker ""PowerManagerService.WakeLocks""",31
13,"Acquiring suspend blocker ""PowerManagerService.WakeLocks""",31
14,"acquire lock=<*>, flags=<*>, tag=""<*>"", name=<*>, ws=<*>, uid=<*>, pid=<*>",26
15,"release:lock=<*>, flg=<*>, tag=""<*>"", name=<*>"", ws=<*>, uid=<*>, pid=<*>",26
16,getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output,25
17,suspendAutohide,23
18,"cancelNotification,index:<*>",23
19,"Skipping, withExcluded: <*>, tr.intent:<*>",23
20,Destroying surface Surface(name=<*>) called by <*>,21
21,getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output,21
22,cancelPeek: <*>,20
23,"notifyUiVisibilityChanged:vis=<*>, SystemUiVisibility=<*>",19
24,querySoundEffectsEnabled...,17
25,"cancelNotificationWithTag pid <*>,uid = <*>,tag = <*>,pkg =<*>,id =<*>",16
26,getTasks: caller <*> does not hold <*>; limiting output,16
27,cancelAutohide,15
28,interceptKeyTq keycode=<*> interactive=<*> keyguardActive=<*> policyFlags=<*> down <*> canceled <*>,14
29,"interceptKeyBeforeQueueing: key <*> , result : <*>",14
30,"getRecentTasks: num=<*>,flags=<*>,totalTasks=<*>",14
31,"state.clipTopAmount:<*>, i:<*>",13
32,"updateNotificationShade: total=<*>, active=<*>",13
33,removeNotificationChildren,12
34,closeQs,12
35,isMusicActive...,12
36,"overlapAmount:<*>, previousNotificationEnd:<*>, newYTranslation:<*>, location:<*>, i:<*>, getTopPadding:<*>, getLocationOnScreen():<*>",11
37,"updateClipping isOverlap=<*>, getTopPadding=<*>, Translation=<*>",11
38,"Skipping, withExcluded: <*>, tr.intent:Intent { act=<*> flg=<*> cmp=<*> (has extras) }",11
39,resumeSuspendedAutohide,10
40,playSoundEffect effectType: <*>,10
41,"Skipping, withExcluded: <*>, tr.intent:Intent { flg=<*> cmp=<*> bnds=[<*>] }",10
42,instantCollapse,9
43,getLastAudibleStreamVolume treamType: <*>,9
44,"animateCollapsePanels:flags=<*>, force=<*>, delayed=<*>, mExpandedVisible=<*>",8
45,getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity},8
46,"Skipping, withExcluded: <*>, tr.intent:Intent { act=<*> dat=<*> typ=<*> flg=<*> cmp=<*> (has extras) }",7
47,"updateLightsLocked,mInCall =<*>,mScreenOn = <*>,ledNotification == <*>",6
48,"updateLightsLocked,turn off notificationLight",6
49,logNotificationVisibilityChanges runInThread start,6
50,onNotificationVisibilityChanged called,6
51,logNotificationVisibilityChanges runInThread over,6
52,The change in focus caused us to need to do a layout begin,6
53,The change in focus caused us to need to do a layout end,6
54,"Skipping, withExcluded: <*>, tr.intent:Intent { act=<*> dat=<*> flg=<*> cmp=<*> (has extras) }",6
55,cleanUpApplicationRecord -- <*>,6
56,"cleanUpApplicationRecordLocked, pid: <*>, restart: <*>",6
57,"cleanUpApplicationRecordLocked, reset pid: <*>, euid: <*>",6
58,stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=<*>,6
59,stopWifiDisplayScanLocked mWifiDisplayScanRequestCount=<*>,6
60,mVisiblity.getValue is <*>,5
61,"Skipping, withExcluded: <*>, tr.intent:Intent { flg=<*> cmp=<*> (has extras) }",5
62,"onInterceptTouchEvent MotionEvent { action=<*>, actionButton=<*>, id[<*>]={id[<*>]}, x[<*>]={x[<*>]}, y[<*>]={y[<*>]}, toolType[<*>]={toolType[<*>]}, buttonState=<*>, metaState=<*>, flags=<*>, edgeFlags=<*>, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=<*> }, mBlockTouches=<*>",4
63,"ActivityRecord info: <*>, euid: <*>",4
64,"Taking screenshot from Surface with crop:[<*>], width:[<*>], height:[<*>], minLayer:[<*>], maxLayer:[<*>], inRotation:[<*>], rot:[<*>]",4
65,"cancelNotificationWithTag pid <*>,uid =<*>,tag =<*>,pkg =<*>,id =<*>",4
66,makeExpandedInvisible: mExpandedVisible=<*>,4
67,"ActivityManagerService,attachApplication,callingPid = <*>",4
68,mHeadsUpExistenceChangedRunnable,4
69,getRecentTasks: topActivity=ComponentInfo{com.example.android.notepad/com.example.android.notepad.NoteEditor},4
70,"rotationForOrientationLw(orient=<*>, last=<*>); user=<*> USER_ROTATION_LOCKED",3
71,getNeighboringCellInfo calling app is <*>,3
72,disable: < expand <*> alerts <*> back home recent clock navigationbar search quick_settings >,3
73,registerCallback not in UI.,3
74,android.util.AndroidRuntimeException: Must execute in UI,3
75,Received TIME_TICK alarm; rescheduling,3
76,scheduleTimeTickEvent triggerAtTime = <*>,3
77,handleTimeUpdate,3
78,getRingerMode...,3
79,getAllCellInfo is blocked by permission manager . callingPackage = <*>,3
80,"Application requested orientation <*>, got rotation <*> which has compatible metrics",2
81,Skipping AppWindowToken{9f4ef63 token=Token{a64f992 ActivityRecord{de9231d u0 com.tencent.qt.qtl/.activity.info.NewsDetailXmlActivity t761}}} -- going to hide,2
82,"onTouchEvent::<*>, x=<*>, y=<*>",2
83,getRingtonePlayer...,2
84,onExpandingStarted,2
85,"overlapAmount:<*>, previousNotificationEnd:<*>, newYTranslation:<*>, location:<*>, i:<*>, getTopPadding:<*>, getLocationOnScreen():{getLocationOnScreen()}",2
86,"flingToHeight: vel=<*>, expand=<*>, target=<*>, collapseSpeedUpFactor=<*>, expandBecauseOfFalsing=<*>",2
87,onExpandingFinished,2
88,Sending non-protected broadcast <*> from system <*> pkg <*>,2
89,*** unregister callback for <*>,2
90,onNotificationClick called,2
91,"cancelNotification,cancelNotificationLocked,callingUid = <*>,callingPid = <*>",2
92,"cancelNotificationLocked called,tell the app,reason = <*>",2
93,cancelNotificationLocked:<*>|<*>|<*>|<*>|<*>,2
94,"cancelNotificationLocked,remove =<*>",2
95,applyOptionsLocked: Unknown animationType=<*>,2
96,removeNotification:<*>|<*>|<*>|<*>|<*>,2
97,disable: < expand icons* alerts system_info* back home recent clock navigationbar search quick_settings >,2
98,Destroying surface Surface(name=<*>) called by <*>.,2
99,setWiredDeviceConnectionState type: <*> state: <*>,2
100,getDevicesForStream streamType: <*>,2
101,"Acquiring suspend blocker ""<*>"".",2
102,received broadcast <*>,2
103,getNeighboringCellInfo calling app is com.amap.android.ams,2
104,"Releasing suspend blocker ""<*>"".",2
105,enqueueNotificationInternal: n.getKey = <*>|<*>|<*>|<*>|<*>,2
106,addNotification key=<*>|<*>|<*>|<*>|<*>,2
107,Marking notification as seen <*>|<*>|<*>|<*>|<*>,2
108,onNotificationExpansionChanged called,2
109,START u0 {act=<*> cat=<*> flg=<*> cmp=<*> bnds=<*>} from uid <*> on display <*>,2
110,"ACTIVITY check resid: <*>, size=<*>",2
111,RefreshBatteryInfo isBatteryLow: <*>,2
112,getRecentTasks: topActivity=ComponentInfo{com.tencent.mm/com.tencent.mm.ui.LauncherUI},2
113,"printFreezingDisplayLogsopening app wtoken = AppWindowToken{9f4ef63 token=Token{a64f992 ActivityRecord{de9231d u0 com.tencent.qt.qtl/.activity.info.NewsDetailXmlActivity t761}}}, allDrawn= <*>, startingDisplayed = <*>, startingMoved = <*>, isRelaunching = <*>",1
114,Skipping AppWindowToken{token=<*> <*> -- going to hide,1
115,visible is system.time.showampm,1
116,visible is system.charge.show,1
117,visible is system.call.count gt <*>,1
118,visible is system.message.count gt <*>,1
119,visible is system.ownerinfo.show,1
120,Skipping AppWindowToken{token=<*> ActivityRecord{u0 <*> <*>}} -- going to hide,1
121,"orientation change is complete, call stopFreezingDisplayLocked",1
122,Screen frozen for +<*> due to <*>,1
123,startAnimation begin,1
124,startAnimation end,1
125,remove(PendingIntent{19abed0: <*>}) changed bounds; rebatching,1
126,Bad activity token: android.os.BinderProxy@<*>,1
127,java.lang.ClassCastException: android.os.BinderProxy cannot be cast to com.android.server.am.ActivityRecord$Token,1
128,schedulePeek,1
129,onTrackingStarted,1
130,onTrackingStopped: <*>,1
131,isSimPinSecure mSimDatas is <*> or empty,1
132,*** register callback for com.android.systemui.statusbar.policy.KeyguardMonitor@<*>,1
133,[PhoneIntfMgr] getDataEnabled: subId=<*> phoneId=<*>,1
134,[PhoneIntfMgr] getDataEnabled: subId=<*> retVal=<*>,1
135,START u0 {act=com.tencent.mobileqq.action.MAINACTIVITY flg=0x14000000 cmp=com.tencent.mobileqq/.activity.SplashActivity (has extras)} from uid <*> on display <*>,1
136,updateDimmedActivatedHideSensitive overlap=<*>,1
137,"Start dump, calling from : pid=<*>, uid=<*>",1
138,isBluetoothA2dpOn...,1
139,isBluetoothScoOn...,1
140,getMode...,1
141,setSpeakerphoneOn on: <*>,1
142,setSpeakerphoneOn on:<*>,1
143,"sending alarm Alarm{aa90550 type <*> when <*> PendingIntent{<*>: <*>}},repeatInterval = <*>,listenerTag =<*>",1
144,Destroying surface Surface(name=<*>) called by <*> com.android.server.wm.WindowStateAnimator.destroySurface:<*> com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:<*> com.android.server.wm.WindowState.removeLocked:<*> com.android.server.wm.WindowManagerService.removeWindowInnerLocked:<*> com.android.server.wm.WindowManagerService.removeWindowInnerLocked:<*> com.android.server.wm.WindowManagerService.removeWindowLocked:<*> com.android.server.wm.WindowManagerService.re,1
145,"sending alarm Alarm{19069ff type <*> when <*> PendingIntent{50303cc: PendingIntentRecord{e204f60 <*> <*>}},repeatInterval = <*>,listenerTag =<*>",1
146,Killing <*> (adj <*>): empty for <*>,1
147,"sending alarm Alarm{c1705d3 type <*> when <*> PendingIntent{<*>: <*>}},repeatInterval = <*>,listenerTag =<*>",1
148,remove(<*>) changed bounds; rebatching,1
149,Unable to start service Intent { act=<*> cmp=<*> } U=<*>: not found,1
150,unregisterAudioFocusListener...,1
151,abandonAudioFocus,1
152,"[HSM] stayAwake <*> uid: <*>, pid: <*>",1
153,Pid:<*> MediaPlayer destructor,1
154,Process <*> (pid <*>) has died,1
155,Scheduling restart of crashed service <*> in <*>,1
156,"new Process app=ProcessRecord{6eaaf00 <*>/<*>}, name: <*>, euid: <*>",1
157,Start proc <*> for service <*>,1
158,enqueueNotificationInternal: pkg=<*> id=<*> notification=Notification(pri=<*> contentView=<*> vibrate=<*> sound=<*> tick defaults=<*> flags=<*> color=<*> vis=<*>),1
159,disable: < expand {ICONS*} alerts {SYSTEM_INFO*} back home recent clock navigationbar search quick_settings >,1
160,"Application requested orientation -<*>, got rotation <*> which has compatible metrics",1
161,getCellLocation is blocked by permission manager uid:<*> pid:<*>,1
162,"sending alarm Alarm{d764221 type <*> when <*> PendingIntent{<*>: <*>}},repeatInterval = <*>,listenerTag =<*>",1
163,received broadcast android.intent.action.TIME_TICK,1
164,isWiredHeadsetOn...,1
165,"setDataSource(<*>, <*>, <*>)",1
166,getStreamVolume treamType: <*>,1
167,Destroying surface Surface(name=<*>) called by <*> com.android.server.wm.WindowStateAnimator.destroySurface:<*> com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:<*> com.android.server.wm.WindowState.destroyOrSaveSurface:<*> com.android.server.wm.WindowSurfacePlacer.performSurfacePlacementInner:<*> com.android.server.wm.WindowSurfacePlacer.performSurfacePlacementLoop:<*> com.android.server.wm.WindowSurfacePlacer.performSurfacePlacement:<*> com.android.server.wm.WindowManagerSe,1
168,"updateIsPoweredLocked: wasPowered=<*>, mIsPowered=<*>, oldPlugType=<*>, mPlugType=<*>, mBatteryLevel=<*>",1
169,received broadcast android.intent.action.BATTERY_CHANGED,1
170,ACTION_BATTERY_CHANGED AMP: <*>; Volt: <*>,1
171,updateChargingLocked: charging=<*>,1
172,"onReceive, action:<*>",1
173,ACTION_BATTERY_CHANGED pluggedType: <*>,1
174,ApStaDisabledState what=<*>,1
175,DefaultState what=<*>,1
176,battery changed pluggedType: <*>,1
177,ChargingSpeed Wattage: -<*> ST: <*> --> <*>,1
178,handleBatteryUpdate,1
179,enqueueNotificationInternal: pkg=<*> id=<*> notification=Notification(pri=<*> contentView=<*> vibrate=<*> sound=<*> tick defaults=<*> flags=<*> color=<*> category=<*> vis=<*>),1
180,"sending alarm Alarm{<*> type <*> when <*> PendingIntent{f75f81e: <*>}},repeatInterval = <*>,listenerTag =<*>",1
181,START u0 <*> cmp=<*> (has extras) from uid <*> on display <*>,1
182,startActivity called from non-Activity context; forcing Intent.FLAG_ACTIVITY_NEW_TASK for: Intent { flg=<*> cmp=<*> (has extras) },1
183,"Skipping, withExcluded: <*>, tr.intent:Intent { act=<*> dat=<*> flg=<*> cmp=<*> }",1
