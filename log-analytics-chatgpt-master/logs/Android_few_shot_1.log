`printFreezingDisplayLogsopening app wtoken = AppWindowToken{9f4ef63 token=Token{a64f992 ActivityRecord{de9231d u0 com.tencent.qt.qtl/.activity.info.NewsDetailXmlActivity t761}}}, allDrawn= {bool}, startingDisplayed =  {bool}, startingMoved =  {bool}, isRelaunching =  {bool}`
 =================== 
The template of the given log message is `acquire lock={number}, flags={hex}, tag={string}, name={string}, ws={null}, uid={number}, pid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
The template of the given log message is `Skipping AppWindowToken{token=Token{ActivityRecord{u0 {packageName}/{activityName} t{taskId}}}} -- going to hide`
 =================== 
`visible is {string}.{string}.{string}`
 =================== 
`{method}.getValue is {bool}`
 =================== 
The template of the given log message is `visible is {string}`.
 =================== 
`{method}.getValue is {bool}`
 =================== 
The template of the given log message is `visible is {string}.{string}.{string} {string} {number}`.
 =================== 
`{method}.getValue is {bool}`
 =================== 
`visible is {string}.{string}.{string} {string} {number}`
 =================== 
`{string}.{string} is {bool}`
 =================== 
`visible is {string}.{string}.{string}`
 =================== 
`{method}.getValue is {bool}`
 =================== 
`release:lock={number}, flg={hex}, tag="{string}", name="{string}", ws={null}, uid={number}, pid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Skipping AppWindowToken{token={token} ActivityRecord{activityRecord} -- going to hide`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`release:lock={number}, flg={hex}, tag="{string}", name="{string}", ws=WorkSource{number}, uid={number}, pid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
The template of the given log message is:
`setSystemUiVisibility vis={number} mask={hex} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`cancelAutohide`
 =================== 
`notifyUiVisibilityChanged:vis={hex}, SystemUiVisibility={hex}`
 =================== 
The template of the given log message is:
`Destroying surface Surface(name={string} - {string}) called by {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} <bottom of call stack> <bottom of call`
 =================== 
`Destroying surface Surface(name={string}) called by {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} android.view.IWindowS`
 =================== 
`release:lock={number}, flg={hex}, tag="{string}", name="{string}", ws=WorkSource{number}, uid={number}, pid={number}`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`{string} change is complete, call {string}`
 =================== 
`Screen frozen for +{number}s{number}ms due to Window{ca98d5 u0 com.tencent.qt.qtl/com.tencent.qt.qtl.activity.info.NewsDetailXmlActivity}`
 =================== 
`{string} {string}`
 =================== 
`{string} {string}`
 =================== 
The template of the given log message is `release:lock={number}, flg={hex}, tag="{string}", name="{string}", ws={null}, uid={number}, pid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
The template of the given log message is `remove(PendingIntent{19abed0: PendingIntentRecord{a485420 {packageName} {action}}}) changed bounds; rebatching`.
 =================== 
`rotationForOrientationLw(orient={number}, last={number}); user={number} USER_ROTATION_LOCKED`
 =================== 
`Application requested orientation {number}, got rotation {number} which has compatible metrics`
 =================== 
The template of the given log message is `acquire lock={number}, flags={hex}, tag="{string}", name={string}, ws={null}, uid={number}, pid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
`getNeighboringCellInfo calling app is {string}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`release:lock={number}, flg={hex}, tag="{string}", name="{string}", ws={null}, uid={number}, pid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
`release:lock={number}, flg={hex}, tag="{string}", name="{string}", ws={null}, uid={number}, pid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Releasing suspend blocker "{string}".`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`{string}`
 =================== 
The template of the given log message is `interceptKeyTq keycode={number} interactive={bool} keyguardActive={bool} policyFlags={hex} down {bool} canceled {bool}`.
 =================== 
`interceptKeyBeforeQueueing: key {number} , result : {number}`
 =================== 
`userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`resumeSuspendedAutohide`
 =================== 
The template of the given log message is `interceptKeyTq keycode={number} interactive={bool} keyguardActive={bool} policyFlags={hex} down {bool} canceled {bool}`.
 =================== 
`interceptKeyBeforeQueueing: key {number} , result : {number}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
`acquire lock={number}, flags={hex}, tag="{string}", name={string}, ws=WorkSource{number}, uid={number}, pid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Acquiring suspend blocker "{string}".`
 =================== 
`Skipping AppWindowToken{9f4ef63 token=Token{a64f992 ActivityRecord{de9231d u0 com.tencent.qt.qtl/.activity.info.NewsDetailXmlActivity t761}}} -- going to hide`
 =================== 
`setSystemUiVisibility vis={number} mask={hex} oldVal={hex} newVal={number} diff={hex} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`cancelAutohide`
 =================== 
`notifyUiVisibilityChanged:vis={hex}, SystemUiVisibility={hex}`
 =================== 
`Bad activity token: {activityToken}`
 =================== 
`java.lang.ClassCastException: {class} cannot be cast to {class}`
 =================== 
The template of the given log message is: 
`Skipping AppWindowToken{9f4ef63 token=Token{a64f992 ActivityRecord{de9231d u0 com.tencent.qt.qtl/.activity.info.NewsDetailXmlActivity t761}}} -- going to hide`
 =================== 
`release:lock={number}, flg={hex}, tag="{string}", name="{string}", ws=WorkSource{number}, uid={number}, pid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Releasing suspend blocker "{string}".`
 =================== 
`setSystemUiVisibility vis={number} mask={hex} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`cancelAutohide`
 =================== 
`notifyUiVisibilityChanged:vis={hex}, SystemUiVisibility={hex}`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`{string}`
 =================== 
`{string}`
 =================== 
`onTouchEvent::{number}, x={number}, y={number}`
 =================== 
`schedulePeek`
 =================== 
The template of `getRingtonePlayer...` is `getRingtonePlayer...`.
 =================== 
The template of the given log message is `disable: < expand {ICONS*} alerts {SYSTEM_INFO*} back home recent clock navigationbar search quick_settings >`.
 =================== 
`{string}`
 =================== 
`updateLightsLocked,mInCall ={bool},mScreenOn = {bool},ledNotification == null?{bool}`
 =================== 
`updateLightsLocked,turn off notificationLight`
 =================== 
The template of `getRingtonePlayer...` is `getRingtonePlayer...`.
 =================== 
`updateLightsLocked,mInCall ={bool},mScreenOn = {bool},ledNotification == null?{bool}`
 =================== 
`updateLightsLocked,turn off notificationLight`
 =================== 
`overlapAmount:{number}, previousNotificationEnd:{number}, newYTranslation:{number}, location:{number}, i:{number}, getTopPadding:{number}, getLocationOnScreen():{number}`
 =================== 
`state.clipTopAmount:{number}, i:{number}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={hex} mask={hex} oldVal={hex} newVal={hex} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`notifyUiVisibilityChanged:vis={hex}, SystemUiVisibility={hex}`
 =================== 
`{string}`
 =================== 
`onExpandingStarted`
 =================== 
`{string}`
 =================== 
`onTrackingStarted`
 =================== 
`Destroying surface Surface(name={string}) called by {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number}`
 =================== 
`{string}`
 =================== 
`overlapAmount:{number}, previousNotificationEnd:{number}, newYTranslation:{number}, location:{number}, i:{number}, getTopPadding:{number}, getLocationOnScreen():{number}`
 =================== 
`state.clipTopAmount:{number}, i:{number}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`{string}`
 =================== 
`overlapAmount:{number}, previousNotificationEnd:{number}, newYTranslation:{number}, location:{number}, i:{number}, getTopPadding:{number}, getLocationOnScreen():{number}`
 =================== 
`state.clipTopAmount:{number}, i:{number}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`{string}`
 =================== 
The template of the given log message is `overlapAmount:{number}, previousNotificationEnd:{number}, newYTranslation:{number}, location:{number}, i:{number}, getTopPadding:{number}, getLocationOnScreen():{number}`.
 =================== 
`state.clipTopAmount:{number}, i:{number}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`{string}`
 =================== 
`overlapAmount:{number}, previousNotificationEnd:{number}, newYTranslation:{number}, location:{number}, i:{number}, getTopPadding:{number}, getLocationOnScreen():{number}`
 =================== 
`state.clipTopAmount:{number}, i:{number}`
 =================== 
The template of the log message is `updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`.
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`{string}`
 =================== 
`overlapAmount:{number}, previousNotificationEnd:{number}, newYTranslation:{number}, location:{number}, i:{number}, getTopPadding:{number}, getLocationOnScreen():{number}`
 =================== 
`state.clipTopAmount:{number}, i:{number}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`{string}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`{string}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`{string}`
 =================== 
`{string}`
 =================== 
`onTouchEvent::{number}, x={number}, y={number}`
 =================== 
`cancelPeek: {bool}`
 =================== 
`flingToHeight: vel={number}, expand={bool}, target={number}, collapseSpeedUpFactor={number}, expandBecauseOfFalsing={bool}`
 =================== 
`onTrackingStopped: {bool}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`onExpandingFinished`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
The template of the given log message is `Sending non-protected broadcast {string} from system {number}:{string} pkg {string}`.
 =================== 
`logNotificationVisibilityChanges runInThread start`
 =================== 
`onNotificationVisibilityChanged called`
 =================== 
`logNotificationVisibilityChanges {action} {location}`
 =================== 
The template of `isSimPinSecure mSimDatas is null or empty` is `isSimPinSecure {variable} is {condition} or {condition}`.
 =================== 
`registerCallback not in UI.`
 =================== 
The template of `android.util.AndroidRuntimeException: Must execute in UI` is `android.util.AndroidRuntimeException: {string}`.
 =================== 
The template of `*** register callback for com.android.systemui.statusbar.policy.KeyguardMonitor@712d093` is `*** register callback for {string}`.
 =================== 
`registerCallback not in {string}.`
 =================== 
The template of `android.util.AndroidRuntimeException: Must execute in UI` is `android.util.AndroidRuntimeException: {string}`.
 =================== 
The template of `*** unregister callback for null` is `*** unregister callback for {string}`.
 =================== 
The template of the given log message is `[PhoneIntfMgr] getDataEnabled: subId={number} phoneId={number}`.
 =================== 
`[PhoneIntfMgr] getDataEnabled: subId={number} retVal={bool}`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={float}userId={number}`
 =================== 
`onInterceptTouchEvent MotionEvent { action={string}, actionButton={number}, id[0]={number}, x[0]={number}, y[0]={number}, toolType[0]={string}, buttonState={number}, metaState={number}, flags={hex}, edgeFlags={hex}, pointerCount={number}, historySize={number}, eventTime={number}, downTime={number}, deviceId={number}, source={hex} }, mBlockTouches={bool}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`onInterceptTouchEvent MotionEvent { action={string}, actionButton={number}, id[0]={number}, x[0]={number}, y[0]={number}, toolType[0]={string}, buttonState={number}, metaState={number}, flags={hex}, edgeFlags={hex}, pointerCount={number}, historySize={number}, eventTime={number}, downTime={number}, deviceId={number}, source={hex} }, mBlockTouches={bool}`
 =================== 
`playSoundEffect   effectType: {number}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
`animateCollapsePanels:flags={number}, force={bool}, delayed={bool}, mExpandedVisible={bool}`
 =================== 
`onExpandingStarted`
 =================== 
`logNotificationVisibilityChanges runInThread start`
 =================== 
`onNotificationVisibilityChanged called`
 =================== 
`logNotificationVisibilityChanges {string} {string} {string}`
 =================== 
The template of the given log message is `START u{number} {act={string} flg={hex} cmp={string} (has extras)} from uid {number} on display {number}`.
 =================== 
`ActivityRecord info: ActivityInfo{${packageName} ${activityName}}, euid: ${euid}`
 =================== 
`setSystemUiVisibility vis={number} mask={hex} oldVal={hex} newVal={hex} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`notifyUiVisibilityChanged:vis={hex}, SystemUiVisibility={hex}`
 =================== 
`acquire lock={number}, flags={hex}, tag="{string}", name={string}, ws=WorkSource{number}, uid={number}, pid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
The template of the given log message is `Acquiring suspend blocker "{string}".`
 =================== 
`onNotificationClick called`
 =================== 
`cancelNotification,index:{number}`
 =================== 
`cancelNotification,cancelNotificationLocked,callingUid = {number},callingPid = {number}`
 =================== 
`cancelNotificationLocked called,tell the app,reason = {number}`
 =================== 
The template of the given log message is `cancelNotificationLocked:{number}|{string}|{number}|{string}|{number}`.
 =================== 
`cancelNotificationLocked,remove ={string}`
 =================== 
`applyOptionsLocked: Unknown animationType={number}`
 =================== 
`cancelPeek: {bool}`
 =================== 
`flingToHeight: vel={number}, expand={bool}, target={number}, collapseSpeedUpFactor={number}, expandBecauseOfFalsing={bool}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
The template of the given log message is:
`Taking screenshot from Surface with crop:[{Rect}], width:[{number}], height:[{number}], minLayer:[{number}], maxLayer:[{number}], inRotation:[{bool}], rot:[{number}]`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`updateLightsLocked,mInCall ={bool},mScreenOn = {bool},ledNotification == null?{bool}`
 =================== 
`updateLightsLocked,turn off notificationLight`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`removeNotification:{number}|{string}|{number}|{string}|{number}`
 =================== 
`updateNotificationShade: total={number}, active={number}`
 =================== 
`animateCollapsePanels:flags={number}, force={bool}, delayed={bool}, mExpandedVisible={bool}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`The change in focus caused us to need to do a layout begin`
 =================== 
`The change in focus caused us to need to do a layout end`
 =================== 
`overlapAmount:{number}, previousNotificationEnd:{number}, newYTranslation:{number}, location:{number}, i:{number}, getTopPadding:{number}, getLocationOnScreen():{number}`
 =================== 
`state.clipTopAmount:{number}, i:{number}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`setSystemUiVisibility vis={number} mask={hex} oldVal={hex} newVal={number} diff={hex} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`cancelAutohide`
 =================== 
`notifyUiVisibilityChanged:vis={hex}, SystemUiVisibility={hex}`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
The template of the given log message is `overlapAmount:{number}, previousNotificationEnd:{number}, newYTranslation:{number}, location:{number}, i:{number}, getTopPadding:{number}, getLocationOnScreen():{number}`.
 =================== 
`state.clipTopAmount:{number}, i:{number}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`overlapAmount:{number}, previousNotificationEnd:{number}, newYTranslation:{number}, location:{number}, i:{number}, getTopPadding:{number}, getLocationOnScreen():{number}`
 =================== 
`state.clipTopAmount:{number}, i:{number}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`updateNotificationShade: total={number}, active={number}`
 =================== 
`removeNotificationChildren`
 =================== 
`onExpandingFinished`
 =================== 
`updateNotificationShade: total={number}, active={number}`
 =================== 
`removeNotificationChildren`
 =================== 
The template of the given log message is `Sending non-protected broadcast {string} from system {number}:{string} pkg {string}`.
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
The template of the given log message is `Skipping, withExcluded: {bool}, tr.intent:Intent { flg={hex} cmp={string} bnds=[{number},{number}][{number},{number}] }`.
 =================== 
`Skipping, withExcluded: {bool}, tr.intent:Intent { act={string} flg={hex} cmp={string} (has extras) }`
 =================== 
The template of the given log message is `Skipping, withExcluded: {bool}, tr.intent:Intent { flg={hex} cmp={string} (has extras) }`.
 =================== 
The template of the given log message is: 
`Skipping, withExcluded: {bool}, tr.intent:Intent { flg={hex} cmp={string} (has extras) }`
 =================== 
`Skipping, withExcluded: {bool}, tr.intent:Intent { act=com.android.contacts.action.CHOOSE_SUB dat=tel:xxxxxxxxxxx flg=0x10808000 cmp=com.android.contacts/.ChooseSubActivity (has extras) }`
 =================== 
The template of the given log message is:
`Skipping, withExcluded: {bool}, tr.intent:Intent { act=android.intent.action.VIEW dat={string} typ={string} flg={hex} cmp={string} (has extras) }`
 =================== 
`getRecentTasks: num={number},flags={number},totalTasks={number}`
 =================== 
`getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
The template of the given log message is `Skipping, withExcluded: {bool}, tr.intent:Intent { flg=0x{hex} cmp={string} bnds=[{number},{number}][{number},{number}] }`.
 =================== 
`Skipping, withExcluded: {bool}, tr.intent:Intent { act={string} flg={hex} cmp={string} (has extras) }`
 =================== 
The template of the given log message is: 
`Skipping, withExcluded: {bool}, tr.intent:Intent { flg={hex} cmp={component} (has extras) }`
 =================== 
`getRecentTasks: num={number},flags={number},totalTasks={number}`
 =================== 
`getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity}`
 =================== 
`cancelNotificationWithTag pid {number},uid = {number},tag = {string},pkg ={string},id ={number}`
 =================== 
`cancelNotification,index:{number}`
 =================== 
`cancelNotificationWithTag pid {number},uid ={number},tag ={string},pkg ={string},id ={number}`
 =================== 
`cancelNotification,index:{number}`
 =================== 
`cancelNotificationWithTag pid {number},uid ={number},tag ={string},pkg ={string},id ={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setSystemUiVisibility vis={number} mask={hex} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`cancelAutohide`
 =================== 
`notifyUiVisibilityChanged:vis={hex}, SystemUiVisibility={hex}`
 =================== 
`makeExpandedInvisible: mExpandedVisible={bool}`
 =================== 
`closeQs`
 =================== 
`cancelPeek: {bool}`
 =================== 
`instantCollapse`
 =================== 
`cancelPeek: {bool}`
 =================== 
`closeQs`
 =================== 
`resumeSuspendedAutohide`
 =================== 
`disable: < {string} expand icons* alerts {string} back home recent clock navigationbar search quick_settings >`
 =================== 
`cancelNotificationWithTag pid {number},uid = {number},tag = {string},pkg ={string},id ={number}`
 =================== 
`cancelNotification,index:{number}`
 =================== 
`cancelNotification,index:{number}`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`release:lock={number}, flg={hex}, tag="{string}", name="{string}", ws=WorkSource{number}, uid={number}, pid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`cancelNotificationWithTag pid {number},uid ={number},tag = {string},pkg ={string},id ={number}`
 =================== 
`cancelNotification,index:{number}`
 =================== 
`cancelNotificationWithTag pid {number},uid ={number},tag ={string},pkg ={string},id ={number}`
 =================== 
`cancelNotificationWithTag pid {number},uid ={number},tag ={string},pkg ={string},id ={number}`
 =================== 
`cancelNotificationWithTag pid {number},uid ={number},tag ={string},pkg ={string},id ={number}`
 =================== 
`cancelNotification,index:{number}`
 =================== 
`cancelNotification,index:{number}`
 =================== 
`cancelNotification,index:{number}`
 =================== 
`cancelNotificationWithTag pid {number},uid = {number},tag = {string},pkg ={string},id ={number}`
 =================== 
`cancelNotification,index:{number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Releasing suspend blocker "{string}".`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`registerCallback not in {string}.`
 =================== 
The template of `android.util.AndroidRuntimeException: Must execute in UI` is `android.util.AndroidRuntimeException: {string}`.
 =================== 
`*** unregister callback for {string}@{hex}`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`getTasks: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`Destroying surface Surface(name={string}) called by {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`getTasks: caller {number} does not hold {string}; limiting output`
 =================== 
The log message provided does not contain any variables or placeholders to abstract. Therefore, the template would be the same as the input log message: `isMusicActive...`.
 =================== 
I'm sorry, but the log message provided is not delimited by backticks. Can you please provide the log message delimited by backticks so that I can assist you further?
 =================== 
`Start dump, calling from : pid={number}, uid={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
The template of the given log message is `acquire lock={number}, flags={hex}, tag={string}, name={string}, ws={null}, uid={number}, pid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Acquiring suspend blocker "{string}".`
 =================== 
`setWiredDeviceConnectionState  type: {number}  state: {number}`
 =================== 
The template of the given log message is `acquire lock={number}, flags={hex}, tag="{string}", name="{string}", ws={null}, uid={number}, pid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`setWiredDeviceConnectionState  type: {number}  state: {number}`
 =================== 
The template of the given log message is: 
`release:lock={number}, flg={hex}, tag="{string}", name="{string}", ws={null}, uid={number}, pid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`isMusicActive...`
 =================== 
`ActivityManagerService,attachApplication,callingPid = {number}`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
The template of the given log message is `acquire lock={number}, flags={hex}, tag={string}, name={string}, ws={null}, uid={number}, pid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`release:lock={number}, flg={hex}, tag="{string}", name="{string}", ws={null}, uid={number}, pid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
The log message provided does not contain any variables or placeholders to abstract. Therefore, the template for the given log message would be the same as the original log message: `isBluetoothA2dpOn...`.
 =================== 
The template of `isMusicActive...` is `isMusicActive...`.
 =================== 
The template of `isBluetoothScoOn...` is `isBluetoothScoOn...`.
 =================== 
`getLastAudibleStreamVolume  treamType: {number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`cancelNotification,index:{number}`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold {string}; limiting output`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`getRunningAppProcesses: caller {number} does not hold {string}; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`getLastAudibleStreamVolume  treamType: {number}`
 =================== 
`getLastAudibleStreamVolume  treamType: {number}`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`getDevicesForStream  streamType: {number}`
 =================== 
`getLastAudibleStreamVolume  treamType: {number}`
 =================== 
`getDevicesForStream  streamType: {number}`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`getLastAudibleStreamVolume  treamType: {number}`
 =================== 
`getLastAudibleStreamVolume  treamType: {number}`
 =================== 
`getLastAudibleStreamVolume  treamType: {number}`
 =================== 
`getLastAudibleStreamVolume  treamType: {number}`
 =================== 
`getLastAudibleStreamVolume  treamType: {number}`
 =================== 
`cleanUpApplicationRecord -- {string} {number}`
 =================== 
`cleanUpApplicationRecordLocked, pid: {number}, restart: {bool}`
 =================== 
`cleanUpApplicationRecordLocked, reset pid: {number}, euid: {number}`
 =================== 
`stopWifiDisplayScanLocked record.mWifiDisplayScanRequested={bool}`
 =================== 
`stopWifiDisplayScanLocked mWifiDisplayScanRequestCount={number}`
 =================== 
I'm sorry, but the log message provided is incomplete. In order to create a template, I would need the complete log message delimited by backticks. If you could provide the full log message, I would be happy to create the template for you.
 =================== 
`setSpeakerphoneOn  on: {bool}`
 =================== 
`setSpeakerphoneOn on:{bool}`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
The template of the given log message is `release:lock={number}, flg={hex}, tag="{string}", name="{string}", ws={null}, uid={number}, pid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Releasing suspend blocker "{string}".`
 =================== 
The template of the given log message is: 
`sending alarm Alarm{aa90550 type {number} when {number} PendingIntent{1749923: PendingIntentRecord{9600e20 android broadcastIntent}}},repeatInterval = {number},listenerTag ={string}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Acquiring suspend blocker "{string}".`
 =================== 
`Received {string} alarm; rescheduling`
 =================== 
`scheduleTimeTickEvent triggerAtTime = {number}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`received broadcast {string}`
 =================== 
`handleTimeUpdate`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Releasing suspend blocker "{string}".`
 =================== 
`userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message delimited by backticks is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message delimited by backticks is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`playSoundEffect   effectType: {number}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`Destroying surface Surface(name={string}) called by {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number}`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`Destroying surface Surface(name={string}) called by {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number}`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`getTasks: caller {number} does not hold {string}; limiting output`
 =================== 
`getTasks: caller {number} does not hold {string}; limiting output`
 =================== 
`getTasks: caller {number} does not hold {string}; limiting output`
 =================== 
`getTasks: caller {number} does not hold {string}; limiting output`
 =================== 
`getTasks: caller {number} does not hold {string}; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn:{bool}`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message delimited by backticks is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`Destroying surface Surface(name={string}) called by {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number}`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`Destroying surface Surface(name={string}) called by {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number}`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
The template of the given log message is `Animating brightness: target={number}, rate={number}`.
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn:{bool}`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
The template of the given log message is `acquire lock={number}, flags={hex}, tag="{string}", name={string}, ws={null}, uid={number}, pid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Acquiring suspend blocker "{string}".`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message delimited by backticks is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
`getNeighboringCellInfo calling app is {string}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`release:lock={number}, flg={hex}, tag="{string}", name="{string}", ws={null}, uid={number}, pid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Releasing suspend blocker "{string}".`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Acquiring suspend blocker "{string}".`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Releasing suspend blocker "{string}".`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Acquiring suspend blocker "{string}".`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Releasing suspend blocker "{string}".`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`getTasks: caller {number} does not hold {string}; limiting output`
 =================== 
`getTasks: caller {number} does not hold {string}; limiting output`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message delimited by backticks is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`Destroying surface Surface(name={string}) called by {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number}`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`Destroying surface Surface(name={string}) called by {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number}`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
The template of the given log message is `Animating brightness: target={number}, rate={number}`.
 =================== 
`userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`getRunningAppProcesses: caller {number} does not hold {string}; limiting output`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
I'm sorry, but the log message provided is not delimited by backticks and does not contain any variables to abstract. Can you please provide a log message that includes variables to abstract?
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`playSoundEffect   effectType: {number}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
`Destroying surface Surface(name={string}) called by {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number}`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`Destroying surface Surface(name={string}) called by {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number}`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`getTasks: caller {number} does not hold {string}; limiting output`
 =================== 
`getTasks: caller {number} does not hold {string}; limiting output`
 =================== 
`getTasks: caller {number} does not hold {string}; limiting output`
 =================== 
`getTasks: caller {number} does not hold {string}; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`isMusicActive...`
 =================== 
`sending alarm Alarm{19069ff type {number} when {number} PendingIntent{50303cc: PendingIntentRecord{e204f60 com.android.phone broadcastIntent}}},repeatInterval = {number},listenerTag ={null}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
The template of the given log message is `Acquiring suspend blocker "{string}".`
 =================== 
`Killing {number}:{string}/{string} (adj {number}): empty for {number}s`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Releasing suspend blocker "{string}".`
 =================== 
`stopWifiDisplayScanLocked record.mWifiDisplayScanRequested={bool}`
 =================== 
`stopWifiDisplayScanLocked mWifiDisplayScanRequestCount={number}`
 =================== 
`cleanUpApplicationRecord -- {string} {number}`
 =================== 
`cleanUpApplicationRecordLocked, pid: {number}, restart: {bool}`
 =================== 
`cleanUpApplicationRecordLocked, reset pid: {number}, euid: {number}`
 =================== 
`stopWifiDisplayScanLocked record.mWifiDisplayScanRequested={bool}`
 =================== 
`stopWifiDisplayScanLocked mWifiDisplayScanRequestCount={number}`
 =================== 
`cleanUpApplicationRecord -- {string} {number}`
 =================== 
`cleanUpApplicationRecordLocked, pid: {number}, restart: {bool}`
 =================== 
`cleanUpApplicationRecordLocked, reset pid: {number}, euid: {number}`
 =================== 
`stopWifiDisplayScanLocked record.mWifiDisplayScanRequested={bool}`
 =================== 
`stopWifiDisplayScanLocked mWifiDisplayScanRequestCount={number}`
 =================== 
`cleanUpApplicationRecord -- {number}`
 =================== 
`cleanUpApplicationRecordLocked, pid: {number}, restart: {bool}`
 =================== 
`cleanUpApplicationRecordLocked, reset pid: {number}, euid: {number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`getTasks: caller {number} does not hold {string}; limiting output`
 =================== 
The template of `getTasks: caller 10111 does not hold REAL_GET_TASKS; limiting output` is `getTasks: caller {number} does not hold REAL_GET_TASKS; limiting output`.
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`getRunningAppProcesses: caller {number} does not hold {string}; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold {string}; limiting output`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
I'm sorry, but the log message provided is not delimited by backticks and does not contain any variables to abstract. Can you please provide a log message that includes variables to abstract?
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`isMusicActive...`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Acquiring suspend blocker "{string}".`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Releasing suspend blocker "{string}".`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`sending alarm Alarm{c1705d3 type {number} when {number} PendingIntent{1749923: PendingIntentRecord{9600e20 android broadcastIntent}}},repeatInterval = {number},listenerTag ={string}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Acquiring suspend blocker "{string}".`
 =================== 
`Received {string} alarm; rescheduling`
 =================== 
`scheduleTimeTickEvent triggerAtTime = {number}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`received broadcast {string}`
 =================== 
`handleTimeUpdate`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Releasing suspend blocker "{string}".`
 =================== 
The template of the given log message is `acquire lock={number}, flags={hex}, tag="{string}", name={string}, ws={null}, uid={number}, pid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Acquiring suspend blocker "{string}".`
 =================== 
`remove(PendingIntent{e4e2534: PendingIntentRecord{e204f60 {packageName} {action}}}) changed bounds; rebatching`
 =================== 
`release:lock={number}, flg={hex}, tag="{string}", name="{string}", ws={null}, uid={number}, pid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Releasing suspend blocker "{string}".`
 =================== 
`getRunningAppProcesses: caller {number} does not hold {string}; limiting output`
 =================== 
The template of the given log message is `acquire lock={number}, flags={hex}, tag="{string}", name={string}, ws={null}, uid={number}, pid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Acquiring suspend blocker "{string}".`
 =================== 
The template of the given log message is `acquire lock={number}, flags={hex}, tag="{string}", name={string}, ws={null}, uid={number}, pid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
`release:lock={number}, flg={hex}, tag="{string}", name="{string}", ws={null}, uid={number}, pid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Releasing suspend blocker "{string}".`
 =================== 
`getNeighboringCellInfo calling app is {string}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
The template of the given log message is `Acquiring suspend blocker "{string}".`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Releasing suspend blocker "{string}".`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Acquiring suspend blocker "{string}".`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Releasing suspend blocker "{string}".`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Acquiring suspend blocker "{string}".`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Releasing suspend blocker "{string}".`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`Unable to start service Intent { act={string} cmp={string} U={number}: {string}` not found`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Acquiring suspend blocker "{string}".`
 =================== 
`getRunningAppProcesses: caller {number} does not hold {string}; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Releasing suspend blocker "{string}".`
 =================== 
The template of the log message is `acquire lock={number}, flags={hex}, tag="{string}", name={string}, ws={null}, uid={number}, pid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Acquiring suspend blocker "{string}".`
 =================== 
`release:lock={number}, flg={hex}, tag="{string}", name="{string}", ws={null}, uid={number}, pid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Releasing suspend blocker "{string}".`
 =================== 
The template of the given log message delimited by backticks is `acquire lock={number}, flags={hex}, tag="{string}", name={string}, ws={null}, uid={number}, pid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Acquiring suspend blocker "{string}".`
 =================== 
`acquire lock={number}, flags={hex}, tag="{string}", name={string}, ws={null}, uid={number}, pid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
`getNeighboringCellInfo calling app is {string}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
The template of the given log message is `release:lock={number}, flg={hex}, tag="{string}", name="{string}", ws={null}, uid={number}, pid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Releasing suspend blocker "{string}".`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Acquiring suspend blocker "{string}".`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Releasing suspend blocker "{string}".`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Acquiring suspend blocker "{string}".`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Releasing suspend blocker "{string}".`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
The template of the given log message is `acquire lock={number}, flags={hex}, tag="{string}", name={string}, ws={null}, uid={number}, pid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Acquiring suspend blocker "{string}".`
 =================== 
The template of the given log message is: 
`acquire lock={number}, flags={hex}, tag="{string}", name={string}, ws={null}, uid={number}, pid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
`release:lock={number}, flg={hex}, tag="{string}", name="{string}", ws={null}, uid={number}, pid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Releasing suspend blocker "{string}".`
 =================== 
`getNeighboringCellInfo calling app is {string}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Acquiring suspend blocker "{string}".`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Releasing suspend blocker "{string}".`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
The template of the given log message is `Animating brightness: target={number}, rate={number}`.
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`getRunningAppProcesses: caller {number} does not hold {string}; limiting output`
 =================== 
`unregisterAudioFocusListener...`
 =================== 
`abandonAudioFocus`
 =================== 
`[HSM] stayAwake {bool} uid: {number}, pid: {number}`
 =================== 
`Pid:{number} {string}`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`stopWifiDisplayScanLocked record.mWifiDisplayScanRequested={bool}`
 =================== 
`stopWifiDisplayScanLocked mWifiDisplayScanRequestCount={number}`
 =================== 
`Process {processName} (pid {processId}) has died`
 =================== 
`cleanUpApplicationRecord -- {string} {number}`
 =================== 
`Scheduling restart of crashed service {service} in {number}ms`
 =================== 
`cleanUpApplicationRecordLocked, pid: {number}, restart: {bool}`
 =================== 
`cleanUpApplicationRecordLocked, reset pid: {number}, euid: {number}`
 =================== 
`getTasks: caller {number} does not hold {string}; limiting output`
 =================== 
I'm sorry, but the log message provided is not delimited by backticks and does not contain any variables to abstract. Can you please provide a log message that includes variables to abstract?
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`new Process app=ProcessRecord{6eaaf00 0:{string}:qzone/u0a111}, name: {string}, euid: {number}`
 =================== 
`Start proc {number}:{string}:{string}/{string} for service {string}/{string}`
 =================== 
`ActivityManagerService,attachApplication,callingPid = {number}`
 =================== 
`getRunningAppProcesses: caller {number} does not hold {string}; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold {string}; limiting output`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`getRunningAppProcesses: caller {number} does not hold {string}; limiting output`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`getRunningAppProcesses: caller {number} does not hold {string}; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`getTasks: caller {number} does not hold {string}; limiting output`
 =================== 
`getTasks: caller {number} does not hold {string}; limiting output`
 =================== 
`getTasks: caller {number} does not hold {string}; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`{string}`
 =================== 
`interceptKeyTq keycode={number} interactive={bool} keyguardActive={bool} policyFlags={hex} down {bool} canceled {bool}`
 =================== 
`interceptKeyBeforeQueueing: key {number} , result : {number}`
 =================== 
`userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Destroying surface Surface(name={string}) called by {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number}`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`resumeSuspendedAutohide`
 =================== 
The template of the given log message is `interceptKeyTq keycode={number} interactive={bool} keyguardActive={bool} policyFlags={hex} down {bool} canceled {bool}`.
 =================== 
`interceptKeyBeforeQueueing: key {number} , result : {number}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`Destroying surface Surface(name={string}) called by {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number}`
 =================== 
`{string}`
 =================== 
The template of the given log message is `interceptKeyTq keycode={number} interactive={bool} keyguardActive={bool} policyFlags={hex} down {bool} canceled {bool}`.
 =================== 
`interceptKeyBeforeQueueing: key {number} , result : {number}`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`resumeSuspendedAutohide`
 =================== 
`interceptKeyTq keycode={number} interactive={bool} keyguardActive={bool} policyFlags={hex} down {bool} canceled {bool}`
 =================== 
`interceptKeyBeforeQueueing: key {number} , result : {number}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
I'm sorry, but the log message provided is not delimited by backticks and does not contain any variables to abstract. Can you please provide a log message that includes variables to abstract?
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`{string}`
 =================== 
The template of the given log message is `interceptKeyTq keycode={number} interactive={bool} keyguardActive={bool} policyFlags={hex} down {bool} canceled {bool}`.
 =================== 
`interceptKeyBeforeQueueing: key {number} , result : {number}`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`resumeSuspendedAutohide`
 =================== 
`userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
The template of the given log message is `interceptKeyTq keycode={number} interactive={bool} keyguardActive={bool} policyFlags={hex} down {bool} canceled {bool}`.
 =================== 
`interceptKeyBeforeQueueing: key {number} , result : {number}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`animateCollapsePanels:flags={number}, force={bool}, delayed={bool}, mExpandedVisible={bool}`
 =================== 
`closeQs`
 =================== 
`cancelPeek: {bool}`
 =================== 
`instantCollapse`
 =================== 
`cancelPeek: {bool}`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
The template of the given log message is `acquire lock={number}, flags={hex}, tag="{string}", name={string}, ws=WorkSource{number}, uid={number}, pid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Acquiring suspend blocker "{string}".`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the input log message delimited by backticks is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`Taking screenshot from Surface with crop:[{Rect}], width:[{number}], height:[{number}], minLayer:[{number}], maxLayer:[{number}], inRotation:[{bool}], rot:[{number}]`
 =================== 
The template of `The change in focus caused us to need to do a layout begin` is `The change in focus caused us to need to do a layout begin`.
 =================== 
`The change in focus caused us to need to do a layout end`
 =================== 
The template of the given log message is:
`setSystemUiVisibility vis={number} mask={hex} oldVal={hex} newVal={number} diff={hex} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`cancelAutohide`
 =================== 
`notifyUiVisibilityChanged:vis={hex}, SystemUiVisibility={hex}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`Skipping, withExcluded: {bool}, tr.intent:Intent { flg={hex}, cmp={string} bnds=[{number},{number}][{number},{number}] }`
 =================== 
`Skipping, withExcluded: {bool}, tr.intent:Intent { act={string} flg={hex} cmp={string} (has extras) }`
 =================== 
`Skipping, withExcluded: {bool}, tr.intent:Intent { flg={hex} cmp={string} (has extras) }`
 =================== 
The template of the given log message is `Skipping, withExcluded: {bool}, tr.intent:Intent { flg={hex} cmp={component} (has extras) }`.
 =================== 
`Skipping, withExcluded: {bool}, tr.intent:Intent { act={string} dat={string} flg={hex} cmp={string} }`
 =================== 
The template of the given log message is: 
`Skipping, withExcluded: {bool}, tr.intent:Intent { act=android.intent.action.VIEW dat={string} typ={string} flg={hex} cmp={string} (has extras) }`
 =================== 
`getRecentTasks: num={number},flags={number},totalTasks={number}`
 =================== 
`getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity}`
 =================== 
The template of the given log message is: 
`Skipping, withExcluded: {bool}, tr.intent:Intent { flg={hex} cmp={component} bnds=[{number},{number}][{number},{number}] }`
 =================== 
`Skipping, withExcluded: {bool}, tr.intent:Intent { act={string} flg={hex} cmp={string} (has extras) }`
 =================== 
The template of the given log message is `Skipping, withExcluded: {bool}, tr.intent:Intent { flg={hex} cmp={string} (has extras) }`.
 =================== 
`getRecentTasks: num={number},flags={number},totalTasks={number}`
 =================== 
`getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity}`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={hex} mask={hex} oldVal={hex} newVal={hex} diff={hex} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`cancelAutohide`
 =================== 
`notifyUiVisibilityChanged:vis={hex}, SystemUiVisibility={hex}`
 =================== 
`release:lock={number}, flg={hex}, tag="{string}", name="{string}", ws=WorkSource{number}, uid={number}, pid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Releasing suspend blocker "{string}".`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
`getRunningAppProcesses: caller {number} does not hold {string}; limiting output`
 =================== 
`getTasks: caller {number} does not hold {string}; limiting output`
 =================== 
`ActivityManagerService,attachApplication,callingPid = {number}`
 =================== 
`getTasks: caller {number} does not hold {string}; limiting output`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
The template of the given log message is:
`Destroying surface Surface(name={string}) called by {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number}`.
 =================== 
`getRunningAppProcesses: caller {number} does not hold {string}; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Acquiring suspend blocker "{string}".`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Releasing suspend blocker "{string}".`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Acquiring suspend blocker "{string}".`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Releasing suspend blocker "{string}".`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
The template of the given log message is `shouldBlockLocation  ret:{bool}`.
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`stopWifiDisplayScanLocked record.mWifiDisplayScanRequested={bool}`
 =================== 
`stopWifiDisplayScanLocked mWifiDisplayScanRequestCount={number}`
 =================== 
`cleanUpApplicationRecord -- {string} {number}`
 =================== 
`cleanUpApplicationRecordLocked, pid: {number}, restart: {bool}`
 =================== 
`cleanUpApplicationRecordLocked, reset pid: {number}, euid: {number}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`getTasks: caller {number} does not hold {string}; limiting output`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
The template of the given log message is `Animating brightness: target={number}, rate={number}`.
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`getTasks: caller {number} does not hold {string}; limiting output`
 =================== 
`cancelNotificationWithTag pid {number},uid ={number},tag ={string},pkg ={string},id ={number}`
 =================== 
`cancelNotification,index:{number}`
 =================== 
`cancelNotificationWithTag pid {number},uid = {number},tag = {string},pkg ={string},id ={number}`
 =================== 
`cancelNotification,index:{number}`
 =================== 
`enqueueNotificationInternal: pkg={string} id={number} notification=Notification(pri={number} contentView={null|string} vibrate=[{number}] sound={null|string} tick defaults={hex} flags={hex} color={hex} vis={string}`
 =================== 
`enqueueNotificationInternal: n.getKey = {number}|{string}|{number}|{string}|{number}`
 =================== 
`getRingerMode...`
 =================== 
`updateLightsLocked,mInCall ={bool},mScreenOn = {bool},ledNotification == null?{bool}`
 =================== 
`updateLightsLocked,turn off notificationLight`
 =================== 
`addNotification key={number}|{string}|{number}|{string}|{number}`
 =================== 
`mHeadsUpExistenceChangedRunnable`
 =================== 
The template of the given log message is `disable: < expand {ICONS*} alerts {SYSTEM_INFO*} back home recent clock navigationbar search quick_settings >`.
 =================== 
`{string}`
 =================== 
`updateNotificationShade: total={number}, active={number}`
 =================== 
`removeNotificationChildren`
 =================== 
`updateNotificationShade: total={number}, active={number}`
 =================== 
`removeNotificationChildren`
 =================== 
`Marking notification as seen {number}|{string}|{number}|{string}|{number}`
 =================== 
`onNotificationExpansionChanged called`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`getRunningAppProcesses: caller {number} does not hold {string}; limiting output`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`logNotificationVisibilityChanges runInThread start`
 =================== 
`onNotificationVisibilityChanged called`
 =================== 
`logNotificationVisibilityChanges {string} {string} {string}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`playSoundEffect   effectType: {number}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
`START u0 {act={string} cat={string} flg={hex} cmp={string} bnds={string}} from uid {number} on display {number}`
 =================== 
`ActivityRecord info: ActivityInfo{f39182 {string}}, euid: {number}`
 =================== 
The template of the log message is `acquire lock={number}, flags={hex}, tag="{string}", name={string}, ws=WorkSource{number}, uid={number}, pid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Acquiring suspend blocker "{string}".`
 =================== 
`rotationForOrientationLw(orient={number}, last={number}); user={number} USER_ROTATION_LOCKED`
 =================== 
`Application requested orientation {number}, got rotation {number} which has compatible metrics`
 =================== 
`The change in focus caused us to need to do a layout begin`
 =================== 
`The change in focus caused us to need to do a layout end`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={hex} mask={hex} oldVal={hex} newVal={hex} diff={hex} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`cancelAutohide`
 =================== 
`notifyUiVisibilityChanged:vis={hex}, SystemUiVisibility={hex}`
 =================== 
The template of the given log message is `Skipping, withExcluded: {bool}, tr.intent:Intent { flg=0x{hex} cmp={string} bnds=[{number},{number}][{number},{number}] }`.
 =================== 
`Skipping, withExcluded: {bool}, tr.intent:Intent { act={string} flg={hex} cmp={string} (has extras) }`
 =================== 
`Skipping, withExcluded: {bool}, tr.intent:Intent { flg={hex} cmp={string} (has extras) }`
 =================== 
The template of the given log message is `Skipping, withExcluded: {bool}, tr.intent:Intent { flg={hex} cmp={component} (has extras) }`.
 =================== 
The template of the given log message is: 
`Skipping, withExcluded: {bool}, tr.intent:Intent { act={string} dat={string} flg={hex} cmp={string} (has extras) }`
 =================== 
The template of the given log message is:
`Skipping, withExcluded: {bool}, tr.intent:Intent { act=android.intent.action.VIEW dat={string} typ={string} flg={hex} cmp={string} (has extras) }`
 =================== 
`getRecentTasks: num={number},flags={number},totalTasks={number}`
 =================== 
`getRecentTasks: topActivity=ComponentInfo{com.example.android.notepad/com.example.android.notepad.NoteEditor}`
 =================== 
The template of the given log message is `Skipping, withExcluded: {bool}, tr.intent:Intent { flg={hex} cmp={component} bnds=[{number},{number}][{number},{number}] }`.
 =================== 
`Skipping, withExcluded: {bool}, tr.intent:Intent { act={string} flg={hex} cmp={string} }`
 =================== 
`Skipping, withExcluded: {bool}, tr.intent:Intent { flg={hex} cmp={string} (has extras) }`
 =================== 
The template of the given log message is `getRecentTasks: num={number},flags={number},totalTasks={number}`.
 =================== 
`getRecentTasks: topActivity=ComponentInfo{com.example.android.notepad/com.example.android.notepad.NoteEditor}`
 =================== 
`setSystemUiVisibility vis={hex} mask={hex} oldVal={hex} newVal={hex} diff={hex} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`cancelAutohide`
 =================== 
`notifyUiVisibilityChanged:vis={hex}, SystemUiVisibility={hex}`
 =================== 
`release:lock={number}, flg={hex}, tag="{string}", name="{string}", ws=WorkSource{number}, uid={number}, pid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Releasing suspend blocker "{string}".`
 =================== 
`userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`updateNotificationShade: total={number}, active={number}`
 =================== 
`removeNotificationChildren`
 =================== 
`overlapAmount:{number}, previousNotificationEnd:{number}, newYTranslation:{number}, location:{number}, i:{number}, getTopPadding:{number}, getLocationOnScreen():{number}`
 =================== 
The template of the given log message is `state.clipTopAmount:{number}, i:{number}`.
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`ACTIVITY check resid: {string}, size={number}`
 =================== 
`m{string}`
 =================== 
`updateNotificationShade: total={number}, active={number}`
 =================== 
`removeNotificationChildren`
 =================== 
`overlapAmount:{number}, previousNotificationEnd:{number}, newYTranslation:{number}, location:{number}, i:{number}, getTopPadding:{number}, getLocationOnScreen():{number}`
 =================== 
`state.clipTopAmount:{number}, i:{number}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`makeExpandedInvisible: mExpandedVisible={bool}`
 =================== 
`closeQs`
 =================== 
`cancelPeek: {bool}`
 =================== 
`instantCollapse`
 =================== 
`cancelPeek: {bool}`
 =================== 
`closeQs`
 =================== 
`logNotificationVisibilityChanges runInThread start`
 =================== 
`onNotificationVisibilityChanged called`
 =================== 
`resumeSuspendedAutohide`
 =================== 
The template of the given log message is `disable: < {string} >`.
 =================== 
`logNotificationVisibilityChanges {string} {bool} {string}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Destroying surface Surface(name={string}) called by {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number}`
 =================== 
`getRunningAppProcesses: caller {number} does not hold {string}; limiting output`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`playSoundEffect   effectType: {number}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
`Destroying surface Surface(name={string}) called by {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number}`
 =================== 
`ActivityManagerService,attachApplication,callingPid = {number}`
 =================== 
`Destroying surface Surface(name={string}) called by {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number}`
 =================== 
The template of the given log message is `ACTIVITY check resid: {string}, size={number}`.
 =================== 
`setSystemUiVisibility vis={hex} mask={hex} oldVal={hex} newVal={hex} diff={hex} fullscreenStackVis={int} dockedStackVis={int}, fullscreenStackBounds=Rect({int}, {int} - {int}, {int}), dockedStackBounds=Rect({int}, {int} - {int}, {int})`
 =================== 
`notifyUiVisibilityChanged:vis={hex}, SystemUiVisibility={hex}`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={hex} mask={hex} oldVal={hex} newVal={hex} diff={hex} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`notifyUiVisibilityChanged:vis={hex}, SystemUiVisibility={hex}`
 =================== 
`userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`{string}`
 =================== 
`interceptKeyTq keycode={number} interactive={bool} keyguardActive={bool} policyFlags={hex} down {bool} canceled {bool}`
 =================== 
`interceptKeyBeforeQueueing: key {number} , result : {number}`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`resumeSuspendedAutohide`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
The template of the given log message is `interceptKeyTq keycode={number} interactive={bool} keyguardActive={bool} policyFlags={hex} down {bool} canceled {bool}`.
 =================== 
`interceptKeyBeforeQueueing: key {number} , result : {number}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
`animateCollapsePanels:flags={number}, force={bool}, delayed={bool}, mExpandedVisible={bool}`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
The template of the given log message is: 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`closeQs`
 =================== 
`cancelPeek: {bool}`
 =================== 
`instantCollapse`
 =================== 
`cancelPeek: {bool}`
 =================== 
The template of the given log message is `acquire lock={number}, flags={hex}, tag="{string}", name={string}, ws=WorkSource{number}, uid={number}, pid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Acquiring suspend blocker "{string}".`
 =================== 
`rotationForOrientationLw(orient={number}, last={number}); user={number} USER_ROTATION_LOCKED`
 =================== 
`Application requested orientation {number}, got rotation {number} which has compatible metrics`
 =================== 
`Taking screenshot from Surface with crop:[{Rect}], width:[{number}], height:[{number}], minLayer:[{number}], maxLayer:[{number}], inRotation:[{bool}], rot:[{number}]`
 =================== 
`The change in focus caused us to need to do a layout begin`
 =================== 
`The change in focus caused us to need to do a layout end`
 =================== 
`setSystemUiVisibility vis={number} mask={hex} oldVal={hex} newVal={number} diff={hex} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`cancelAutohide`
 =================== 
`notifyUiVisibilityChanged:vis={hex}, SystemUiVisibility={hex}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
The template of the given log message is `Skipping, withExcluded: {bool}, tr.intent:Intent { flg=0x{hex} cmp={component} bnds=[{number},{number}][{number},{number}] }`.
 =================== 
`Skipping, withExcluded: {bool}, tr.intent:Intent { act=android.intent.action.MAIN flg={hex} cmp={component} (has extras) }`
 =================== 
The template of the given log message is: 
`Skipping, withExcluded: {bool}, tr.intent:Intent { flg={hex} cmp={string} (has extras) }`
 =================== 
The template of the given log message is `Skipping, withExcluded: {bool}, tr.intent:Intent { flg={hex} cmp={string} (has extras) }`.
 =================== 
The template of the given log message is: 
`Skipping, withExcluded: {bool}, tr.intent:Intent { act={string} dat={string} flg={hex} cmp={string} (has extras) }`
 =================== 
The template of the given log message is: 
`Skipping, withExcluded: {bool}, tr.intent:Intent { act=android.intent.action.VIEW dat={string} typ={string} flg={string} cmp={string} (has extras) }`
 =================== 
`getRecentTasks: num={number},flags={number},totalTasks={number}`
 =================== 
`getRecentTasks: topActivity=ComponentInfo{com.example.android.notepad/com.example.android.notepad.NoteEditor}`
 =================== 
The template of the given log message is `Skipping, withExcluded: {bool}, tr.intent:Intent { flg={hex} cmp={string} bnds=[{number},{number}][{number},{number}] }`
 =================== 
`Skipping, withExcluded: {bool}, tr.intent:Intent { act={string} flg={hex} cmp={string} (has extras) }`
 =================== 
`Skipping, withExcluded: {bool}, tr.intent:Intent { flg={hex} cmp={string} (has extras) }`
 =================== 
`getRecentTasks: num={number},flags={number},totalTasks={number}`
 =================== 
`getRecentTasks: topActivity=ComponentInfo{com.example.android.notepad/com.example.android.notepad.NoteEditor}`
 =================== 
The template of the given log message is `getTasks: caller {number} does not hold REAL_GET_TASKS; limiting output`.
 =================== 
`setSystemUiVisibility vis={hex} mask={hex} oldVal={hex} newVal={hex} diff={hex} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`cancelAutohide`
 =================== 
`notifyUiVisibilityChanged:vis={hex}, SystemUiVisibility={hex}`
 =================== 
The template of the given log message is `getTasks: caller {number} does not hold REAL_GET_TASKS; limiting output`.
 =================== 
`release:lock={number}, flg={hex}, tag="{string}", name="{string}", ws=WorkSource{number}, uid={number}, pid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Releasing suspend blocker "{string}".`
 =================== 
`Destroying surface Surface(name={string}) called by {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number}`
 =================== 
`Destroying surface Surface(name={string}) called by {string}`
 =================== 
The template of the given log message is `getTasks: caller {number} does not hold {string}; limiting output`.
 =================== 
The template of the given log message is `getTasks: caller {number} does not hold {string}; limiting output`.
 =================== 
`getRingerMode...`
 =================== 
The template of `userActivityNoUpdateLocked: eventTime=261973289, event=2, flags=0x0, uid=1000` is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`{string}`
 =================== 
The template of the given log message is: 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
The template of the given log message is `interceptKeyTq keycode={number} interactive={bool} keyguardActive={bool} policyFlags={hex} down {bool} canceled {bool}`.
 =================== 
`interceptKeyBeforeQueueing: key {number} , result : {number}`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`resumeSuspendedAutohide`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
The template of the given log message is `interceptKeyTq keycode={number} interactive={bool} keyguardActive={bool} policyFlags={hex} down {bool} canceled {bool}`.
 =================== 
`interceptKeyBeforeQueueing: key {number} , result : {number}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`animateCollapsePanels:flags={number}, force={bool}, delayed={bool}, mExpandedVisible={bool}`
 =================== 
`closeQs`
 =================== 
`cancelPeek: {bool}`
 =================== 
`{string}`
 =================== 
The template of the log message is `cancelPeek: {bool}`.
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`playSoundEffect   effectType: {number}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
`START u0 {act={string} cat={string} flg={hex} cmp={string} bnds=[{number},{number}][{number},{number}]} from uid {number} on display {number}`
 =================== 
`ActivityRecord info: ActivityInfo{71e60ba com.tencent.mobileqq.activity.SplashActivity}, euid: {number}`
 =================== 
The template of the given log message is `acquire lock={number}, flags={hex}, tag="{string}", name={string}, ws=WorkSource{number}, uid={number}, pid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Acquiring suspend blocker "{string}".`
 =================== 
`The change in focus caused us to need to do a layout begin`
 =================== 
`The change in focus caused us to need to do a layout end`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`setSystemUiVisibility vis={hex} mask={hex} oldVal={hex} newVal={hex} diff={hex} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`cancelAutohide`
 =================== 
`notifyUiVisibilityChanged:vis={hex}, SystemUiVisibility={hex}`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`Skipping, withExcluded: {bool}, tr.intent:Intent { flg=0x{hex} cmp={string} bnds=[{number},{number}][{number},{number}] }`
 =================== 
`Skipping, withExcluded: {bool}, tr.intent:Intent { act={string} flg={hex} cmp={string} (has extras) }`
 =================== 
`Skipping, withExcluded: {bool}, tr.intent:Intent { flg={hex} cmp={string} (has extras) }`
 =================== 
`Skipping, withExcluded: {bool}, tr.intent:Intent { flg={hex} cmp={component} (has extras) }`
 =================== 
The template of the given log message is: 
`Skipping, withExcluded: {bool}, tr.intent:Intent { act={string} dat={string} flg={hex} cmp={string} (has extras) }`
 =================== 
The template of the given log message is: 
`Skipping, withExcluded: {bool}, tr.intent:Intent { act=android.intent.action.VIEW dat={string} typ={string} flg={hex} cmp={string} (has extras) }`
 =================== 
The template of the given log message is `getRecentTasks: num={number},flags={number},totalTasks={number}`.
 =================== 
`getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity}`
 =================== 
The template of the given log message is `Skipping, withExcluded: {bool}, tr.intent:Intent { flg=0x{hex} cmp={component} bnds=[{number},{number}][{number},{number}] }`.
 =================== 
`Skipping, withExcluded: {bool}, tr.intent:Intent { act={string} flg={hex} cmp={string} (has extras) }`
 =================== 
`Skipping, withExcluded: {bool}, tr.intent:Intent { flg={hex} cmp={component} }`
 =================== 
`getRecentTasks: num={number},flags={number},totalTasks={number}`
 =================== 
`getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity}`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`cancelNotificationWithTag pid {number},uid ={number},tag ={string},pkg ={string},id ={number}`
 =================== 
`cancelNotification,index:{number}`
 =================== 
`cancelNotification,cancelNotificationLocked,callingUid = {number},callingPid = {number}`
 =================== 
`cancelNotificationLocked called,tell the app,reason = {number}`
 =================== 
The template of the given log message is `cancelNotificationLocked:{number}|{string}|{number}|{string}|{number}`.
 =================== 
`cancelNotificationWithTag pid {number},uid = {number},tag = {string},pkg ={string},id ={number}`
 =================== 
`cancelNotificationLocked,remove ={string}`
 =================== 
`cancelNotificationWithTag pid {number},uid ={number},tag ={string},pkg ={string},id ={number}`
 =================== 
`updateLightsLocked,mInCall ={bool},mScreenOn = {bool},ledNotification == null?{bool}`
 =================== 
`updateLightsLocked,turn off notificationLight`
 =================== 
`cancelNotification,index:{number}`
 =================== 
`cancelNotification,index:{number}`
 =================== 
`setSystemUiVisibility vis={hex} mask={hex} oldVal={hex} newVal={hex} diff={hex} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`cancelAutohide`
 =================== 
`notifyUiVisibilityChanged:vis={hex}, SystemUiVisibility={hex}`
 =================== 
`cancelNotificationWithTag pid {number},uid ={number},tag ={string},pkg ={string},id ={number}`
 =================== 
`cancelNotificationWithTag pid {number},uid ={number},tag = {string},pkg ={string},id ={number}`
 =================== 
`cancelNotification,index:{number}`
 =================== 
`cancelNotification,index:{number}`
 =================== 
`cancelNotificationWithTag pid {number},uid ={number},tag ={string},pkg ={string},id ={number}`
 =================== 
`cancelNotification,index:{number}`
 =================== 
`cancelNotificationWithTag pid {number},uid = {number},tag = {string},pkg ={string},id ={number}`
 =================== 
`cancelNotification,index:{number}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`removeNotification:{number}|{string}|{number}|{string}|{number}`
 =================== 
`updateNotificationShade: total={number}, active={number}`
 =================== 
`cancelNotificationWithTag pid {number},uid ={number},tag ={string},pkg ={string},id ={number}`
 =================== 
`cancelNotification,index:{number}`
 =================== 
`removeNotificationChildren`
 =================== 
`animateCollapsePanels:flags={number}, force={bool}, delayed={bool}, mExpandedVisible={bool}`
 =================== 
`closeQs`
 =================== 
`cancelPeek: {bool}`
 =================== 
`instantCollapse`
 =================== 
`cancelPeek: {bool}`
 =================== 
`release:lock={number}, flg={hex}, tag="{string}", name="{string}", ws=WorkSource{number}, uid={number}, pid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Releasing suspend blocker "{string}".`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`cancelNotificationWithTag pid {number},uid ={number},tag ={string},pkg ={string},id ={number}`
 =================== 
`cancelNotification,index:{number}`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
`getAllCellInfo is blocked by permission manager . callingPackage = {packageName}`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`getTasks: caller {number} does not hold {string}; limiting output`
 =================== 
`getTasks: caller {number} does not hold {string}; limiting output`
 =================== 
The template of `isMusicActive...` is `isMusicActive...`.
 =================== 
`userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`playSoundEffect   effectType: {number}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
The template of the given log message is `Animating brightness: target={number}, rate={number}`.
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
The template of the given log message is `Animating brightness: target={number}, rate={number}`.
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
The template of `getAllCellInfo is blocked by permission manager . callingPackage = com.tencent.mobileqq` is `getAllCellInfo is blocked by permission manager . callingPackage = {packageName}`.
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
The template of the given log message is `getCellLocation is blocked by permission manager uid:{number} pid:{number}`.
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
The template of the given log message is `Animating brightness: target={number}, rate={number}`.
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{bool}`
 =================== 
`getAllCellInfo is blocked by permission manager . callingPackage = {string}`
 =================== 
`userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`getRunningAppProcesses: caller {number} does not hold {string}; limiting output`
 =================== 
`getTasks: caller {number} does not hold {string}; limiting output`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`isMusicActive...`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`
 =================== 
The template of the given log message is: `ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`.
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
The template of `userActivityNoUpdateLocked: eventTime=261983733, event=2, flags=0x0, uid=1000` is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
The template of the given log message is:
`sending alarm Alarm{d764221 type {number} when {number} PendingIntent{1749923: PendingIntentRecord{9600e20 android broadcastIntent}}},repeatInterval = {number},listenerTag ={string}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Acquiring suspend blocker "{string}".`
 =================== 
`Received {string} alarm; rescheduling`
 =================== 
`scheduleTimeTickEvent triggerAtTime = {number}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`received broadcast {string}`
 =================== 
`handleTimeUpdate`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`playSoundEffect   effectType: {number}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
`Destroying surface Surface(name={string}) called by {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number}`
 =================== 
The log message provided is not delimited by backticks. Please provide the log message delimited by backticks so that I can extract the template for you.
 =================== 
`Destroying surface Surface(name={string}) called by {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number}`
 =================== 
The template of the given log message is `acquire lock={number}, flags={hex}, tag={string}, name={string}, ws={null}, uid={number}, pid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
The template of the given log message is: 
`acquire lock={number}, flags={hex}, tag="{string}", name={string}, ws={null}, uid={number}, pid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
The template of the given log message is `acquire lock={number}, flags={hex}, tag={string}, name={string}, ws={null}, uid={number}, pid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
The template of the given log message is `acquire lock={number}, flags={hex}, tag={string}, name={string}, ws={null}, uid={number}, pid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setDataSource({number}, {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`getStreamVolume  treamType: {number}`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`Destroying surface Surface(name={string}) called by {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number}`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`Destroying surface Surface(name={string}) called by {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number}`
 =================== 
`userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`playSoundEffect   effectType: {number}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
The template of the given log message is `updateIsPoweredLocked: wasPowered={bool}, mIsPowered={bool}, oldPlugType={number}, mPlugType={number}, mBatteryLevel={number}`.
 =================== 
`received broadcast {string}`
 =================== 
`ACTION_BATTERY_CHANGED AMP: {number}; Volt: {number}`
 =================== 
`updateChargingLocked: charging={bool}`
 =================== 
`onReceive, action:{string}`
 =================== 
`ACTION_BATTERY_CHANGED pluggedType: {number}`
 =================== 
`ApStaDisabledState what={number}`
 =================== 
`DefaultState what={number}`
 =================== 
`battery changed pluggedType: {number}`
 =================== 
`RefreshBatteryInfo isBatteryLow: {bool}`
 =================== 
`ChargingSpeed  Wattage: {number} ST: {number} --> {number}`
 =================== 
`handleBatteryUpdate`
 =================== 
`RefreshBatteryInfo isBatteryLow: {bool}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
The template of the given log message is `release:lock={number}, flg={hex}, tag="{string}", name="{string}", ws={null}, uid={number}, pid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
The template of the given log message is `release:lock={number}, flg={hex}, tag="{string}", name="{string}", ws={null}, uid={number}, pid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`release:lock={number}, flg={hex}, tag="{string}", name="{string}", ws={null}, uid={number}, pid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
The template of the given log message is: 
`release:lock={number}, flg={hex}, tag="{string}", name="{string}", ws={null}, uid={number}, pid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Releasing suspend blocker "{string}".`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`{string}`
 =================== 
The template of the given log message is `interceptKeyTq keycode={number} interactive={bool} keyguardActive={bool} policyFlags={hex} down {bool} canceled {bool}`.
 =================== 
`interceptKeyBeforeQueueing: key {number} , result : {number}`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`resumeSuspendedAutohide`
 =================== 
`userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
The template of the given log message is `interceptKeyTq keycode={number} interactive={bool} keyguardActive={bool} policyFlags={hex} down {bool} canceled {bool}`.
 =================== 
`interceptKeyBeforeQueueing: key {number} , result : {number}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`animateCollapsePanels:flags={number}, force={bool}, delayed={bool}, mExpandedVisible={bool}`
 =================== 
`closeQs`
 =================== 
`cancelPeek: {bool}`
 =================== 
`instantCollapse`
 =================== 
`cancelPeek: {bool}`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
The template of the log message is `acquire lock={number}, flags={hex}, tag="{string}", name={string}, ws=WorkSource{number}, uid={number}, pid={number}`.
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Acquiring suspend blocker "{string}".`
 =================== 
`setLightsOn({bool})`
 =================== 
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message delimited by backticks is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`getRunningAppProcesses: caller {number} does not hold {string}; limiting output`
 =================== 
`setLightsOn({bool})`
 =================== 
The template of the given log message is:
`setSystemUiVisibility vis={number} mask={number} oldVal={number} newVal={number} diff={number} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`Taking screenshot from Surface with crop:[{Rect}], width:[{number}], height:[{number}], minLayer:[{number}], maxLayer:[{number}], inRotation:[{bool}], rot:[{number}]`
 =================== 
`The change in focus caused us to need to do a layout begin`
 =================== 
`The change in focus caused us to need to do a layout end`
 =================== 
`setSystemUiVisibility vis={number} mask={hex} oldVal={hex} newVal={number} diff={hex} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`cancelAutohide`
 =================== 
`notifyUiVisibilityChanged:vis={hex}, SystemUiVisibility={hex}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`Skipping, withExcluded: {bool}, tr.intent:Intent { flg={hex} cmp={component} bnds=[{number},{number}][{number},{number}] }`
 =================== 
`Skipping, withExcluded: {bool}, tr.intent:Intent { act=android.intent.action.MAIN flg=0x{hex} cmp={string} (has extras) }`
 =================== 
`Skipping, withExcluded: {bool}, tr.intent:Intent { flg={hex} cmp={string} (has extras) }`
 =================== 
The template of the given log message is `Skipping, withExcluded: {bool}, tr.intent:Intent { flg={hex} cmp={string} (has extras) }`.
 =================== 
`Skipping, withExcluded: {bool}, tr.intent:Intent { act={string} dat={string} flg={hex} cmp={string} (has extras) }`
 =================== 
`Skipping, withExcluded: {bool}, tr.intent:Intent { act=android.intent.action.VIEW dat={string} typ={string} flg={hex} cmp={string} (has extras) }`
 =================== 
`getRecentTasks: num={number},flags={number},totalTasks={number}`
 =================== 
`getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity}`
 =================== 
`Skipping, withExcluded: {bool}, tr.intent:Intent { flg={hex}, cmp={component} bnds=[{number},{number}][{number},{number}] }`
 =================== 
`Skipping, withExcluded: {bool}, tr.intent:Intent { act={string} flg={hex} cmp={string} (has extras) }`
 =================== 
The template of the given log message is `Skipping, withExcluded: {bool}, tr.intent:Intent { flg={hex} cmp={string} (has extras) }`.
 =================== 
`getRecentTasks: num={number},flags={number},totalTasks={number}`
 =================== 
`getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity}`
 =================== 
`setSystemUiVisibility vis={hex} mask={hex} oldVal={hex} newVal={hex} diff={hex} fullscreenStackVis={number} dockedStackVis={number}, fullscreenStackBounds=Rect({number}, {number} - {number}, {number}), dockedStackBounds=Rect({number}, {number} - {number}, {number})`
 =================== 
`cancelAutohide`
 =================== 
`notifyUiVisibilityChanged:vis={hex}, SystemUiVisibility={hex}`
 =================== 
The template of `getRingerMode...` is `getRingerMode...`.
 =================== 
`release:lock={number}, flg={hex}, tag="{string}", name="{string}", ws=WorkSource{number}, uid={number}, pid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Releasing suspend blocker "{string}".`
 =================== 
`enqueueNotificationInternal: pkg={string} id={number} notification=Notification(pri={number} contentView={null} vibrate={array} sound={null} tick defaults={hex} flags={hex} color={hex} category={string} vis={string})`
 =================== 
`enqueueNotificationInternal: n.getKey = {number}|{string}|{number}|{null}|{number}`
 =================== 
`updateLightsLocked,mInCall ={bool},mScreenOn = {bool},ledNotification == null?{bool}`
 =================== 
`updateLightsLocked,turn off notificationLight`
 =================== 
The template of the given log message is `addNotification key={number}|{string}|{number}|{string}|{number}`.
 =================== 
`mHeadsUpExistenceChangedRunnable`
 =================== 
The template of the given log message is `disable: < expand {ICONS*} alerts {SYSTEM_INFO*} back home recent clock navigationbar search quick_settings >`.
 =================== 
`{string}`
 =================== 
`updateNotificationShade: total={number}, active={number}`
 =================== 
`removeNotificationChildren`
 =================== 
`updateNotificationShade: total={number}, active={number}`
 =================== 
`removeNotificationChildren`
 =================== 
The template of the given log message is `Marking notification as seen {number}|{string}|{number}|{null}|{number}`.
 =================== 
`getTasks: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`getTasks: caller {number} does not hold {string}; limiting output`
 =================== 
`onNotificationExpansionChanged called`
 =================== 
`Destroying surface Surface(name={string}) called by {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number} {string}.{string}:{number}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`getRunningAppProcesses: caller {number} does not hold {string}; limiting output`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`getTasks: caller {number} does not hold {string}; limiting output`
 =================== 
`getTasks: caller {number} does not hold {string}; limiting output`
 =================== 
`getTasks: caller {number} does not hold {string}; limiting output`
 =================== 
`getTasks: caller {number} does not hold {string}; limiting output`
 =================== 
`getTasks: caller {number} does not hold {string}; limiting output`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
`sending alarm Alarm{${number} type ${number} when ${number} PendingIntent{${string}: PendingIntentRecord{${string} ${string} ${string}}},repeatInterval = ${number},listenerTag =${string}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Acquiring suspend blocker "{string}".`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Releasing suspend blocker "{string}".`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Acquiring suspend blocker "{string}".`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`logNotificationVisibilityChanges runInThread start`
 =================== 
`onNotificationVisibilityChanged called`
 =================== 
`logNotificationVisibilityChanges {string} {string} {string}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`Releasing suspend blocker "{string}".`
 =================== 
`userActivityNoUpdateLocked: eventTime={number}, event={number}, flags={hex}, uid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
`onInterceptTouchEvent MotionEvent { action={string}, actionButton={number}, id[0]={number}, x[0]={number}, y[0]={number}, toolType[0]={string}, buttonState={number}, metaState={number}, flags={hex}, edgeFlags={hex}, pointerCount={number}, historySize={number}, eventTime={number}, downTime={number}, deviceId={number}, source={hex} }, mBlockTouches={bool}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`onInterceptTouchEvent MotionEvent { action={string}, actionButton={number}, id[0]={number}, x[0]={number}, y[0]={number}, toolType[0]={string}, buttonState={number}, metaState={number}, flags={hex}, edgeFlags={hex}, pointerCount={number}, historySize={number}, eventTime={number}, downTime={number}, deviceId={number}, source={hex} }, mBlockTouches={bool}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`playSoundEffect   effectType: {number}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
`updateNotificationShade: total={number}, active={number}`
 =================== 
`removeNotificationChildren`
 =================== 
The template of the given log message is `animateCollapsePanels:flags={number}, force={bool}, delayed={bool}, mExpandedVisible={bool}`.
 =================== 
`closeQs`
 =================== 
`cancelPeek: {bool}`
 =================== 
`instantCollapse`
 =================== 
`cancelPeek: {bool}`
 =================== 
`updateNotificationShade: total={number}, active={number}`
 =================== 
`removeNotificationChildren`
 =================== 
`logNotificationVisibilityChanges runInThread start`
 =================== 
`onNotificationVisibilityChanged called`
 =================== 
`logNotificationVisibilityChanges {string} {bool} {string}`
 =================== 
`START u0 {flg={hex} cmp={component} (has extras)} from uid {number} on display {number}`
 =================== 
`ActivityRecord info: ActivityInfo{${string} ${string}}, euid: ${number}`
 =================== 
`overlapAmount:{number}, previousNotificationEnd:{number}, newYTranslation:{number}, location:{number}, i:{number}, getTopPadding:{number}, getLocationOnScreen():{number}`
 =================== 
`state.clipTopAmount:{number}, i:{number}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`makeExpandedInvisible: mExpandedVisible={bool}`
 =================== 
`closeQs`
 =================== 
`cancelPeek: {bool}`
 =================== 
`{string}`
 =================== 
`cancelPeek: {bool}`
 =================== 
`updateNotificationShade: total={number}, active={number}`
 =================== 
`removeNotificationChildren`
 =================== 
`closeQs`
 =================== 
The template of the given log message is: `startActivity called from {string}; forcing Intent.FLAG_ACTIVITY_NEW_TASK for: Intent { flg={hex} cmp={string} (has extras) }`
 =================== 
`resumeSuspendedAutohide`
 =================== 
The template of the given log message is `disable: < {string} >`.
 =================== 
`overlapAmount:{number}, previousNotificationEnd:{number}, newYTranslation:{number}, location:{number}, i:{number}, getTopPadding:{number}, getLocationOnScreen():{number}`
 =================== 
`state.clipTopAmount:{number}, i:{number}`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`makeExpandedInvisible: mExpandedVisible={bool}`
 =================== 
`acquire lock={number}, flags={hex}, tag="{string}", name={string}, ws=WorkSource{number}, uid={number}, pid={number}`
 =================== 
`ready={bool},policy={number},wakefulness={number},wksummary={hex},uasummary={hex},bootcompleted={bool},boostinprogress={bool},waitmodeenable={bool},mode={bool},manual={number},auto={number},adj={number}userId={number}`
 =================== 
The template of the given log message is `Acquiring suspend blocker "{string}".`
 =================== 
`onNotificationClick called`
 =================== 
`cancelNotification,index:{number}`
 =================== 
`applyOptionsLocked: Unknown animationType={number}`
 =================== 
`getRunningAppProcesses: caller {number} does not hold REAL_GET_TASKS; limiting output`
 =================== 
The template of the given log message is `Skipping, withExcluded: {bool}, tr.intent:Intent { flg={hex} cmp={component} bnds=[{number},{number}][{number},{number}] }`.
 =================== 
`Skipping, withExcluded: {bool}, tr.intent:Intent { act={string} flg={hex} cmp={string} (has extras) }`
 =================== 
The template of the given log message is `Skipping, withExcluded: {bool}, tr.intent:Intent { flg={hex} cmp={string} (has extras) }`.
 =================== 
The template of the given log message is: 
`Skipping, withExcluded: {bool}, tr.intent:Intent { flg={hex} cmp={component} (has extras) }`
 =================== 
`Skipping, withExcluded: {bool}, tr.intent:Intent { act=com.android.contacts.action.CHOOSE_SUB dat=tel:xxxxxxxxxxx flg=0x10808000 cmp=com.android.contacts/.ChooseSubActivity (has extras) }`
 =================== 
The template of the given log message is:
`Skipping, withExcluded: {bool}, tr.intent:Intent { act=android.intent.action.VIEW dat={string} typ={string} flg={hex} cmp={string} (has extras) }`
 =================== 
`getRecentTasks: num={number},flags={number},totalTasks={number}`
 =================== 
`getRecentTasks: topActivity=ComponentInfo{com.tencent.mm/com.tencent.mm.ui.LauncherUI}`
 =================== 
The template of the given log message is `Skipping, withExcluded: {bool}, tr.intent:Intent { flg=0x{hex} cmp={component} bnds=[{number},{number}][{number},{number}] }`.
 =================== 
`Skipping, withExcluded: {bool}, tr.intent:Intent { act=android.intent.action.MAIN flg={hex} cmp={component} (has extras) }`
 =================== 
The template of the given log message is: 
`Skipping, withExcluded: {bool}, tr.intent:Intent { flg={hex} cmp={string} (has extras) }`
 =================== 
`getRecentTasks: num={number},flags={number},totalTasks={number}`
 =================== 
`getRecentTasks: topActivity=ComponentInfo{com.tencent.mm/com.tencent.mm.ui.LauncherUI}`
 =================== 
`mHeadsUpExistenceChangedRunnable`
 =================== 
`updateClipping isOverlap:{bool}, getTopPadding={number}, Translation={number}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{bool}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
`HBM brightnessIn ={number}`
 =================== 
`HBM brightnessOut ={number}`
 =================== 
`Animating brightness: target={number}, rate={number}`
 =================== 
