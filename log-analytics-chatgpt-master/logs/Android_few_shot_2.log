`printFreezingDisplayLogsopening app wtoken = AppWindowToken{9f4ef63 token=Token{a64f992 ActivityRecord{de9231d u0 com.tencent.qt.qtl/.activity.info.NewsDetailXmlActivity t761}}}, allDrawn= {allDrawn}, startingDisplayed =  {startingDisplayed}, startingMoved =  {startingMoved}, isRelaunching =  {isRelaunching}`
 =================== 
`acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`Skipping AppWindowToken{token={token} ActivityRecord{activityRecord} -- going to hide`
 =================== 
The template of `visible is system.time.showampm` is `visible is system.time.showampm`.
 =================== 
`mVisiblity.getValue is false`
 =================== 
The template of `visible is system.charge.show` is `visible is system.charge.show`.
 =================== 
`mVisiblity.getValue is false`
 =================== 
`visible is system.call.count gt 0`
 =================== 
The template of `mVisiblity.getValue is false` is `mVisiblity.getValue is false`.
 =================== 
`visible is system.message.count gt 0`
 =================== 
`mVisiblity.getValue is {value}`
 =================== 
The template of `visible is system.ownerinfo.show` is `visible is system.ownerinfo.show`.
 =================== 
The template of `mVisiblity.getValue is false` is `mVisiblity.getValue is false`.
 =================== 
`release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`Skipping AppWindowToken{token={token} ActivityRecord{activityRecord} -- going to hide`
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
`updateDimmedActivatedHideSensitive overlap={overlap}`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws=WorkSource{ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`cancelAutohide`
 =================== 
`notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`
 =================== 
`Destroying surface Surface(name={name}) called by {caller} {bottomOfCallStack}`
 =================== 
`Destroying surface Surface(name={surfaceName}) called by {caller}`
 =================== 
`release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws=WorkSource{ws}, uid={uid}, pid={pid}`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`orientation change is complete, call stopFreezingDisplayLocked`
 =================== 
The template of the given log message is `Screen frozen for +{time} due to Window{windowId}`.
 =================== 
`startAnimation begin`
 =================== 
`startAnimation end`
 =================== 
`release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of the given log message is `remove(PendingIntent{19abed0: PendingIntentRecord{a485420 {packageName} {action} {extras}}}) changed bounds; {additionalInfo}`.
 =================== 
`rotationForOrientationLw(orient={orient}, last={last}); user={user} USER_ROTATION_LOCKED`
 =================== 
`Application requested orientation {orientation}, got rotation {rotation} which has compatible metrics`
 =================== 
`acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
`getNeighboringCellInfo calling app is {callingApp}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
`release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `Releasing suspend blocker "PowerManagerService.WakeLocks".` is `Releasing suspend blocker "PowerManagerService.WakeLocks"`.
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`suspendAutohide`
 =================== 
`interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}`
 =================== 
`interceptKeyBeforeQueueing: key {key} , result : {result}`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`resumeSuspendedAutohide`
 =================== 
The template of the given log message is `interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}`.
 =================== 
`interceptKeyBeforeQueueing: key {key} , result : {result}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
`acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws=WorkSource{10113}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `Acquiring suspend blocker "PowerManagerService.WakeLocks".` is `Acquiring suspend blocker "PowerManagerService.WakeLocks"`.
 =================== 
The template of the given log message is `Skipping AppWindowToken{9f4ef63 token=Token{a64f992 ActivityRecord{de9231d u0 com.tencent.qt.qtl/.activity.info.NewsDetailXmlActivity t761}}} -- going to hide`.
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`cancelAutohide`
 =================== 
`notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`
 =================== 
The template of `Bad activity token: android.os.BinderProxy@2bd79ce` is `Bad activity token: android.os.BinderProxy@{token}`.
 =================== 
`java.lang.ClassCastException: android.os.BinderProxy cannot be cast to com.android.server.am.ActivityRecord$Token`
 =================== 
`Skipping AppWindowToken{9f4ef63 token=Token{a64f992 ActivityRecord{de9231d u0 com.tencent.qt.qtl/.activity.info.NewsDetailXmlActivity t761}}} -- going to hide`
 =================== 
`release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws=WorkSource{ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`Releasing suspend blocker "{blockerName}".`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`cancelAutohide`
 =================== 
`notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`suspendAutohide`
 =================== 
`suspendAutohide`
 =================== 
`onTouchEvent::{action}, x={x}, y={y}`
 =================== 
`schedulePeek`
 =================== 
`getRingtonePlayer...`
 =================== 
The template of the given log message is `disable: < expand {ICONS*} alerts {SYSTEM_INFO*} back home recent clock navigationbar search quick_settings >`.
 =================== 
`suspendAutohide`
 =================== 
`updateLightsLocked,mInCall ={mInCall},mScreenOn = {mScreenOn},ledNotification == null?{ledNotification}`
 =================== 
The template of `updateLightsLocked,turn off notificationLight` is `updateLightsLocked,turn off notificationLight`.
 =================== 
`getRingtonePlayer...`
 =================== 
`updateLightsLocked,mInCall ={mInCall},mScreenOn = {mScreenOn},ledNotification == null?{ledNotification}`
 =================== 
`updateLightsLocked,turn off notificationLight`
 =================== 
`overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}`
 =================== 
`state.clipTopAmount:{clipTopAmount}, i:{i}`
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{overlap}`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`
 =================== 
`suspendAutohide`
 =================== 
`onExpandingStarted`
 =================== 
`suspendAutohide`
 =================== 
`onTrackingStarted`
 =================== 
`Destroying surface Surface(name={surfaceName}) called by {caller}`
 =================== 
`suspendAutohide`
 =================== 
`overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}`
 =================== 
`state.clipTopAmount:{clipTopAmount}, i:{i}`
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
`updateDimmedActivatedHideSensitive overlap={overlap}`
 =================== 
`suspendAutohide`
 =================== 
`overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen()}`
 =================== 
The template of `state.clipTopAmount:103, i:0` is `state.clipTopAmount:{clipTopAmount}, i:{i}`.
 =================== 
`updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
The template of `updateDimmedActivatedHideSensitive overlap:true` is `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
`suspendAutohide`
 =================== 
`overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}`
 =================== 
The template of `state.clipTopAmount:69, i:0` is `state.clipTopAmount:{clipTopAmount}, i:{i}`.
 =================== 
`updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
`updateDimmedActivatedHideSensitive overlap={overlap}`
 =================== 
`suspendAutohide`
 =================== 
`overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}`
 =================== 
`state.clipTopAmount:{clipTopAmount}, i:{i}`
 =================== 
`updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
`updateDimmedActivatedHideSensitive overlap={overlap}`
 =================== 
`suspendAutohide`
 =================== 
`overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}`
 =================== 
`state.clipTopAmount:{clipTopAmount}, i:{i}`
 =================== 
`updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
The template of `updateDimmedActivatedHideSensitive overlap:true` is `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
`suspendAutohide`
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
`updateDimmedActivatedHideSensitive overlap={overlap}`
 =================== 
`suspendAutohide`
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
The template of `updateDimmedActivatedHideSensitive overlap:false` is `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
`suspendAutohide`
 =================== 
`suspendAutohide`
 =================== 
`onTouchEvent::{action}, x={x}, y={y}`
 =================== 
`cancelPeek: {cancelPeek}`
 =================== 
`flingToHeight: vel={vel}, expand={expand}, target={target}, collapseSpeedUpFactor={collapseSpeedUpFactor}, expandBecauseOfFalsing={expandBecauseOfFalsing}`
 =================== 
`onTrackingStopped: {value}`
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
`updateDimmedActivatedHideSensitive overlap={overlap}`
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
`updateDimmedActivatedHideSensitive overlap={overlap}`
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
`updateDimmedActivatedHideSensitive overlap={overlap}`
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{overlap}`
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
The template of `updateDimmedActivatedHideSensitive overlap:false` is `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
The template of `updateClipping isOverlap:false, getTopPadding=333.0, Translation=-90.0` is `updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
The template of `updateDimmedActivatedHideSensitive overlap:false` is `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
`updateDimmedActivatedHideSensitive overlap={overlap}`
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
`updateDimmedActivatedHideSensitive overlap={overlap}`
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{overlap}`
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
`updateDimmedActivatedHideSensitive overlap={overlap}`
 =================== 
The template of the log message is `updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
`updateDimmedActivatedHideSensitive overlap:{overlap}`
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
The template of `updateDimmedActivatedHideSensitive overlap:false` is `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{overlap}`
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
The template of `updateDimmedActivatedHideSensitive overlap:false` is `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
The template of the log message is `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
`updateDimmedActivatedHideSensitive overlap:{overlap}`
 =================== 
`onExpandingFinished`
 =================== 
The template of `updateClipping isOverlap:false, getTopPadding=333.0, Translation=0.0` is `updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
`updateDimmedActivatedHideSensitive overlap={overlap}`
 =================== 
The template of the given log message is `Sending non-protected broadcast {action} from system {systemId}:{senderPackage}`.
 =================== 
`logNotificationVisibilityChanges runInThread start`
 =================== 
`onNotificationVisibilityChanged called`
 =================== 
`logNotificationVisibilityChanges runInThread over`
 =================== 
The template of the given log message is `isSimPinSecure mSimDatas is {null or empty}`.
 =================== 
`registerCallback not in UI.`
 =================== 
The template of `android.util.AndroidRuntimeException: Must execute in UI` is `android.util.AndroidRuntimeException: Must execute in UI`.
 =================== 
`*** register callback for {component}`
 =================== 
`registerCallback not in UI.`
 =================== 
`android.util.AndroidRuntimeException: Must execute in UI`
 =================== 
The template of `*** unregister callback for null` is `*** unregister callback for null`.
 =================== 
`[PhoneIntfMgr] getDataEnabled: subId={subId} phoneId={phoneId}`
 =================== 
`[PhoneIntfMgr] getDataEnabled: subId={subId} retVal={retVal}`
 =================== 
The template of the given log message is `userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`.
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`onInterceptTouchEvent MotionEvent { action={action}, actionButton={actionButton}, id[0]={id[0]}, x[0]={x[0]}, y[0]={y[0]}, toolType[0]={toolType[0]}, buttonState={buttonState}, metaState={metaState}, flags={flags}, edgeFlags={edgeFlags}, pointerCount={pointerCount}, historySize={historySize}, eventTime={eventTime}, downTime={downTime}, deviceId={deviceId}, source={source} }, mBlockTouches={mBlockTouches}`
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{overlap}`
 =================== 
`onInterceptTouchEvent MotionEvent { action={action}, actionButton={actionButton}, id[0]={id[0]}, x[0]={x[0]}, y[0]={y[0]}, toolType[0]={toolType[0]}, buttonState={buttonState}, metaState={metaState}, flags={flags}, edgeFlags={edgeFlags}, pointerCount={pointerCount}, historySize={historySize}, eventTime={eventTime}, downTime={downTime}, deviceId={deviceId}, source={source} }, mBlockTouches={mBlockTouches}`
 =================== 
`playSoundEffect   effectType: {effectType}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
`animateCollapsePanels:flags={flags}, force={force}, delayed={delayed}, mExpandedVisible={mExpandedVisible}`
 =================== 
`onExpandingStarted`
 =================== 
`logNotificationVisibilityChanges runInThread start`
 =================== 
`onNotificationVisibilityChanged called`
 =================== 
`logNotificationVisibilityChanges runInThread over`
 =================== 
`START u0 {act={act} flg={flg} cmp={cmp} (has extras)} from uid {uid} on display {display}`
 =================== 
`ActivityRecord info: ActivityInfo{info}, euid: euid`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`
 =================== 
`acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws=WorkSource{ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `Acquiring suspend blocker "PowerManagerService.WakeLocks".` is `Acquiring suspend blocker "PowerManagerService.WakeLocks"`.
 =================== 
`onNotificationClick called`
 =================== 
`cancelNotification,index:{index}`
 =================== 
`cancelNotification,cancelNotificationLocked,callingUid = {callingUid},callingPid = {callingPid}`
 =================== 
`cancelNotificationLocked called,tell the app,reason = {reason}`
 =================== 
`cancelNotificationLocked:{0}|{packageName}|{id}|{tag}|{userId}`
 =================== 
The template of `cancelNotificationLocked,remove =com.tencent.mobileqq` is `cancelNotificationLocked,remove ={remove}`.
 =================== 
`applyOptionsLocked: Unknown animationType={animationType}`
 =================== 
`cancelPeek: {boolean}`
 =================== 
`flingToHeight: vel={vel}, expand={expand}, target={target}, collapseSpeedUpFactor={collapseSpeedUpFactor}, expandBecauseOfFalsing={expandBecauseOfFalsing}`
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
`updateDimmedActivatedHideSensitive overlap={overlap}`
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
The template of `updateDimmedActivatedHideSensitive overlap:false` is `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
`updateDimmedActivatedHideSensitive overlap={overlap}`
 =================== 
`Taking screenshot from Surface with crop:[{crop}], width:[{width}], height:[{height}], minLayer:[{minLayer}], maxLayer:[{maxLayer}], inRotation:[{inRotation}], rot:[{rot}]`
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
`updateDimmedActivatedHideSensitive overlap={overlap}`
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{overlap}`
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
`updateDimmedActivatedHideSensitive overlap={overlap}`
 =================== 
`updateLightsLocked,mInCall ={mInCall},mScreenOn = {mScreenOn},ledNotification == null?{ledNotification}`
 =================== 
The template of `updateLightsLocked,turn off notificationLight` is `updateLightsLocked,turn off notificationLight`.
 =================== 
The template of `updateClipping isOverlap:false, getTopPadding=333.0, Translation=-178.0` is `updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
The template of `updateDimmedActivatedHideSensitive overlap:false` is `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{overlap}`
 =================== 
The template of `updateClipping isOverlap:false, getTopPadding=333.0, Translation=-270.0` is `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
The template of `updateDimmedActivatedHideSensitive overlap:false` is `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
The template of `removeNotification:0|com.tencent.mobileqq|121|null|10111` is `removeNotification:{0}|{packageName}|{notificationId}|{tag}|{userId}`.
 =================== 
The template of `updateNotificationShade: total=0, active=0` is `updateNotificationShade: total={total}, active={active}`.
 =================== 
`animateCollapsePanels:flags={flags}, force={force}, delayed={delayed}, mExpandedVisible={mExpandedVisible}`
 =================== 
The template of the given log message is `updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
`updateDimmedActivatedHideSensitive overlap:{overlap}`
 =================== 
The template of `The change in focus caused us to need to do a layout begin` is `The change in focus caused us to need to do a layout begin`.
 =================== 
`The change in focus caused us to need to do a layout end`
 =================== 
`overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen()}`
 =================== 
The template of `state.clipTopAmount:79, i:0` is `state.clipTopAmount:{clipTopAmount}, i:{i}`.
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{overlap}`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`cancelAutohide`
 =================== 
`notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen()}`
 =================== 
The template of `state.clipTopAmount:138, i:0` is `state.clipTopAmount:{clipTopAmount}, i:{i}`.
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
`updateDimmedActivatedHideSensitive overlap={overlap}`
 =================== 
`overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}`
 =================== 
The template of the log message is `state.clipTopAmount:{clipTopAmount}, i:{i}`.
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{overlap}`
 =================== 
The template of `updateNotificationShade: total=0, active=0` is `updateNotificationShade: total={total}, active={active}`.
 =================== 
`removeNotificationChildren`
 =================== 
`onExpandingFinished`
 =================== 
`updateNotificationShade: total={total}, active={active}`
 =================== 
`removeNotificationChildren`
 =================== 
`Sending non-protected broadcast {action} from system {uid}:{pkg}`
 =================== 
The template of the log message is `updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
The template of `updateDimmedActivatedHideSensitive overlap:false` is `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} bnds=[{bnds}] }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={act} flg={flg} cmp={cmp} (has extras) }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} (has extras) }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} (has extras) }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={act} dat={dat} flg={flg} cmp={cmp} (has extras) }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={act} dat={dat} typ={typ} flg={flg} cmp={cmp} (has extras) }`
 =================== 
`getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}`
 =================== 
`getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} bnds=[{bnds}] }`
 =================== 
The template of the given log message is:
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={act} flg={flg} cmp={cmp} (has extras) }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} (has extras) }`
 =================== 
`getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}`
 =================== 
`getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity}`
 =================== 
`cancelNotificationWithTag pid {pid},uid ={uid},tag ={tag},pkg ={pkg},id ={id}`
 =================== 
`cancelNotification,index:{index}`
 =================== 
`cancelNotificationWithTag pid {pid},uid ={uid},tag ={tag},pkg ={pkg},id ={id}`
 =================== 
`cancelNotification,index:{index}`
 =================== 
`cancelNotificationWithTag pid {pid},uid ={uid},tag ={tag},pkg ={pkg},id ={id}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`cancelAutohide`
 =================== 
`notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`
 =================== 
`makeExpandedInvisible: mExpandedVisible={mExpandedVisible}`
 =================== 
`closeQs`
 =================== 
`cancelPeek: {cancelPeek}`
 =================== 
`instantCollapse`
 =================== 
`cancelPeek: {cancelPeek}`
 =================== 
`closeQs`
 =================== 
`resumeSuspendedAutohide`
 =================== 
The template of the given log message is `disable: < {options} >`.
 =================== 
`cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}`
 =================== 
`cancelNotification,index:{index}`
 =================== 
`cancelNotification,index:{index}`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws=WorkSource{ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`cancelNotificationWithTag pid {pid},uid ={uid},tag ={tag},pkg ={pkg},id ={id}`
 =================== 
`cancelNotification,index:{index}`
 =================== 
`cancelNotificationWithTag pid {pid},uid ={uid},tag ={tag},pkg ={pkg},id ={id}`
 =================== 
`cancelNotificationWithTag pid {pid},uid ={uid},tag ={tag},pkg ={pkg},id ={id}`
 =================== 
`cancelNotificationWithTag pid {pid},uid ={uid},tag ={tag},pkg ={pkg},id ={id}`
 =================== 
`cancelNotification,index:{index}`
 =================== 
`cancelNotification,index:{index}`
 =================== 
`cancelNotification,index:{index}`
 =================== 
The template of the log message is `cancelNotificationWithTag pid {pid},uid ={uid},tag ={tag},pkg ={pkg},id ={id}`.
 =================== 
`cancelNotification,index:{index}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`Releasing suspend blocker "{blockerName}".`
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
The template of `updateDimmedActivatedHideSensitive overlap:false` is `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`registerCallback not in UI.`
 =================== 
The template of `android.util.AndroidRuntimeException: Must execute in UI` is `android.util.AndroidRuntimeException: Must execute in UI`.
 =================== 
`*** unregister callback for {component}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`Destroying surface Surface(name={surfaceName}) called by {caller}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`isMusicActive...`
 =================== 
`isMusicActive...`
 =================== 
The template of `Start dump, calling from : pid=12782, uid=1000` is `Start dump, calling from : pid={pid}, uid={uid}`.
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of the log message is `Acquiring suspend blocker "{blocker}".`
 =================== 
`setWiredDeviceConnectionState  type: {type}  state: {state}`
 =================== 
`acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`setWiredDeviceConnectionState  type: {type}  state: {state}`
 =================== 
`release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`isMusicActive...`
 =================== 
`ActivityManagerService,attachApplication,callingPid = {callingPid}`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`isBluetoothA2dpOn...`
 =================== 
`isMusicActive...`
 =================== 
`isBluetoothScoOn...`
 =================== 
The template of `getLastAudibleStreamVolume  treamType: 0` is `getLastAudibleStreamVolume  treamType: {streamType}`.
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`cancelNotification,index:{index}`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getLastAudibleStreamVolume  treamType: {streamType}`
 =================== 
`getLastAudibleStreamVolume  treamType: {streamType}`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`getDevicesForStream  streamType: {streamType}`
 =================== 
The template of `getLastAudibleStreamVolume  treamType: 3` is `getLastAudibleStreamVolume  treamType: {streamType}`.
 =================== 
`getDevicesForStream  streamType: {streamType}`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getLastAudibleStreamVolume  treamType: {streamType}`
 =================== 
`getLastAudibleStreamVolume  treamType: {streamType}`
 =================== 
`getLastAudibleStreamVolume  treamType: {streamType}`
 =================== 
`getLastAudibleStreamVolume  treamType: {streamType}`
 =================== 
`getLastAudibleStreamVolume  treamType: {streamType}`
 =================== 
`cleanUpApplicationRecord -- {recordId}`
 =================== 
`cleanUpApplicationRecordLocked, pid: {pid}, restart: {restart}`
 =================== 
`cleanUpApplicationRecordLocked, reset pid: {pid}, euid: {euid}`
 =================== 
`stopWifiDisplayScanLocked record.mWifiDisplayScanRequested={mWifiDisplayScanRequested}`
 =================== 
`stopWifiDisplayScanLocked mWifiDisplayScanRequestCount={mWifiDisplayScanRequestCount}`
 =================== 
`getMode...`
 =================== 
`setSpeakerphoneOn  on: {on}`
 =================== 
`setSpeakerphoneOn on:{on}`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `Releasing suspend blocker "PowerManagerService.WakeLocks".` is `Releasing suspend blocker "{blocker}".`
 =================== 
`sending alarm Alarm{aa90550 type 3 when 509142332 PendingIntent{1749923: PendingIntentRecord{9600e20 android broadcastIntent}}},repeatInterval = {repeatInterval},listenerTag ={listenerTag}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`Acquiring suspend blocker "{blockerName}".`
 =================== 
`Received TIME_TICK alarm; rescheduling`
 =================== 
`scheduleTimeTickEvent triggerAtTime = {triggerAtTime}`
 =================== 
The template of the log message is `updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
`updateDimmedActivatedHideSensitive overlap={overlap}`
 =================== 
The template of the log message is `updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
The template of `updateDimmedActivatedHideSensitive overlap:false` is `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
`received broadcast {action}`
 =================== 
`handleTimeUpdate`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn({boolean})`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn({boolean})`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`playSoundEffect   effectType: {effectType}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`Destroying surface Surface(name={name}) called by {caller}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`Destroying surface Surface(name={name}) called by {caller}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`setLightsOn({boolean})`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`Destroying surface Surface(name={name}) called by {caller}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`Destroying surface Surface(name={name}) called by {caller}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn({boolean})`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `Acquiring suspend blocker "PowerManagerService.WakeLocks".` is `Acquiring suspend blocker "{blocker}".`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
`getNeighboringCellInfo calling app is {app}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`setLightsOn({boolean})`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `Releasing suspend blocker "PowerManagerService.WakeLocks".` is `Releasing suspend blocker "{blocker}".`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `Acquiring suspend blocker "PowerManagerService.WakeLocks".` is `Acquiring suspend blocker "{blocker}".`
 =================== 
`setLightsOn({param})`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `Releasing suspend blocker "PowerManagerService.WakeLocks".` is `Releasing suspend blocker "PowerManagerService.WakeLocks"`.
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `Releasing suspend blocker "PowerManagerService.WakeLocks".` is `Releasing suspend blocker "{blocker}".`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`setLightsOn({boolean})`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`Destroying surface Surface(name={name}) called by {caller}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`Destroying surface Surface(name={name}) called by {caller}`
 =================== 
`setLightsOn({boolean})`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn({boolean})`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`isMusicActive...`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn({boolean})`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`playSoundEffect   effectType: {effectType}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
`Destroying surface Surface(name={name}) called by {caller}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`Destroying surface Surface(name={name}) called by {caller}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn({boolean})`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`isMusicActive...`
 =================== 
`sending alarm Alarm{19069ff type {type} when {when} PendingIntent{50303cc: PendingIntentRecord{e204f60 com.android.phone broadcastIntent}}},repeatInterval = {repeatInterval},listenerTag ={listenerTag}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`Acquiring suspend blocker "{blocker}".`
 =================== 
`Killing {pid}:{processName}/{userId} (adj {adj}): empty for {duration}s`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `Releasing suspend blocker "PowerManagerService.WakeLocks".` is `Releasing suspend blocker "{blockerName}".`
 =================== 
`stopWifiDisplayScanLocked record.mWifiDisplayScanRequested={mWifiDisplayScanRequested}`
 =================== 
`stopWifiDisplayScanLocked mWifiDisplayScanRequestCount={mWifiDisplayScanRequestCount}`
 =================== 
`cleanUpApplicationRecord -- {pid}`
 =================== 
`cleanUpApplicationRecordLocked, pid: {pid}, restart: {restart}`
 =================== 
`cleanUpApplicationRecordLocked, reset pid: {pid}, euid: {euid}`
 =================== 
`stopWifiDisplayScanLocked record.mWifiDisplayScanRequested={boolean}`
 =================== 
`stopWifiDisplayScanLocked mWifiDisplayScanRequestCount={mWifiDisplayScanRequestCount}`
 =================== 
`cleanUpApplicationRecord -- {appId}`
 =================== 
`cleanUpApplicationRecordLocked, pid: {pid}, restart: {restart}`
 =================== 
`cleanUpApplicationRecordLocked, reset pid: {pid}, euid: {euid}`
 =================== 
`stopWifiDisplayScanLocked record.mWifiDisplayScanRequested={requested}`
 =================== 
`stopWifiDisplayScanLocked mWifiDisplayScanRequestCount={mWifiDisplayScanRequestCount}`
 =================== 
`cleanUpApplicationRecord -- {value}`
 =================== 
`cleanUpApplicationRecordLocked, pid: {pid}, restart: {restart}`
 =================== 
`cleanUpApplicationRecordLocked, reset pid: {pid}, euid: {euid}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
The template of `Animating brightness: target=38, rate=200` is `Animating brightness: target={target}, rate={rate}`.
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
The template of `Animating brightness: target=38, rate=200` is `Animating brightness: target={target}, rate={rate}`.
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
The template of `Animating brightness: target=38, rate=200` is `Animating brightness: target={target}, rate={rate}`.
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
The template of `Animating brightness: target=38, rate=200` is `Animating brightness: target={target}, rate={rate}`.
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`isMusicActive...`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`isMusicActive...`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `Releasing suspend blocker "PowerManagerService.WakeLocks".` is `Releasing suspend blocker "PowerManagerService.WakeLocks"`.
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`sending alarm Alarm{c1705d3 type 3 when 509202333 PendingIntent{1749923: PendingIntentRecord{9600e20 android broadcastIntent}}},repeatInterval = {repeatInterval},listenerTag ={listenerTag}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `Acquiring suspend blocker "PowerManagerService.WakeLocks".` is `Acquiring suspend blocker "{blocker}".`
 =================== 
`Received TIME_TICK alarm; rescheduling`
 =================== 
`scheduleTimeTickEvent triggerAtTime = {triggerAtTime}`
 =================== 
The template of the log message is `updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
`updateDimmedActivatedHideSensitive overlap:{overlap}`
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{overlap}`
 =================== 
`received broadcast {action}`
 =================== 
`handleTimeUpdate`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `Releasing suspend blocker "PowerManagerService.WakeLocks".` is `Releasing suspend blocker "PowerManagerService.WakeLocks"`.
 =================== 
`acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
The template of `remove(PendingIntent{e4e2534: PendingIntentRecord{e204f60 com.android.phone broadcastIntent}}) changed bounds; rebatching` is `remove(PendingIntent{...}) changed bounds; rebatching`.
 =================== 
`release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `Releasing suspend blocker "PowerManagerService.WakeLocks".` is `Releasing suspend blocker "PowerManagerService.WakeLocks"`.
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of the log message is `Acquiring suspend blocker "{blocker}".`
 =================== 
`acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
`release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`Releasing suspend blocker "{blockerName}".`
 =================== 
`getNeighboringCellInfo calling app is com.amap.android.ams`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`Acquiring suspend blocker "{blocker}".`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`Releasing suspend blocker "{blockerName}".`
 =================== 
The template of `shouldBlockLocation running ...` is `shouldBlockLocation running ...`.
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of the log message is `Acquiring suspend blocker "{blocker}".`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `Releasing suspend blocker "PowerManagerService.WakeLocks".` is `Releasing suspend blocker "PowerManagerService.WakeLocks"`.
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of the log message is `Acquiring suspend blocker "{blocker}".`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `Releasing suspend blocker "PowerManagerService.WakeLocks".` is `Releasing suspend blocker "PowerManagerService.WakeLocks"`.
 =================== 
The template of `shouldBlockLocation running ...` is `shouldBlockLocation running ...`.
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`Unable to start service Intent { act={action} cmp={component} U={user}: {reason}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of the log message is `Acquiring suspend blocker "{blocker}".`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `Releasing suspend blocker "PowerManagerService.WakeLocks".` is `Releasing suspend blocker "PowerManagerService.WakeLocks"`.
 =================== 
`acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of the given log message is `Acquiring suspend blocker "{blocker}".`
 =================== 
`release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `Releasing suspend blocker "PowerManagerService.WakeLocks".` is `Releasing suspend blocker "PowerManagerService.WakeLocks"`.
 =================== 
`acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `Acquiring suspend blocker "PowerManagerService.WakeLocks".` is `Acquiring suspend blocker "{blocker}".`
 =================== 
`acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
The template of `shouldBlockLocation running ...` is `shouldBlockLocation running ...`.
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
`getNeighboringCellInfo calling app is {app}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `Releasing suspend blocker "PowerManagerService.WakeLocks".` is `Releasing suspend blocker "PowerManagerService.WakeLocks"`.
 =================== 
The template of `shouldBlockLocation running ...` is `shouldBlockLocation running ...`.
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of the log message is `Acquiring suspend blocker "{blocker}".`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`Releasing suspend blocker "{blockerName}".`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `Acquiring suspend blocker "PowerManagerService.WakeLocks".` is `Acquiring suspend blocker "PowerManagerService.WakeLocks"`.
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`Releasing suspend blocker "{blockerName}".`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of the log message is `Acquiring suspend blocker "{blocker}".`
 =================== 
`acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `shouldBlockLocation running ...` is `shouldBlockLocation running ...`.
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
`release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`Releasing suspend blocker "{blockerName}".`
 =================== 
`getNeighboringCellInfo calling app is {callingApp}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `Acquiring suspend blocker "PowerManagerService.WakeLocks".` is `Acquiring suspend blocker "PowerManagerService.WakeLocks"`.
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `Releasing suspend blocker "PowerManagerService.WakeLocks".` is `Releasing suspend blocker "{blocker}".`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`unregisterAudioFocusListener...`
 =================== 
`abandonAudioFocus`
 =================== 
`[HSM] stayAwake {stayAwake} uid: {uid}, pid: {pid}`
 =================== 
`Pid:{pid} {message}`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`stopWifiDisplayScanLocked record.mWifiDisplayScanRequested={boolean}`
 =================== 
`stopWifiDisplayScanLocked mWifiDisplayScanRequestCount={mWifiDisplayScanRequestCount}`
 =================== 
`Process {processName} (pid {pid}) has died`
 =================== 
`cleanUpApplicationRecord -- {value}`
 =================== 
`Scheduling restart of crashed service {service} in {time}ms`
 =================== 
`cleanUpApplicationRecordLocked, pid: {pid}, restart: {restart}`
 =================== 
`cleanUpApplicationRecordLocked, reset pid: {pid}, euid: {euid}`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`isMusicActive...`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`new Process app=ProcessRecord{6eaaf00 0:{packageName}/{userId}}, name: {processName}, euid: {euid}`
 =================== 
`Start proc {pid}:{processName}:{uid} for service {serviceName}`
 =================== 
`ActivityManagerService,attachApplication,callingPid = {callingPid}`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`suspendAutohide`
 =================== 
`interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}`
 =================== 
`interceptKeyBeforeQueueing: key {key} , result : {result}`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`Destroying surface Surface(name={name}) called by {caller}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`resumeSuspendedAutohide`
 =================== 
The template of the given log message is `interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}`.
 =================== 
`interceptKeyBeforeQueueing: key {key} , result : {result}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn({boolean})`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`Destroying surface Surface(name={name}) called by {caller}`
 =================== 
`suspendAutohide`
 =================== 
The template of the given log message is `interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}`.
 =================== 
`interceptKeyBeforeQueueing: key {key} , result : {result}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`resumeSuspendedAutohide`
 =================== 
The template of the given log message is `interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}`.
 =================== 
`interceptKeyBeforeQueueing: key {key} , result : {result}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
`isMusicActive...`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`suspendAutohide`
 =================== 
The template of the given log message is `interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}`.
 =================== 
`interceptKeyBeforeQueueing: key {key} , result : {result}`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`resumeSuspendedAutohide`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}`
 =================== 
`interceptKeyBeforeQueueing: key {key} , result : {result}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `animateCollapsePanels:flags=0, force=false, delayed=false, mExpandedVisible=false` is `animateCollapsePanels:flags={flags}, force={force}, delayed={delayed}, mExpandedVisible={mExpandedVisible}`.
 =================== 
`closeQs`
 =================== 
`cancelPeek: {cancelPeek}`
 =================== 
`instantCollapse`
 =================== 
`cancelPeek: {cancelPeek}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws=WorkSource{ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
The template of `Animating brightness: target=38, rate=200` is `Animating brightness: target={target}, rate={rate}`.
 =================== 
`Taking screenshot from Surface with crop:[{crop}], width:[{width}], height:[{height}], minLayer:[{minLayer}], maxLayer:[{maxLayer}], inRotation:[{inRotation}], rot:[{rot}]`
 =================== 
`The change in focus caused us to need to do a layout begin`
 =================== 
The template of `The change in focus caused us to need to do a layout end` is `The change in focus caused us to need to do a layout end`.
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`cancelAutohide`
 =================== 
`notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`
 =================== 
The template of the log message is `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
`updateDimmedActivatedHideSensitive overlap={overlap}`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} bnds=[{bnds}] }`
 =================== 
The template of the given log message is `Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={act} flg={flg} cmp={cmp} (has extras) }`.
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} (has extras) }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} (has extras) }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={act} dat={dat} flg={flg} cmp={cmp} }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={act} dat={dat} typ={typ} flg={flg} cmp={cmp} (has extras) }`
 =================== 
`getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}`
 =================== 
`getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity}`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} bnds=[{bnds}] }`
 =================== 
The template of the given log message is:
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={act} flg={flg} cmp={cmp} (has extras) }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} (has extras) }`
 =================== 
`getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}`
 =================== 
`getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity}`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`cancelAutohide`
 =================== 
`notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`
 =================== 
`release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws=WorkSource{ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`Releasing suspend blocker "{blockerName}".`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`ActivityManagerService,attachApplication,callingPid = {callingPid}`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
`Destroying surface Surface(name={surfaceName}) called by {caller}`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`Releasing suspend blocker "{blockerName}".`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `Acquiring suspend blocker "PowerManagerService.WakeLocks".` is `Acquiring suspend blocker "{blocker}".`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`Releasing suspend blocker "{blockerName}".`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`stopWifiDisplayScanLocked record.mWifiDisplayScanRequested={mWifiDisplayScanRequested}`
 =================== 
`stopWifiDisplayScanLocked mWifiDisplayScanRequestCount={mWifiDisplayScanRequestCount}`
 =================== 
`cleanUpApplicationRecord -- {value}`
 =================== 
`cleanUpApplicationRecordLocked, pid: {pid}, restart: {restart}`
 =================== 
`cleanUpApplicationRecordLocked, reset pid: {pid}, euid: {euid}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
The template of `Animating brightness: target=38, rate=200` is `Animating brightness: target={target}, rate={rate}`.
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
The template of `Animating brightness: target=38, rate=200` is `Animating brightness: target={target}, rate={rate}`.
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
The template of the log message is `Animating brightness: target={target}, rate={rate}`.
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
The template of `Animating brightness: target=38, rate=200` is `Animating brightness: target={target}, rate={rate}`.
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`cancelNotificationWithTag pid {pid},uid ={uid},tag ={tag},pkg ={pkg},id ={id}`
 =================== 
`cancelNotification,index:{index}`
 =================== 
`cancelNotificationWithTag pid {pid},uid ={uid},tag ={tag},pkg ={pkg},id ={id}`
 =================== 
`cancelNotification,index:{index}`
 =================== 
`enqueueNotificationInternal: pkg={pkg} id={id} notification=Notification(pri={pri} contentView={contentView} vibrate={vibrate} sound={sound} tick defaults={defaults} flags={flags} color={color} vis={vis})`
 =================== 
`enqueueNotificationInternal: n.getKey = {key}|{packageName}|{id}|{tag}|{userId}`
 =================== 
`getRingerMode...`
 =================== 
`updateLightsLocked,mInCall ={mInCall},mScreenOn = {mScreenOn},ledNotification == null?{ledNotification}`
 =================== 
The template of `updateLightsLocked,turn off notificationLight` is `updateLightsLocked,turn off notificationLight`.
 =================== 
`addNotification key={key}|{packageName}|{id}|{tag}|{userId}`
 =================== 
`mHeadsUpExistenceChangedRunnable`
 =================== 
`disable: < expand {ICONS*} alerts {SYSTEM_INFO*} back home recent clock navigationbar search quick_settings >`
 =================== 
`suspendAutohide`
 =================== 
The template of `updateNotificationShade: total=0, active=0` is `updateNotificationShade: total={total}, active={active}`.
 =================== 
`removeNotificationChildren`
 =================== 
The template of the given log message is `updateNotificationShade: total={total}, active={active}`.
 =================== 
`removeNotificationChildren`
 =================== 
The template of `Marking notification as seen 0|com.tencent.mobileqq|121|null|10111` is `Marking notification as seen {var1}|{var2}|{var3}|{var4}|{var5}`.
 =================== 
`onNotificationExpansionChanged called`
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
The template of `updateDimmedActivatedHideSensitive overlap:false` is `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{overlap}`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
The template of `updateClipping isOverlap:false, getTopPadding=333.0, Translation=-497.0` is `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
The template of `updateDimmedActivatedHideSensitive overlap:false` is `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
`logNotificationVisibilityChanges runInThread start`
 =================== 
`onNotificationVisibilityChanged called`
 =================== 
`logNotificationVisibilityChanges runInThread over`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`playSoundEffect   effectType: {effectType}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
`START u0 {act={act} cat={cat} flg={flg} cmp={cmp} bnds={bnds}} from uid {uid} on display {display}`
 =================== 
The template of the log message is `ActivityRecord info: ActivityInfo{f39182 {packageName}}, euid: {euid}`.
 =================== 
`acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws=WorkSource{ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`Acquiring suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
`rotationForOrientationLw(orient={orient}, last={last}); user={user} USER_ROTATION_LOCKED`
 =================== 
`Application requested orientation {orientation}, got rotation {rotation} which has compatible metrics`
 =================== 
The template of `The change in focus caused us to need to do a layout begin` is `The change in focus caused us to need to do a layout begin`.
 =================== 
The template of `The change in focus caused us to need to do a layout end` is `The change in focus caused us to need to do a layout end`.
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`cancelAutohide`
 =================== 
`notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} bnds=[{bnds}] }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={act} flg={flg} cmp={cmp} (has extras) }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} (has extras) }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} (has extras) }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={act} dat={dat} flg={flg} cmp={cmp} }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={act} dat={dat} typ={typ} flg={flg} cmp={cmp} (has extras) }`
 =================== 
`getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}`
 =================== 
`getRecentTasks: topActivity=ComponentInfo{com.example.android.notepad/com.example.android.notepad.NoteEditor}`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} bnds=[{bnds}] }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={act} flg={flg} cmp={cmp} (has extras) }`
 =================== 
The template of the given log message is `Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} (has extras) }`.
 =================== 
`getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}`
 =================== 
`getRecentTasks: topActivity=ComponentInfo{com.example.android.notepad/com.example.android.notepad.NoteEditor}`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`cancelAutohide`
 =================== 
`notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`
 =================== 
`release:lock={lock}, flg={flg}, tag="{tag}", name={name}, ws=WorkSource{ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`updateNotificationShade: total={total}, active={active}`
 =================== 
`removeNotificationChildren`
 =================== 
`overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen()}`
 =================== 
`state.clipTopAmount:{clipTopAmount}, i:{i}`
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
The template of `updateDimmedActivatedHideSensitive overlap:true` is `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
`ACTIVITY check resid: {resid}, size={size}`
 =================== 
`mHeadsUpExistenceChangedRunnable`
 =================== 
`updateNotificationShade: total={total}, active={active}`
 =================== 
`removeNotificationChildren`
 =================== 
`overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}`
 =================== 
`state.clipTopAmount:{clipTopAmount}, i:{i}`
 =================== 
`updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
`updateDimmedActivatedHideSensitive overlap={overlap}`
 =================== 
`makeExpandedInvisible: mExpandedVisible={mExpandedVisible}`
 =================== 
`closeQs`
 =================== 
`cancelPeek: {cancelPeek}`
 =================== 
`instantCollapse`
 =================== 
`cancelPeek: {boolean}`
 =================== 
`closeQs`
 =================== 
`logNotificationVisibilityChanges runInThread start`
 =================== 
`onNotificationVisibilityChanged called`
 =================== 
`resumeSuspendedAutohide`
 =================== 
The template of the given log message is `disable: < expand icons* alerts system_info* back home recent clock navigationbar search quick_settings >`.
 =================== 
`logNotificationVisibilityChanges runInThread over`
 =================== 
The template of `updateClipping isOverlap:false, getTopPadding=333.0, Translation=-24.0` is `updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
`updateDimmedActivatedHideSensitive overlap={overlap}`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`Destroying surface Surface(name={name}) called by {caller}`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`playSoundEffect   effectType: {effectType}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
`Destroying surface Surface(name={name}) called by {caller}`
 =================== 
`ActivityManagerService,attachApplication,callingPid = {callingPid}`
 =================== 
`Destroying surface Surface(name={name}) called by {caller}`
 =================== 
`ACTIVITY check resid: {resid}, size={size}`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`suspendAutohide`
 =================== 
`interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}`
 =================== 
`interceptKeyBeforeQueueing: key {key} , result : {result}`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`resumeSuspendedAutohide`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}`
 =================== 
`interceptKeyBeforeQueueing: key {key} , result : {result}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
The template of the given log message is `animateCollapsePanels:flags={flags}, force={force}, delayed={delayed}, mExpandedVisible={mExpandedVisible}`.
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`closeQs`
 =================== 
`cancelPeek: {boolean}`
 =================== 
`instantCollapse`
 =================== 
`cancelPeek: {cancelPeek}`
 =================== 
`acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws=WorkSource{ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `Acquiring suspend blocker "PowerManagerService.WakeLocks".` is `Acquiring suspend blocker "PowerManagerService.WakeLocks"`.
 =================== 
`rotationForOrientationLw(orient={orient}, last={last}); user={user} USER_ROTATION_LOCKED`
 =================== 
`Application requested orientation {orientation}, got rotation {rotation} which has compatible metrics`
 =================== 
`Taking screenshot from Surface with crop:[{crop}], width:[{width}], height:[{height}], minLayer:[{minLayer}], maxLayer:[{maxLayer}], inRotation:[{inRotation}], rot:[{rot}]`
 =================== 
`The change in focus caused us to need to do a layout begin`
 =================== 
The template of `The change in focus caused us to need to do a layout end` is `The change in focus caused us to need to do a layout end`.
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`cancelAutohide`
 =================== 
`notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{overlap}`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} bnds=[{bnds}] }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={act} flg={flg} cmp={cmp} (has extras) }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} (has extras) }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} (has extras) }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={act} dat={dat} flg={flg} cmp={cmp} (has extras) }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={act} dat={dat} typ={typ} flg={flg} cmp={cmp} (has extras) }`
 =================== 
`getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}`
 =================== 
`getRecentTasks: topActivity=ComponentInfo{com.example.android.notepad/com.example.android.notepad.NoteEditor}`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} bnds=[{bnds}] }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={act} flg={flg} cmp={cmp} (has extras) }`
 =================== 
The template of the given log message is `Skipping, withExcluded: {withExcluded}, tr.intent:{intent}`.
 =================== 
`getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}`
 =================== 
`getRecentTasks: topActivity=ComponentInfo{com.example.android.notepad/com.example.android.notepad.NoteEditor}`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`cancelAutohide`
 =================== 
`notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`release:lock={lock}, flg={flg}, tag="{tag}", name={name}, ws=WorkSource{ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `Releasing suspend blocker "PowerManagerService.WakeLocks".` is `Releasing suspend blocker "PowerManagerService.WakeLocks"`.
 =================== 
`Destroying surface Surface(name={surfaceName}) called by {caller}`
 =================== 
`Destroying surface Surface(name={surfaceName}) called by {caller}`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRingerMode...`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`suspendAutohide`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of the given log message is `interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}`.
 =================== 
`interceptKeyBeforeQueueing: key {key} , result : {result}`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`resumeSuspendedAutohide`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}`
 =================== 
`interceptKeyBeforeQueueing: key {key} , result : {result}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`animateCollapsePanels:flags={flags}, force={force}, delayed={delayed}, mExpandedVisible={mExpandedVisible}`
 =================== 
`closeQs`
 =================== 
`cancelPeek: {cancelPeek}`
 =================== 
`instantCollapse`
 =================== 
`cancelPeek: {cancelPeek}`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`playSoundEffect   effectType: {effectType}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
`START u0 {act={act} cat=[{cat}] flg={flg} cmp={cmp} bnds=[{bnds}]} from uid {uid} on display {display}`
 =================== 
`ActivityRecord info: ActivityInfo{71e60ba com.tencent.mobileqq.activity.SplashActivity}, euid: {euid}`
 =================== 
`acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws=WorkSource{ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `Acquiring suspend blocker "PowerManagerService.WakeLocks".` is `Acquiring suspend blocker "PowerManagerService.WakeLocks"`.
 =================== 
The template of `The change in focus caused us to need to do a layout begin` is `The change in focus caused us to need to do a layout begin`.
 =================== 
The template of `The change in focus caused us to need to do a layout end` is `The change in focus caused us to need to do a layout end`.
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
`updateDimmedActivatedHideSensitive overlap:{overlap}`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`cancelAutohide`
 =================== 
`notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} bnds=[{bnds}] }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={act} flg={flg} cmp={cmp} (has extras) }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} (has extras) }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} (has extras) }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={act} dat={dat} flg={flg} cmp={cmp} (has extras) }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={act} dat={dat} typ={typ} flg={flg} cmp={cmp} (has extras) }`
 =================== 
`getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}`
 =================== 
`getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity}`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} bnds=[{bnds}] }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={act} flg={flg} cmp={cmp} (has extras) }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} (has extras) }`
 =================== 
`getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}`
 =================== 
`getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}`
 =================== 
`cancelNotification,index:{index}`
 =================== 
`cancelNotification,cancelNotificationLocked,callingUid = {callingUid},callingPid = {callingPid}`
 =================== 
`cancelNotificationLocked called,tell the app,reason = {reason}`
 =================== 
`cancelNotificationLocked:{0}|{packageName}|{id}|{tag}|{userId}`
 =================== 
`cancelNotificationWithTag pid {pid},uid ={uid},tag ={tag},pkg ={pkg},id ={id}`
 =================== 
`cancelNotificationLocked,remove ={remove}`
 =================== 
`cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}`
 =================== 
`updateLightsLocked,mInCall ={mInCall},mScreenOn = {mScreenOn},ledNotification == null?{ledNotification}`
 =================== 
The template of `updateLightsLocked,turn off notificationLight` is `updateLightsLocked,turn off notificationLight`.
 =================== 
`cancelNotification,index:{index}`
 =================== 
`cancelNotification,index:{index}`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`cancelAutohide`
 =================== 
`notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`
 =================== 
`cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}`
 =================== 
`cancelNotificationWithTag pid {pid},uid ={uid},tag ={tag},pkg ={pkg},id ={id}`
 =================== 
`cancelNotification,index:{index}`
 =================== 
`cancelNotification,index:{index}`
 =================== 
The template of the log message is `cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}`.
 =================== 
`cancelNotification,index:{index}`
 =================== 
`cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}`
 =================== 
`cancelNotification,index:{index}`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
The template of the log message is `removeNotification:{0}|{packageName}|{id}|{tag}|{userId}`.
 =================== 
The template of `updateNotificationShade: total=0, active=0` is `updateNotificationShade: total={total}, active={active}`.
 =================== 
`cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}`
 =================== 
`cancelNotification,index:{index}`
 =================== 
`removeNotificationChildren`
 =================== 
`animateCollapsePanels:flags={flags}, force={force}, delayed={delayed}, mExpandedVisible={mExpandedVisible}`
 =================== 
`closeQs`
 =================== 
`cancelPeek: {cancelPeek}`
 =================== 
`instantCollapse`
 =================== 
`cancelPeek: {cancelPeek}`
 =================== 
`release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws=WorkSource{ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `Releasing suspend blocker "PowerManagerService.WakeLocks".` is `Releasing suspend blocker "{blocker}".`
 =================== 
The template of the log message is `updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
The template of `updateDimmedActivatedHideSensitive overlap:false` is `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}`
 =================== 
`cancelNotification,index:{index}`
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
The template of `getAllCellInfo is blocked by permission manager . callingPackage = com.tencent.mobileqq` is `getAllCellInfo is blocked by permission manager . callingPackage = {callingPackage}`.
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`isMusicActive...`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`playSoundEffect   effectType: {effectType}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
The template of `shouldBlockLocation running ...` is `shouldBlockLocation running ...`.
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
The template of `getAllCellInfo is blocked by permission manager . callingPackage = com.tencent.mobileqq` is `getAllCellInfo is blocked by permission manager . callingPackage = {callingPackage}`.
 =================== 
`shouldBlockLocation running ...`
 =================== 
The template of `shouldBlockLocation  ret:true` is `shouldBlockLocation  ret:{ret}`.
 =================== 
The template of `getCellLocation is blocked by permission manager uid:10111 pid:28601` is `getCellLocation is blocked by permission manager uid:{uid} pid:{pid}`.
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn({boolean})`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn({boolean})`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`shouldBlockLocation running ...`
 =================== 
`shouldBlockLocation  ret:{ret}`
 =================== 
The template of `getAllCellInfo is blocked by permission manager . callingPackage = com.tencent.mobileqq` is `getAllCellInfo is blocked by permission manager . callingPackage = {callingPackage}`.
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`isMusicActive...`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
The template of `Animating brightness: target=38, rate=200` is `Animating brightness: target={target}, rate={rate}`.
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
The template of `Animating brightness: target=38, rate=200` is `Animating brightness: target={target}, rate={rate}`.
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`sending alarm Alarm{d764221 type {type} when {when} PendingIntent{1749923: PendingIntentRecord{9600e20 android broadcastIntent}}},repeatInterval = {repeatInterval},listenerTag ={listenerTag}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`Acquiring suspend blocker "{blocker}".`
 =================== 
`Received {alarmType} alarm; rescheduling`
 =================== 
`scheduleTimeTickEvent triggerAtTime = {triggerAtTime}`
 =================== 
The template of `updateClipping isOverlap:false, getTopPadding=333.0, Translation=0.0` is `updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
`updateDimmedActivatedHideSensitive overlap={overlap}`
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
The template of `updateDimmedActivatedHideSensitive overlap:false` is `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
`received broadcast {action}`
 =================== 
`handleTimeUpdate`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`playSoundEffect   effectType: {effectType}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
`Destroying surface Surface(name={name}) called by {caller}`
 =================== 
`isWiredHeadsetOn...`
 =================== 
`Destroying surface Surface(name={name}) called by {caller}`
 =================== 
`acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of the given log message is `acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`.
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setDataSource({arg1}, {arg2}, {arg3})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn({boolean})`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn({boolean})`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`getStreamVolume  treamType: {streamType}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`Destroying surface Surface(name={name}) called by {caller}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`Destroying surface Surface(name={name}) called by {caller}`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`playSoundEffect   effectType: {effectType}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
The template of `Animating brightness: target=38, rate=200` is `Animating brightness: target={target}, rate={rate}`.
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
The template of `Animating brightness: target=38, rate=200` is `Animating brightness: target={target}, rate={rate}`.
 =================== 
The template of the given log message is `updateIsPoweredLocked: wasPowered={wasPowered}, mIsPowered={mIsPowered}, oldPlugType={oldPlugType}, mPlugType={mPlugType}, mBatteryLevel={mBatteryLevel}`.
 =================== 
The template of `received broadcast android.intent.action.BATTERY_CHANGED` is `received broadcast {action}`.
 =================== 
`ACTION_BATTERY_CHANGED AMP: {amp}; Volt: {volt}`
 =================== 
`updateChargingLocked: charging={charging}`
 =================== 
`onReceive, action:{action}`
 =================== 
`ACTION_BATTERY_CHANGED pluggedType: {pluggedType}`
 =================== 
`ApStaDisabledState what={what}`
 =================== 
`DefaultState what={what}`
 =================== 
`battery changed pluggedType: {pluggedType}`
 =================== 
`RefreshBatteryInfo isBatteryLow: {isBatteryLow}`
 =================== 
`ChargingSpeed  Wattage: {wattage} ST: {oldST} --> {newST}`
 =================== 
`handleBatteryUpdate`
 =================== 
`RefreshBatteryInfo isBatteryLow: {isBatteryLow}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `Releasing suspend blocker "PowerManagerService.WakeLocks".` is `Releasing suspend blocker "{blocker}".`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`suspendAutohide`
 =================== 
The template of the given log message is `interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}`.
 =================== 
`interceptKeyBeforeQueueing: key {key} , result : {result}`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`resumeSuspendedAutohide`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `interceptKeyTq keycode=3 interactive=true keyguardActive=false policyFlags=2b000002 down false canceled false` is `interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}`.
 =================== 
`interceptKeyBeforeQueueing: key {key} , result : {result}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`animateCollapsePanels:flags={flags}, force={force}, delayed={delayed}, mExpandedVisible={mExpandedVisible}`
 =================== 
`closeQs`
 =================== 
`cancelPeek: {boolean}`
 =================== 
`instantCollapse`
 =================== 
`cancelPeek: {cancelPeek}`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws=WorkSource{ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `Acquiring suspend blocker "PowerManagerService.WakeLocks".` is `Acquiring suspend blocker "{blocker}".`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`setLightsOn(true)`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`Taking screenshot from Surface with crop:[{crop}], width:[{width}], height:[{height}], minLayer:[{minLayer}], maxLayer:[{maxLayer}], inRotation:[{inRotation}], rot:[{rot}]`
 =================== 
The template of `The change in focus caused us to need to do a layout begin` is `The change in focus caused us to need to do a layout begin`.
 =================== 
The template of `The change in focus caused us to need to do a layout end` is `The change in focus caused us to need to do a layout end`.
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`cancelAutohide`
 =================== 
`notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`
 =================== 
The template of the log message is `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
`updateDimmedActivatedHideSensitive overlap={overlap}`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} bnds=[{bnds}] }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={act} flg={flg} cmp={cmp} (has extras) }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} (has extras) }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} (has extras) }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={act} dat={dat} flg={flg} cmp={cmp} (has extras) }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={act} dat={dat} typ={typ} flg={flg} cmp={cmp} (has extras) }`
 =================== 
`getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}`
 =================== 
`getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity}`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} bnds=[{bnds}] }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={act} flg={flg} cmp={cmp} (has extras) }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} (has extras) }`
 =================== 
`getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}`
 =================== 
`getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity}`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({fullscreenStackBounds}), dockedStackBounds=Rect({dockedStackBounds})`
 =================== 
`cancelAutohide`
 =================== 
`notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`
 =================== 
`getRingerMode...`
 =================== 
`release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws=WorkSource{ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`Releasing suspend blocker "{blockerName}".`
 =================== 
`enqueueNotificationInternal: pkg={pkg} id={id} notification=Notification(pri={pri} contentView={contentView} vibrate={vibrate} sound={sound} tick defaults={defaults} flags={flags} color={color} category={category} vis={vis})`
 =================== 
`enqueueNotificationInternal: n.getKey = {key}|{packageName}|{id}|{tag}|{userId}`
 =================== 
`updateLightsLocked,mInCall ={mInCall},mScreenOn = {mScreenOn},ledNotification == null?{ledNotification}`
 =================== 
The template of `updateLightsLocked,turn off notificationLight` is `updateLightsLocked,turn off notificationLight`.
 =================== 
The template of `addNotification key=0|com.tencent.mm|4097|null|10112` is `addNotification key={key}|{packageName}|{id}|{tag}|{userId}`.
 =================== 
`mHeadsUpExistenceChangedRunnable`
 =================== 
`disable: < expand {ICONS*} alerts {SYSTEM_INFO*} back home recent clock navigationbar search quick_settings >`
 =================== 
`suspendAutohide`
 =================== 
The template of `updateNotificationShade: total=0, active=0` is `updateNotificationShade: total={total}, active={active}`.
 =================== 
`removeNotificationChildren`
 =================== 
`updateNotificationShade: total={total}, active={active}`
 =================== 
`removeNotificationChildren`
 =================== 
`Marking notification as seen {var1}|{var2}|{var3}|{var4}|{var5}`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`onNotificationExpansionChanged called`
 =================== 
`Destroying surface Surface(name={surfaceName}) called by {caller}`
 =================== 
The template of the given log message is `updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
`updateDimmedActivatedHideSensitive overlap={overlap}`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
`updateDimmedActivatedHideSensitive overlap={overlap}`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getTasks: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`sending alarm Alarm{2741459 type 3 when 509267844 PendingIntent{f75f81e: PendingIntentRecord{e204f60 com.android.phone broadcastIntent}}},repeatInterval = {repeatInterval},listenerTag ={listenerTag}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `Acquiring suspend blocker "PowerManagerService.WakeLocks".` is `Acquiring suspend blocker "PowerManagerService.WakeLocks"`.
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of `Releasing suspend blocker "PowerManagerService.WakeLocks".` is `Releasing suspend blocker "PowerManagerService.WakeLocks"`.
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of the log message is `Acquiring suspend blocker "{blocker}".`
 =================== 
The template of the given log message is `updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
`updateDimmedActivatedHideSensitive overlap={overlap}`
 =================== 
`logNotificationVisibilityChanges runInThread start`
 =================== 
`onNotificationVisibilityChanged called`
 =================== 
`logNotificationVisibilityChanges runInThread over`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`Releasing suspend blocker "PowerManagerService.WakeLocks".`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`onInterceptTouchEvent MotionEvent { action={action}, actionButton={actionButton}, id[0]={id[0]}, x[0]={x[0]}, y[0]={y[0]}, toolType[0]={toolType[0]}, buttonState={buttonState}, metaState={metaState}, flags={flags}, edgeFlags={edgeFlags}, pointerCount={pointerCount}, historySize={historySize}, eventTime={eventTime}, downTime={downTime}, deviceId={deviceId}, source={source} }, mBlockTouches={mBlockTouches}`
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
`updateDimmedActivatedHideSensitive overlap={overlap}`
 =================== 
`onInterceptTouchEvent MotionEvent { action={action}, actionButton={actionButton}, id[0]={id[0]}, x[0]={x[0]}, y[0]={y[0]}, toolType[0]={toolType[0]}, buttonState={buttonState}, metaState={metaState}, flags={flags}, edgeFlags={edgeFlags}, pointerCount={pointerCount}, historySize={historySize}, eventTime={eventTime}, downTime={downTime}, deviceId={deviceId}, source={source} }, mBlockTouches={mBlockTouches}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`playSoundEffect   effectType: {effectType}`
 =================== 
`querySoundEffectsEnabled...`
 =================== 
`updateNotificationShade: total={total}, active={active}`
 =================== 
`removeNotificationChildren`
 =================== 
`animateCollapsePanels:flags={flags}, force={force}, delayed={delayed}, mExpandedVisible={mExpandedVisible}`
 =================== 
`closeQs`
 =================== 
`cancelPeek: {cancelPeek}`
 =================== 
`instantCollapse`
 =================== 
`cancelPeek: {cancelPeek}`
 =================== 
`updateNotificationShade: total={total}, active={active}`
 =================== 
`removeNotificationChildren`
 =================== 
`logNotificationVisibilityChanges runInThread start`
 =================== 
`onNotificationVisibilityChanged called`
 =================== 
`logNotificationVisibilityChanges runInThread over`
 =================== 
`START u0 {flg} cmp={component} (has extras) from uid {uid} on display {display}`
 =================== 
`ActivityRecord info: ActivityInfo{80c2e70 com.tencent.mm.ui.LauncherUI}, euid: {euid}`
 =================== 
`overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}`
 =================== 
`state.clipTopAmount:{clipTopAmount}, i:{i}`
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
`updateDimmedActivatedHideSensitive overlap={overlap}`
 =================== 
`makeExpandedInvisible: mExpandedVisible={mExpandedVisible}`
 =================== 
`closeQs`
 =================== 
`cancelPeek: {cancelPeek}`
 =================== 
`instantCollapse`
 =================== 
`cancelPeek: {cancelPeek}`
 =================== 
`updateNotificationShade: total={total}, active={active}`
 =================== 
`removeNotificationChildren`
 =================== 
`closeQs`
 =================== 
`startActivity called from non-Activity context; forcing Intent.FLAG_ACTIVITY_NEW_TASK for: Intent { flg={flg} cmp={component} (has extras) }`
 =================== 
`resumeSuspendedAutohide`
 =================== 
`disable: < expand icons* alerts system_info* back home recent clock navigationbar search quick_settings >`
 =================== 
`overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}`
 =================== 
`state.clipTopAmount:{clipTopAmount}, i:{i}`
 =================== 
`updateClipping isOverlap={isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`
 =================== 
The template of `updateDimmedActivatedHideSensitive overlap:true` is `updateDimmedActivatedHideSensitive overlap:{overlap}`.
 =================== 
`makeExpandedInvisible: mExpandedVisible={mExpandedVisible}`
 =================== 
`acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws=WorkSource{ws}, uid={uid}, pid={pid}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
The template of the log message is `Acquiring suspend blocker "{blocker}".`
 =================== 
`onNotificationClick called`
 =================== 
`cancelNotification,index:{index}`
 =================== 
`applyOptionsLocked: Unknown animationType={animationType}`
 =================== 
`getRunningAppProcesses: caller {caller} does not hold {permission}; limiting output`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} bnds=[{bnds}] }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={act} flg={flg} cmp={cmp} (has extras) }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} (has extras) }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} (has extras) }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={act} dat={dat} flg={flg} cmp={cmp} (has extras) }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={act} dat={dat} typ={typ} flg={flg} cmp={cmp} (has extras) }`
 =================== 
`getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}`
 =================== 
`getRecentTasks: topActivity=ComponentInfo{com.tencent.mm/com.tencent.mm.ui.LauncherUI}`
 =================== 
The template of the given log message is `Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} bnds=[{bnds}] }`.
 =================== 
The template of the given log message is `Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={act} flg={flg} cmp={cmp} (has extras) }`.
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={cmp} (has extras) }`
 =================== 
`getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}`
 =================== 
`getRecentTasks: topActivity=ComponentInfo{com.tencent.mm/com.tencent.mm.ui.LauncherUI}`
 =================== 
`mHeadsUpExistenceChangedRunnable`
 =================== 
The template of `updateClipping isOverlap:false, getTopPadding=333.0, Translation=-24.0` is `updateClipping isOverlap:{isOverlap}, getTopPadding={getTopPadding}, Translation={Translation}`.
 =================== 
`updateDimmedActivatedHideSensitive overlap={overlap}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
The template of `Animating brightness: target=38, rate=200` is `Animating brightness: target={target}, rate={rate}`.
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
`HBM brightnessIn ={brightnessIn}`
 =================== 
`HBM brightnessOut ={brightnessOut}`
 =================== 
`Animating brightness: target={target}, rate={rate}`
 =================== 
