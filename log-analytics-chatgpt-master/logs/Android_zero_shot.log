``printFreezingDisplayLogsopening app wtoken = AppWindowToken{9f4ef63 token=Token{a64f992 ActivityRecord{de9231d u0 {packageName}/.{activityName} t761}}}, allDrawn= {allDrawn}, startingDisplayed =  {startingDisplayed}, startingMoved =  {startingMoved}, isRelaunching =  {isRelaunching}``
 =================== 
``acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}``
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
``Skipping AppWindowToken{<token>} -- going to hide``
 =================== 
``{action} is {system}.{time}.{format}``
 =================== 
`{functionName}.getValue is {value}`
 =================== 
``{noun} is {adjective}.{noun}.{verb}``
 =================== 
``{functionName}.getValue is {value}``
 =================== 
`{action}` is {object}.{property} {operator} {value}`
 =================== 
``{functionName}.getValue is {value}``
 =================== 
``visible is {system}.{message}.{count} gt 0``
 =================== 
``{functionName}.getValue is {value}``
 =================== 
``visible is {variable}``
 =================== 
`{functionName}.getValue is {value}`
 =================== 
``release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Skipping AppWindowToken{<token>} -- going to hide``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``update{Action}ActivatedHideSensitive overlap:{Overlap}``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {limiting_output}``
 =================== 
``release:lock={lock}, flg={flg}, tag="{tag}", name={name}, ws=WorkSource{ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``{action}``
 =================== 
``notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}``
 =================== 
``Destroying surface Surface(name={surfaceName}) called by {caller} <bottom of call stack> <bottom of call``
 =================== 
`Destroying surface Surface(name={surface_name}) called by {caller_method}`
 =================== 
``release:lock={lock}, flg={flg}, tag="{tag}", name="{name}", ws=WorkSource{ws}, uid={uid}, pid={pid}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``{action} change is complete, call {method}``
 =================== 
``Screen frozen for {duration} due to {window}``
 =================== 
``{action} begin``
 =================== 
``{action} {result}``
 =================== 
``release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``remove(PendingIntent{19abed0: PendingIntentRecord{a485420 {packageName} {action} {intentType}}}) changed bounds; rebatching``
 =================== 
``rotationForOrientationLw(orient={orient}, last={last}); user={user} USER_ROTATION_LOCKED``
 =================== 
``Application requested orientation {orientation}, got rotation {rotation} which has compatible metrics``
 =================== 
``acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``{action} running ...``
 =================== 
``shouldBlockLocation  ret:{boolean}``
 =================== 
``{action} running ...``
 =================== 
``shouldBlockLocation  ret:{boolean}``
 =================== 
``{action} calling app is {app}``
 =================== 
``{action} running ...``
 =================== 
``shouldBlockLocation  ret:{boolean}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
`{action} running ...`
 =================== 
``shouldBlockLocation  ret:{boolean}```
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``{action} running ...``
 =================== 
``shouldBlockLocation  ret:{boolean}``
 =================== 
``release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Releasing suspend blocker "{blocker}".``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}```
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
`{action}`
 =================== 
``interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}``
 =================== 
``interceptKeyBeforeQueueing: key {key} , result : {result}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
`{action}`
 =================== 
``interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}``
 =================== 
``interceptKeyBeforeQueueing: key {key} , result : {result}``
 =================== 
``{action}SoundEffectsEnabled...``
 =================== 
``acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws=WorkSource{ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Acquiring suspend blocker "{blocker}".``
 =================== 
``Skipping AppWindowToken{9f4ef63 token=Token{a64f992 ActivityRecord{de9231d u0 com.tencent.qt.qtl/.activity.info.NewsDetailXmlActivity t761}}} -- going to hide``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
`{action}`
 =================== 
``notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}``
 =================== 
``Bad activity token: {activity_token}``
 =================== 
`{exceptionType}: {sourceType} cannot be cast to {targetType}`
 =================== 
`Skipping AppWindowToken{9f4ef63 token={token} -- going to hide`
 =================== 
``release:lock={lock}, flg={flg}, tag="{tag}", name={name}, ws=WorkSource{ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Releasing suspend blocker "{blocker}".``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
`{action}`
 =================== 
``notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
`{action}`
 =================== 
`{action}`
 =================== 
``onTouchEvent::{action}, x={x_coord}, y={y_coord}``
 =================== 
``{action}``
 =================== 
`{functionName}...`
 =================== 
``disable: < expand {ICONS*} alerts {SYSTEM_INFO*} back home recent clock navigationbar search quick_settings >``
 =================== 
`{action}`
 =================== 
``updateLightsLocked,mInCall ={mInCall},mScreenOn = {mScreenOn},ledNotification == null?{ledNotification}``
 =================== 
``{methodName},{action}``
 =================== 
`{functionName}...`
 =================== 
``updateLightsLocked,mInCall ={mInCall},mScreenOn = {mScreenOn},ledNotification == null?{ledNotification}``
 =================== 
``{methodName},{action}``
 =================== 
```
overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}
```
 =================== 
``state.clipTopAmount:{clipTopAmount}, i:{i}``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
`{method}: caller {callerId} does not hold {permission}; {additionalInfo}`
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}``
 =================== 
`{action}`
 =================== 
`{eventName}`
 =================== 
`{action}`
 =================== 
``{eventName}``
 =================== 
``Destroying surface Surface(name={surfaceName}) called by {caller}``
 =================== 
`{action}`
 =================== 
```
overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}
```
 =================== 
``state.clipTopAmount:{clipTopAmount}, i:{i}``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
`{action}`
 =================== 
```
overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}
```
 =================== 
``state.clipTopAmount:{clipTopAmount}, i:{i}``
 =================== 
``{functionName} isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
`{action}`
 =================== 
```
overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}
```
 =================== 
``state.clipTopAmount:{clipTopAmount}, i:{i}``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
`{action}`
 =================== 
```
overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}
```
 =================== 
``state.clipTopAmount:{clipTopAmount}, i:{i}``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``updateDimmedActivatedHideSensitive overlap:{boolean}``
 =================== 
`{action}`
 =================== 
```
overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}
```
 =================== 
``state.clipTopAmount:{clipTopAmount}, i:{i}``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
`{action}`
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
`{action}`
 =================== 
``{functionName} isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
`{action}`
 =================== 
`{action}`
 =================== 
``onTouchEvent::{action}, x={x_coord}, y={y_coord}``
 =================== 
`cancelPeek: {boolean}`
 =================== 
`flingToHeight: vel={velocity}, expand={expand}, target={target}, collapseSpeedUpFactor={speedFactor}, expandBecauseOfFalsing={falsing}`
 =================== 
``onTrackingStopped: {status}``
 =================== 
``{action} isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``update{Action}ActivatedHideSensitive overlap:{Overlap}``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``{action} isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``{functionName} isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``{functionName} isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``update{Action}ActivatedHide{Attribute} overlap:{Boolean}``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``{functionName} isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``{functionName} isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
`{action}Finished`
 =================== 
``{functionName} isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``Sending {broadcast_type} broadcast {broadcast_name} from {sender_details}```
 =================== 
``{action} runInThread {status}``
 =================== 
`{functionName} called`
 =================== 
``{action} runInThread {status}``
 =================== 
``{functionName} {variableName} is null or empty``
 =================== 
``{functionName} not in {location}.``
 =================== 
``{tag}: {message}``
 =================== 
``*** register callback for {component}@{address}``
 =================== 
``{functionName} not in {location}.``
 =================== 
``{tag}: {message}``
 =================== 
``*** unregister callback for {variable}``
 =================== 
```
[PhoneIntfMgr] getDataEnabled: subId={subId} phoneId={phoneId}
```
 =================== 
``[PhoneIntfMgr] getDataEnabled: subId={subId} retVal={retVal}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
`onInterceptTouchEvent MotionEvent { action={action}, actionButton={actionButton}, id[0]={id[0]}, x[0]={x[0]}, y[0]={y[0]}, toolType[0]={toolType[0]}, buttonState={buttonState}, metaState={metaState}, flags={flags}, edgeFlags={edgeFlags}, pointerCount={pointerCount}, historySize={historySize}, eventTime={eventTime}, downTime={downTime}, deviceId={deviceId}, source={source} }, mBlockTouches={mBlockTouches}`
 =================== 
``{functionName} isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``onInterceptTouchEvent MotionEvent { action={action}, actionButton={actionButton}, id[0]={id[0]}, x[0]={x[0]}, y[0]={y[0]}, toolType[0]={toolType[0]}, buttonState={buttonState}, metaState={metaState}, flags={flags}, edgeFlags={edgeFlags}, pointerCount={pointerCount}, historySize={historySize}, eventTime={eventTime}, downTime={downTime}, deviceId={deviceId}, source={source} }, mBlockTouches={mBlockTouches}`
 =================== 
``playSoundEffect   effectType: {effectType}``
 =================== 
``{action}SoundEffectsEnabled...``
 =================== 
``animateCollapsePanels:flags={flags}, force={force}, delayed={delayed}, mExpandedVisible={mExpandedVisible}``
 =================== 
`{action}Started`
 =================== 
``{action} runInThread {status}``
 =================== 
``{method} called``
 =================== 
``{action} runInThread {status}``
 =================== 
``START u0 {act=<activity> flg=<flags> cmp=<component>} from uid <uid> on display <display>``
 =================== 
``ActivityRecord info: ActivityInfo{<activityInfo>}, euid: <euid>``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}``
 =================== 
``acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws=WorkSource{{ws}}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``Acquiring suspend blocker "{blocker}".``
 =================== 
``{functionName} called``
 =================== 
`cancelNotification,index:{index}`
 =================== 
`{action},{lockedAction},callingUid = {uid},callingPid = {pid}`
 =================== 
``{methodName} called,tell the app,reason = {reason}``
 =================== 
``cancelNotificationLocked:{int}|{string}|{int}|{string}|{int}``
 =================== 
``cancelNotificationLocked,remove ={packageName}``
 =================== 
``applyOptionsLocked: Unknown animationType={type}``
 =================== 
``cancelPeek: {cancelPeek}``
 =================== 
``flingToHeight: vel={vel}, expand={expand}, target={target}, collapseSpeedUpFactor={collapseSpeedUpFactor}, expandBecauseOfFalsing={expandBecauseOfFalsing}``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``{functionName} isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``Taking screenshot from Surface with crop:[{Rect}], width:[{width}], height:[{height}], minLayer:[{minLayer}], maxLayer:[{maxLayer}], inRotation:[{inRotation}], rot:[{rotation}]``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``update{Action}ActivatedHide{Attribute} overlap:{Boolean}``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``updateDimmedActivatedHideSensitive overlap:{overlap}``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``updateLightsLocked,mInCall ={mInCall},mScreenOn = {mScreenOn},ledNotification == null?{ledNotification}``
 =================== 
``{methodName},{action}``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``{functionName} isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``update{Action}ActivatedHideSensitive overlap:{Overlap}``
 =================== 
``removeNotification:{notificationId}|{packageName}|{userId}|{extraInfo}|{errorCode}``
 =================== 
``updateNotificationShade: total={total}, active={active}``
 =================== 
``animateCollapsePanels:flags={flags}, force={force}, delayed={delayed}, mExpandedVisible={mExpandedVisible}``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``The change in {variable1} caused us to need to do a {variable2} begin``
 =================== 
``The change in {variable1} caused us to need to do a {variable2} end``
 =================== 
``overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}``
 =================== 
``state.clipTopAmount:{clipTopAmount}, i:{i}``
 =================== 
``{functionName} isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``updateDimmedActivatedHideSensitive overlap:{boolean}``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
`{action}`
 =================== 
``notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}``
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
```
overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}
```
 =================== 
``state.clipTopAmount:{clipTopAmount}, i:{i}``
 =================== 
``{functionName} isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``updateDimmedActivatedHideSensitive overlap:{boolean}``
 =================== 
```
overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}
```
 =================== 
``state.clipTopAmount:{clipTopAmount}, i:{i}``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``updateNotificationShade: total={total}, active={active}``
 =================== 
`{action}`
 =================== 
`{action}Finished`
 =================== 
``updateNotificationShade: total={total}, active={active}``
 =================== 
``{action}``
 =================== 
``Sending non-protected broadcast {broadcast_name} from system {system_id}:{system_process} pkg {package_name}``
 =================== 
``{functionName} isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``update{Action}ActivatedHideSensitive overlap:{Overlap}``
 =================== 
``Skipping, withExcluded: {excluded}, tr.intent:Intent { flg={flag} cmp={component} bnds=[{left},{top}][{right},{bottom}] }``
 =================== 
``Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={action} flg={flags} cmp={component} (has extras) }``
 =================== 
``Skipping, withExcluded: {excluded}, tr.intent:Intent { flg={flag} cmp={component} (has extras) }``
 =================== 
``Skipping, withExcluded: {excluded}, tr.intent:Intent { flg={flag} cmp={component} (has extras) }``
 =================== 
``Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act=com.android.contacts.action.CHOOSE_SUB dat=tel:{phoneNumber} flg={flags} cmp=com.android.contacts/.ChooseSubActivity (has extras) }``
 =================== 
``Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act=android.intent.action.VIEW dat={data} typ={type} flg={flags} cmp={component} (has extras) }``
 =================== 
`getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}`
 =================== 
`getRecentTasks: topActivity=ComponentInfo{${packageName}/${activityName}}`
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``Skipping, withExcluded: {excluded}, tr.intent:Intent { flg={flag} cmp={component} bnds=[{left},{top}][{right},{bottom}] }``
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={action} flg={flags} cmp={component} (has extras) }`
 =================== 
`Skipping, withExcluded: {excluded}, tr.intent:Intent { flg={flag} cmp={component} (has extras) }`
 =================== 
`getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}`
 =================== 
`getRecentTasks: topActivity=ComponentInfo{${packageName}/${activityName}}`
 =================== 
``cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}``
 =================== 
``cancelNotification,index:{index}``
 =================== 
``cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}``
 =================== 
``cancelNotification,index:{index}``
 =================== 
``cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}``
 =================== 
``{functionName}({parameter})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``{action}``
 =================== 
``notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}``
 =================== 
``makeExpandedInvisible: mExpandedVisible={value}``
 =================== 
``{action}``
 =================== 
`cancelPeek: {cancelPeek}`
 =================== 
`{logMessage}`
 =================== 
`cancelPeek: {boolean}`
 =================== 
``{action}``
 =================== 
`{action}`
 =================== 
``disable: < {features} >``
 =================== 
``cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}``
 =================== 
``cancelNotification,index:{index}``
 =================== 
``cancelNotification,index:{index}``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {limiting_output}``
 =================== 
``release:lock={lock}, flg={flg}, tag="{tag}", name={name}, ws=WorkSource{ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}``
 =================== 
``cancelNotification,index:{index}``
 =================== 
``cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}``
 =================== 
``cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}``
 =================== 
``cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}``
 =================== 
``cancelNotification,index:{index}``
 =================== 
``cancelNotification,index:{index}``
 =================== 
``cancelNotification,index:{index}``
 =================== 
``cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}``
 =================== 
``cancelNotification,index:{index}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``Releasing suspend blocker "{blocker}".``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``{functionName} not in {location}.``
 =================== 
``{tag}: {message}``
 =================== 
``*** unregister callback for {component}```
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``{functionName}`: caller {callerId} does not hold {permissionName}; {limitingOutput}`
 =================== 
``{functionName}({parameter})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``Destroying surface Surface(name={surface_name}) called by {caller}```
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
`{functionName}: caller {callerId} does not hold {permissionType}; {additionalInfo}`
 =================== 
``{action}`` isMusicActive...
 =================== 
``{action}`` isMusicActive...
 =================== 
``Start dump, calling from : pid={pid}, uid={uid}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
`{method}: caller {callerId} does not hold {permission}; limiting output`
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {additional_info}``
 =================== 
`{method}: caller {caller} does not hold {permission}; limiting output`
 =================== 
`acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}`
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Acquiring suspend blocker "{blocker}".``
 =================== 
`setWiredDeviceConnectionState  type: {type}  state: {state}`
 =================== 
``acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``setWiredDeviceConnectionState  type: {type}  state: {state}``
 =================== 
``release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``{action}``
 =================== 
``ActivityManagerService,{action},callingPid = {pid}``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {additional_info}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``{action}``
 =================== 
``{action}`` isMusicActive...
 =================== 
`{action}...`
 =================== 
``getLastAudibleStreamVolume  treamType: {streamType}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``cancelNotification,index:{index}``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {limiting_output}``
 =================== 
`{method}: caller {callerId} does not hold {permission}; limiting output`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {limiting_output}``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {limiting_output}``
 =================== 
`{method}: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getLastAudibleStreamVolume  treamType: {streamType}`
 =================== 
``getLastAudibleStreamVolume  treamType: {streamType}``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {limiting_output}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``getDevicesForStream  streamType: {streamType}``
 =================== 
``getLastAudibleStreamVolume  treamType: {streamType}``
 =================== 
``getDevicesForStream  streamType: {streamType}``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {limiting_output}``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {additional_info}``
 =================== 
``getLastAudibleStreamVolume  treamType: {streamType}``
 =================== 
``getLastAudibleStreamVolume  treamType: {streamType}``
 =================== 
``getLastAudibleStreamVolume  treamType: {streamType}``
 =================== 
``getLastAudibleStreamVolume  treamType: {streamType}``
 =================== 
``getLastAudibleStreamVolume  treamType: {streamType}``
 =================== 
``cleanUpApplicationRecord -- {recordId}``
 =================== 
``{action}, pid: {pid}, restart: {restart}``
 =================== 
`cleanUpApplicationRecordLocked, reset pid: {pid}, euid: {euid}`
 =================== 
``{action} record.mWifiDisplayScanRequested={value}``
 =================== 
`stopWifiDisplayScanLocked mWifiDisplayScanRequestCount={count}`
 =================== 
``{action}Mode...``
 =================== 
``setSpeakerphoneOn  on: {value}``
 =================== 
``setSpeakerphoneOn on:{value}``
 =================== 
`{method}: caller {caller} does not hold {permission}; limiting output`
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {limiting_output}``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {limiting_output}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``Releasing suspend blocker "{blocker}".``
 =================== 
``sending alarm Alarm{${alarmId} type ${alarmType} when ${timestamp} PendingIntent{${pendingIntentId}: PendingIntentRecord{${recordId} android broadcastIntent}}},repeatInterval = ${repeatInterval},listenerTag =${listenerTag}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
``Acquiring suspend blocker "{blocker}".``
 =================== 
``Received {ALARM_TYPE} alarm; {ACTION}``
 =================== 
``scheduleTimeTickEvent triggerAtTime = {time}``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``{functionName} isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``received broadcast {action}``
 =================== 
`{eventName}`
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``Releasing suspend blocker "{blocker}".``
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
`setLightsOn({boolean})`
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
`setLightsOn({boolean})`
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
`{method}: caller {caller} does not hold {permission}; limiting output`
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {limiting_output}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``playSoundEffect   effectType: {effectType}``
 =================== 
``{action}SoundEffectsEnabled...``
 =================== 
`{method}: caller {caller} does not hold {permission}; limiting output`
 =================== 
`Destroying surface Surface(name={surface_name}) called by {caller_method}`
 =================== 
`setLightsOn({boolean})`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {limiting_output}``
 =================== 
``Destroying surface Surface(name={surfaceName}) called by {callerMethod}```
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
`setLightsOn({boolean})`
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``{functionName}({parameter})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``{functionName}: caller {callerId} does not hold {permissionType}; {errorMessage}``
 =================== 
``getTasks: caller {callerId} does not hold {permission}; limiting output``
 =================== 
`getTasks: caller {callerId} does not hold {permission}; limiting output`
 =================== 
`getTasks: caller {callerId} does not hold {permission}; limiting output`
 =================== 
``{functionName}: caller {callerId} does not hold {permissionType}; {errorMessage}``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {additional_info}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``{functionName}({parameter})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``{functionName}({parameter})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
`Destroying surface Surface(name={surface_name}) called by {caller_method}:{line_number} {caller_method}:{line_number} {caller_method}:{line_number} {caller_method}:{line_number} {caller_method}:{line_number} {caller_method}:{line_number} {caller_method}:{line_number}`
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``Destroying surface Surface(name={surfaceName}) called by {callerMethod}:{lineNumber} {callerMethod}:{lineNumber} {callerMethod}:{lineNumber} {callerMethod}:{lineNumber} {callerMethod}:{lineNumber} {callerMethod}:{lineNumber} {callerMethod}:{lineNumber}``
 =================== 
``{functionName}({parameter})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {additional_info}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``{functionName}({parameter})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
`setLightsOn({boolean})`
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}``
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
``Acquiring suspend blocker "{blocker}".``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`{action} running ...`
 =================== 
``shouldBlockLocation  ret:{boolean}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
`{action} running ...`
 =================== 
`shouldBlockLocation  ret:{boolean}`
 =================== 
``{methodName} calling app is {appName}``
 =================== 
``{action} running ...``
 =================== 
``shouldBlockLocation  ret:{boolean}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Releasing suspend blocker "{blocker}".``
 =================== 
``{action} running ...``
 =================== 
``shouldBlockLocation  ret:{boolean}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Acquiring suspend blocker "{suspend_blocker}".``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``Releasing suspend blocker "{blocker}".``
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
``Acquiring suspend blocker "{blocker}".``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Releasing suspend blocker "{blocker}".``
 =================== 
``{action} running ...``
 =================== 
``shouldBlockLocation  ret:{boolean}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``{functionName}: caller {callerId} does not hold {permissionType}; {errorMessage}``
 =================== 
`getTasks: caller {callerId} does not hold {permission}; limiting output`
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
`Destroying surface Surface(name={surface_name}) called by {caller_method}`
 =================== 
`setLightsOn({boolean})`
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
`Destroying surface Surface(name={surfaceName}) called by {callerMethod}`
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}```
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
`setLightsOn({boolean})`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``{functionName}({parameter})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {additional_info}``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
`setLightsOn({boolean})`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
`setLightsOn({boolean})`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
`setLightsOn({boolean})`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
`setLightsOn({boolean})`
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
`{method}: caller {caller_id} does not hold {permission}; limiting output`
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``{action}``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``{functionName}({parameter})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``playSoundEffect   effectType: {effectType}``
 =================== 
``{action}...``
 =================== 
`Destroying surface Surface(name={surface_name}) called by {caller_method}`
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``Destroying surface Surface(name={surfaceName}) called by {callerMethod}```
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; limiting output``
 =================== 
``{functionName}: caller {callerId} does not hold {permissionType}; {errorMessage}``
 =================== 
``getTasks: caller {callerId} does not hold {permission}; limiting output``
 =================== 
``{functionName}: caller {callerId} does not hold {permissionType}; {errorMessage}``
 =================== 
``{functionName}: caller {callerId} does not hold {permissionType}; {errorMessage}``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {message}``
 =================== 
``{action}``
 =================== 
``sending alarm Alarm{<id> type <type> when <timestamp> PendingIntent{<pendingIntentId>: PendingIntentRecord{<recordId> <packageName> <intentType>}}},repeatInterval = <repeatInterval>,listenerTag =<listenerTag>`
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Acquiring suspend blocker "{blocker}".``
 =================== 
``Killing {pid}:{process}/{user} (adj {adj}): empty for {duration}s``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Releasing suspend blocker "{blocker}".``
 =================== 
``{action} record.mWifiDisplayScanRequested={value}``
 =================== 
`stopWifiDisplayScanLocked mWifiDisplayScanRequestCount={count}`
 =================== 
``cleanUpApplicationRecord -- {recordId}``
 =================== 
`{action}, pid: {pid}, restart: {restart}`
 =================== 
`cleanUpApplicationRecordLocked, reset pid: {pid}, euid: {euid}`
 =================== 
``{action} record.mWifiDisplayScanRequested={value}``
 =================== 
`stopWifiDisplayScanLocked mWifiDisplayScanRequestCount={count}`
 =================== 
``cleanUpApplicationRecord -- {recordId}``
 =================== 
`cleanUpApplicationRecordLocked, pid: {pid}, restart: {restart}`
 =================== 
`cleanUpApplicationRecordLocked, reset pid: {pid}, euid: {euid}`
 =================== 
``{action} record.mWifiDisplayScanRequested={value}``
 =================== 
``{methodName} mWifiDisplayScanRequestCount={count}``
 =================== 
``cleanUpApplicationRecord -- {recordId}``
 =================== 
``{action}, pid: {pid}, restart: {restart}``
 =================== 
`cleanUpApplicationRecordLocked, reset pid: {pid}, euid: {euid}`
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}```
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
`HBM brightnessOut ={value}`
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
`{method}: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getTasks: caller {callerId} does not hold {permission}; limiting output`
 =================== 
``getTasks: caller {callerId} does not hold {permission}; limiting output``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {message}``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {message}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {additional_info}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``{action}`` isMusicActive...
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {limiting_output}``
 =================== 
`{method}: caller {caller} does not hold {permission}; limiting output`
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {additional_info}``
 =================== 
``{action}`` isMusicActive...
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Acquiring suspend blocker "{blocker}".``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``Releasing suspend blocker "{blocker}".``
 =================== 
`HBM brightnessIn ={value}`
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``sending alarm Alarm{${alarmId} type ${alarmType} when ${timestamp} PendingIntent{${pendingIntentId}: PendingIntentRecord{${recordId} android broadcastIntent}}},repeatInterval = ${repeatInterval},listenerTag = ${listenerTag}`
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Acquiring suspend blocker "{blocker}".``
 =================== 
``Received {event} alarm; {action}``
 =================== 
``scheduleTimeTickEvent triggerAtTime = {time}``
 =================== 
``{functionName} isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``update{Action}ActivatedHide{Attribute} overlap:{Boolean}``
 =================== 
``{action} isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``update{Action}ActivatedHide{Attribute} overlap:{Boolean}``
 =================== 
``received broadcast {action}``
 =================== 
`{handleTimeUpdate}`
 =================== 
`{method}: caller {caller_id} does not hold {permission}; {additional_info}`
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Releasing suspend blocker "{blocker}".``
 =================== 
``acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Acquiring suspend blocker "{blocker}".``
 =================== 
``remove(PendingIntent{<placeholder1>: PendingIntentRecord{<placeholder2> <placeholder3> <placeholder4>}}) changed bounds; rebatching``
 =================== 
``release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Releasing suspend blocker "{blocker}".``
 =================== 
`{method}: caller {caller} does not hold {permission}; limiting output`
 =================== 
``acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``Acquiring suspend blocker "{blocker}".``
 =================== 
``acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
`{action} running ...`
 =================== 
``shouldBlockLocation  ret:{boolean}```
 =================== 
`{action} running ...`
 =================== 
`shouldBlockLocation  ret:{boolean}`
 =================== 
``release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Releasing suspend blocker "{blocker}".``
 =================== 
``{action} calling app is {app}``
 =================== 
``{action} running ...``
 =================== 
``shouldBlockLocation  ret:{boolean}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Acquiring suspend blocker "{blocker}".``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Releasing suspend blocker "{blocker}".``
 =================== 
``{action} running ...``
 =================== 
``shouldBlockLocation  ret:{boolean}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Acquiring suspend blocker "{blocker}".``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Releasing suspend blocker "{blocker}".``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``Acquiring suspend blocker "{blocker}".``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Releasing suspend blocker "{blocker}".``
 =================== 
`{action} running ...`
 =================== 
`shouldBlockLocation  ret:{boolean}`
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``Unable to start service Intent { act={action} cmp={component} U={user_id}: not found``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Acquiring suspend blocker "{blocker}".``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {limiting_output}``
 =================== 
`{method}: caller {caller} does not hold {permission}; limiting output`
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Releasing suspend blocker "{blocker}".``
 =================== 
``acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``Acquiring suspend blocker "{blocker}".``
 =================== 
``release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Releasing suspend blocker "{blocker}".``
 =================== 
``acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}``
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
``Acquiring suspend blocker "{blocker}".``
 =================== 
``acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}``
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``{action} running ...``
 =================== 
``shouldBlockLocation  ret:{boolean}``
 =================== 
``{action} running ...``
 =================== 
``shouldBlockLocation  ret:{boolean}``
 =================== 
``{action} calling app is {app}``
 =================== 
`{action} running ...`
 =================== 
``shouldBlockLocation  ret:{boolean}``
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
``release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``Releasing suspend blocker "{blocker}".``
 =================== 
`{action} running ...`
 =================== 
`shouldBlockLocation  ret:{boolean}`
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
``Acquiring suspend blocker "{blocker}".``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Releasing suspend blocker "{blocker}".``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``Acquiring suspend blocker "{blocker}".``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Releasing suspend blocker "{blocker}".``
 =================== 
``{action} running ...``
 =================== 
`shouldBlockLocation  ret:{boolean}`
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}``
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
``Acquiring suspend blocker "{blocker}".``
 =================== 
``acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``{action} running ...``
 =================== 
``shouldBlockLocation  ret:{boolean}```
 =================== 
``{action} running ...``
 =================== 
``shouldBlockLocation  ret:{boolean}``
 =================== 
``release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Releasing suspend blocker "{blocker}".``
 =================== 
``getNeighboringCellInfo calling app is {callingApp}``
 =================== 
`{action} running ...`
 =================== 
``shouldBlockLocation  ret:{boolean}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Acquiring suspend blocker "{blocker}".``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Releasing suspend blocker "{blocker}".``
 =================== 
`{action} running ...`
 =================== 
``shouldBlockLocation  ret:{boolean}``
 =================== 
``{action} running ...``
 =================== 
``shouldBlockLocation  ret:{boolean}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {additional_info}``
 =================== 
``{action}...``
 =================== 
``{action}``
 =================== 
``[HSM] stayAwake {boolean} uid: {number}, pid: {number}``
 =================== 
``Pid:{pid} {component} destructor``
 =================== 
`{method}: caller {caller} does not hold {permission}; limiting output`
 =================== 
`{method}: caller {caller} does not hold {permission}; limiting output`
 =================== 
``{action} record.mWifiDisplayScanRequested={value}``
 =================== 
`stopWifiDisplayScanLocked mWifiDisplayScanRequestCount={count}`
 =================== 
`Process {processName} (pid {pid}) has died`
 =================== 
``cleanUpApplicationRecord -- {recordId}``
 =================== 
``Scheduling restart of crashed service {package}/{service} in {time}ms``
 =================== 
`cleanUpApplicationRecordLocked, pid: {pid}, restart: {restart}`
 =================== 
`cleanUpApplicationRecordLocked, reset pid: {pid}, euid: {euid}`
 =================== 
`getTasks: caller {callerId} does not hold {permission}; limiting output`
 =================== 
``{action}`` isMusicActive...
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``new Process app=ProcessRecord{${pid} 0:${packageName}:${processName}/${userId}}, name: ${packageName}:${processName}, euid: ${euid}``
 =================== 
``Start proc {pid}:{processName}:{userId} for service {serviceName}``
 =================== 
``ActivityManagerService,{action},callingPid = {pid}``
 =================== 
`{method}: caller {caller} does not hold {permission}; {additional_info}`
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {additional_info}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}```
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {limiting_output}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {message}``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {limiting_output}``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {message}``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {limiting_output}``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {additional_info}``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {additional_info}``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {limiting_output}``
 =================== 
``{method}: caller {callerId} does not hold {permission}; {message}``
 =================== 
``{method}: caller {callerId} does not hold {permission}; {message}``
 =================== 
``{method}: caller {callerId} does not hold {permission}; {message}``
 =================== 
``{method}: caller {callerId} does not hold {permission}; {message}``
 =================== 
``{method}: caller {callerId} does not hold {permission}; {message}``
 =================== 
`{method}: caller {callerId} does not hold {permission}; limiting output`
 =================== 
`{method}: caller {caller} does not hold {permission}; limiting output`
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
`{functionName}: caller {callerId} does not hold {permissionType}; {limitingAction}`
 =================== 
`{functionName}: caller {callerId} does not hold {permissionType}; {limitingAction}`
 =================== 
``getTasks: caller {callerId} does not hold {permission}; limiting output``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {additional_info}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
`{action}`
 =================== 
`interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}`
 =================== 
``interceptKeyBeforeQueueing: key {key} , result : {result}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Destroying surface Surface(name={surfaceName}) called by {callerMethod} {callerMethod} {callerMethod} {callerMethod} {callerMethod} {callerMethod} {callerMethod}``
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
`{action}`
 =================== 
``interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}``
 =================== 
``interceptKeyBeforeQueueing: key {key} , result : {result}``
 =================== 
``{action}SoundEffectsEnabled...``
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``Destroying surface Surface(name={name}) called by {caller} com.android.server.wm.WindowStateAnimator.destroySurface:{lineNumber} com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:{lineNumber} com.android.server.wm.WindowState.destroyOrSaveSurface:{lineNumber} com.android.server.wm.WindowSurfacePlacer.performSurfacePlacementInner:{lineNumber} com.android.server.wm.WindowSurfacePlacer.performSurfacePlacementLoop:{lineNumber} com.android.server.wm.WindowSurfacePlacer.performSurfacePlacement:{lineNumber} com.android.server.wm.WindowManagerSe``
 =================== 
`{action}`
 =================== 
`interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}`
 =================== 
`interceptKeyBeforeQueueing: key {key} , result : {result}`
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``{action}``
 =================== 
``interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}``
 =================== 
``interceptKeyBeforeQueueing: key {key} , result : {result}``
 =================== 
``{action}SoundEffectsEnabled...``
 =================== 
``{action}`` isMusicActive...
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
`{action}`
 =================== 
`interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}`
 =================== 
``interceptKeyBeforeQueueing: key {key} , result : {result}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
`{action}`
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}``
 =================== 
``interceptKeyBeforeQueueing: key {key} , result : {result}``
 =================== 
`{action}...`
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``animateCollapsePanels:flags={flags}, force={force}, delayed={delayed}, mExpandedVisible={mExpandedVisible}``
 =================== 
``{action}``
 =================== 
``cancelPeek: {boolean}``
 =================== 
`{logMessage}`
 =================== 
``cancelPeek: {boolean}``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws=WorkSource{ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Acquiring suspend blocker "{blocker}".``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``Taking screenshot from Surface with crop:[{Rect}], width:[{width}], height:[{height}], minLayer:[{minLayer}], maxLayer:[{maxLayer}], inRotation:[{inRotation}], rot:[{rotation}]``
 =================== 
``The change in {variable1} caused us to need to do a {variable2} begin``
 =================== 
``The change in {variable1} caused us to need to do a {variable2} end``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
`{action}`
 =================== 
`notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}`
 =================== 
``{functionName} isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``Skipping, withExcluded: {excluded}, tr.intent:Intent { flg={flag} cmp={component} bnds=[{bound1},{bound2}][{bound3},{bound4}] }``
 =================== 
`Skipping, withExcluded: {excluded}, tr.intent:Intent { act={action} flg={flags} cmp={component} (has extras) }`
 =================== 
`Skipping, withExcluded: {excluded}, tr.intent:Intent { flg={flag} cmp={component} (has extras) }`
 =================== 
``Skipping, withExcluded: {excluded}, tr.intent:Intent { flg={flag} cmp={component} (has extras) }``
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={action} dat={data} flg={flags} cmp={component} (has extras) }`
 =================== 
`Skipping, withExcluded: {excluded}, tr.intent:Intent { act={action} dat={data} typ={type} flg={flags} cmp={component} (has extras) }`
 =================== 
`getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}`
 =================== 
`getRecentTasks: topActivity=ComponentInfo{${packageName}/${activityName}}`
 =================== 
`Skipping, withExcluded: {excluded}, tr.intent:Intent { flg={flag} cmp={component} bnds=[{bound1},{bound2}][{bound3},{bound4}] }`
 =================== 
``Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={action} flg={flags} cmp={component} (has extras) }``
 =================== 
`Skipping, withExcluded: {excluded}, tr.intent:Intent { flg={flag} cmp={component} (has extras) }`
 =================== 
``getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}``
 =================== 
``getRecentTasks: topActivity=ComponentInfo{${packageName}/${activityName}}``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
`{action}`
 =================== 
``notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}``
 =================== 
``release:lock={lock}, flg={flg}, tag="{tag}", name={name}, ws=WorkSource{ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Releasing suspend blocker "{blocker}".``
 =================== 
``{action} running ...``
 =================== 
``shouldBlockLocation  ret:{boolean}```
 =================== 
`{method}: caller {caller} does not hold {permission}; limiting output`
 =================== 
`getTasks: caller {callerId} does not hold {permission}; limiting output`
 =================== 
`ActivityManagerService,{methodName},callingPid = {pid}`
 =================== 
``{functionName}: caller {callerId} does not hold {permission}; {message}``
 =================== 
``{action} running ...``
 =================== 
``shouldBlockLocation  ret:{boolean}``
 =================== 
``Destroying surface Surface(name={app_package}/{activity_name}) called by {caller_method}```
 =================== 
``{method}: caller {callerId} does not hold {permission}; {message}``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {additional_info}``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {additional_info}``
 =================== 
``{method}`: caller {caller_id} does not hold {permission}; limiting output``
 =================== 
``{action} running ...``
 =================== 
``shouldBlockLocation  ret:{boolean}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Acquiring suspend blocker "{blocker}".``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Releasing suspend blocker "{blocker}".``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Acquiring suspend blocker "{blocker}".``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Releasing suspend blocker "{blocker}".``
 =================== 
``{action} running ...``
 =================== 
``shouldBlockLocation  ret:{boolean}```
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {additional_info}``
 =================== 
`{method}: caller {caller} does not hold {permission}; limiting output`
 =================== 
`{action} running ...`
 =================== 
``shouldBlockLocation  ret:{boolean}``
 =================== 
``{action} running ...``
 =================== 
``shouldBlockLocation  ret:{boolean}``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {additional_info}``
 =================== 
``{action} record.mWifiDisplayScanRequested={value}``
 =================== 
`stopWifiDisplayScanLocked mWifiDisplayScanRequestCount={count}`
 =================== 
``cleanUpApplicationRecord -- {recordId}``
 =================== 
`{action}, pid: {pid}, restart: {restart}`
 =================== 
`cleanUpApplicationRecordLocked, reset pid: {pid}, euid: {euid}`
 =================== 
``{action} running ...``
 =================== 
``shouldBlockLocation  ret:{boolean}```
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
`HBM brightnessIn ={value}`
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``{action} running ...``
 =================== 
``shouldBlockLocation  ret:{boolean}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``{functionName}: caller {callerId} does not hold {permissionType}; {errorMessage}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``{functionName}: caller {callerId} does not hold {permissionType}; {errorMessage}``
 =================== 
``cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}``
 =================== 
``cancelNotification,index:{index}``
 =================== 
``cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}``
 =================== 
``cancelNotification,index:{index}``
 =================== 
`enqueueNotificationInternal: pkg={pkg} id={id} notification=Notification(pri={pri} contentView={contentView} vibrate={vibrate} sound={sound} tick defaults={defaults} flags={flags} color={color} vis={vis})`
 =================== 
``enqueueNotificationInternal: n.getKey = {key}|{app}|{userId}|{extraInfo}|{notificationId}``
 =================== 
`{methodName}...`
 =================== 
``updateLightsLocked,mInCall ={mInCall},mScreenOn = {mScreenOn},ledNotification == null?{ledNotification}``
 =================== 
``{methodName},{action}``
 =================== 
``addNotification key={key}|{app_id}|{user_id}|{message}|{notification_id}``
 =================== 
`{variable}`
 =================== 
``disable: < expand {ICONS*} alerts {SYSTEM_INFO*} back home recent clock navigationbar search quick_settings >``
 =================== 
`{action}`
 =================== 
``updateNotificationShade: total={total}, active={active}``
 =================== 
`{action}`
 =================== 
``updateNotificationShade: total={total}, active={active}``
 =================== 
`{action}`
 =================== 
``Marking notification as seen {seen_status}|{app_id}|{user_id}|{notification_id}|{timestamp}``
 =================== 
`{functionName} called`
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
`{method}: caller {caller} does not hold {permission}; limiting output`
 =================== 
``{functionName} isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``{functionName} {action} {executionType}``
 =================== 
``{method} called``
 =================== 
``{functionName} runInThread {action}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``playSoundEffect   effectType: {effectType}``
 =================== 
``{action}SoundEffectsEnabled...``
 =================== 
``START u0 {act=<action> cat=<category> flg=<flags> cmp=<component> bnds=<bounds>} from uid <uid> on display <display>`
 =================== 
``ActivityRecord info: ActivityInfo{<packageName> <activityName>}, euid: <euid>``
 =================== 
``acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws=WorkSource{ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Acquiring suspend blocker "{blocker}".``
 =================== 
``rotationForOrientationLw(orient={orient}, last={last}); user={user} USER_ROTATION_LOCKED``
 =================== 
``Application requested orientation {orientation}, got rotation {rotation} which has compatible metrics``
 =================== 
``The change in {variable1} caused us to need to do a {variable2} begin``
 =================== 
``The change in {variable1} caused us to need to do a {variable2} end``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``{action}``
 =================== 
``notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}``
 =================== 
`Skipping, withExcluded: {excluded}, tr.intent:Intent { flg={flag} cmp={component} bnds=[{bound1},{bound2}][{bound3},{bound4}] }`
 =================== 
``Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={action} flg={flags} cmp={component} (has extras) }``
 =================== 
``Skipping, withExcluded: {excluded}, tr.intent:Intent { flg={flag} cmp={component} (has extras) }``
 =================== 
``Skipping, withExcluded: {excluded}, tr.intent:Intent { flg={flag} cmp={component} (has extras) }``
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={action} dat={data} flg={flags} cmp={component} (has extras) }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act=android.intent.action.VIEW dat={data} typ={type} flg={flags} cmp={component} (has extras) }`
 =================== 
``getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}``
 =================== 
`getRecentTasks: topActivity=ComponentInfo{${packageName}/${activityName}}`
 =================== 
``Skipping, withExcluded: {excluded}, tr.intent:Intent { flg={flag} cmp={component} bnds=[{bound1},{bound2}][{bound3},{bound4}] }``
 =================== 
``Skipping, withExcluded: {excluded}, tr.intent:Intent { act={action} flg={flags} cmp={component} (has extras) }``
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { flg={flg} cmp={component} (has extras) }`
 =================== 
``getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}``
 =================== 
`getRecentTasks: topActivity=ComponentInfo{${packageName}/${activityName}}`
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``{action}``
 =================== 
``notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}``
 =================== 
``release:lock={lock}, flg={flg}, tag="{tag}", name={name}, ws=WorkSource{ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``Releasing suspend blocker "{blocker}".``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``updateNotificationShade: total={total}, active={active}``
 =================== 
`{action}`
 =================== 
```
overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}
```
 =================== 
``state.clipTopAmount:{clipTopAmount}, i:{i}``
 =================== 
``{functionName} isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``updateDimmedActivatedHideSensitive overlap:{boolean}``
 =================== 
``ACTIVITY check resid: {package}, size={size}``
 =================== 
`{logMessage}`
 =================== 
``updateNotificationShade: total={total}, active={active}``
 =================== 
`{action}`
 =================== 
```
overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}
```
 =================== 
``state.clipTopAmount:{clipTopAmount}, i:{i}``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``updateDimmedActivatedHideSensitive overlap:{boolean}``
 =================== 
``makeExpandedInvisible: mExpandedVisible={visible}```
 =================== 
``{action}``
 =================== 
`cancelPeek: {cancelPeek}`
 =================== 
`{logMessage}`
 =================== 
``cancelPeek: {cancelPeek}``
 =================== 
`{action}Qs`
 =================== 
``{logLevel} {moduleName} {action}``
 =================== 
``{method} called``
 =================== 
`{action}`
 =================== 
``disable: < {features} >``
 =================== 
``{action} runInThread {status}``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``Destroying surface Surface(name={name}) called by {caller} com.android.server.wm.WindowStateAnimator.destroySurface:{lineNumber} com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:{lineNumber} com.android.server.wm.WindowState.destroyOrSaveSurface:{lineNumber} com.android.server.wm.AppWindowToken.destroySurfaces:{lineNumber} com.android.server.wm.WindowStateAnimator.finishExit:{lineNumber} com.android.server.wm.WindowStateAnimator.stepAnimationLocked:{lineNumber} com.android.server.wm.WindowAnimator.updateWindowsLocked:{lineNumber} com.and``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {limiting_output}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
`{method}: caller {caller_id} does not hold {permission}; limiting output`
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``playSoundEffect   effectType: {effectType}``
 =================== 
``{action}SoundEffectsEnabled...``
 =================== 
``Destroying surface Surface(name={surfaceName}) called by {callerMethod}```
 =================== 
``ActivityManagerService,{action},callingPid = {pid}``
 =================== 
``Destroying surface Surface(name={name}) called by {caller} com.android.server.wm.WindowStateAnimator.destroySurface:{line} com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:{line} com.android.server.wm.WindowState.destroyOrSaveSurface:{line} com.android.server.wm.WindowSurfacePlacer.performSurfacePlacementInner:{line} com.android.server.wm.WindowSurfacePlacer.performSurfacePlacementLoop:{line} com.android.server.wm.WindowSurfacePlacer.performSurfacePlacement:{line} com.android.server.wm.WindowManagerSe``
 =================== 
``ACTIVITY check resid: {package}, size={size}``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
`{action}`
 =================== 
``interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}``
 =================== 
`interceptKeyBeforeQueueing: key {key} , result : {result}`
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
`{action}`
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
`interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}`
 =================== 
``interceptKeyBeforeQueueing: key {key} , result : {result}``
 =================== 
``{logMessage}``
 =================== 
``animateCollapsePanels:flags={flags}, force={force}, delayed={delayed}, mExpandedVisible={mExpandedVisible}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``{action}``
 =================== 
`cancelPeek: {cancelPeek}`
 =================== 
`{logMessage}`
 =================== 
``cancelPeek: {cancelPeek}``
 =================== 
``acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws=WorkSource{ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Acquiring suspend blocker "{blocker}".``
 =================== 
``rotationForOrientationLw(orient={orient}, last={last}); user={user} USER_ROTATION_LOCKED``
 =================== 
``Application requested orientation {orientation}, got rotation {rotation} which has compatible metrics``
 =================== 
``Taking screenshot from Surface with crop:[{Rect}], width:[{width}], height:[{height}], minLayer:[{minLayer}], maxLayer:[{maxLayer}], inRotation:[{inRotation}], rot:[{rotation}]``
 =================== 
``The change in {variable1} caused us to need to do a {variable2} begin``
 =================== 
``The change in {variable1} caused us to need to do a {variable2} end``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
`{action}`
 =================== 
``notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``Skipping, withExcluded: {excluded}, tr.intent:Intent { flg={flag} cmp={component} bnds=[{bound1},{bound2}][{bound3},{bound4}] }``
 =================== 
``Skipping, withExcluded: {excluded}, tr.intent:Intent { act={action} flg={flags} cmp={component} (has extras) }``
 =================== 
`Skipping, withExcluded: {excluded}, tr.intent:Intent { flg={flag} cmp={component} (has extras) }`
 =================== 
`Skipping, withExcluded: {excluded}, tr.intent:Intent { flg={flag} cmp={component} (has extras) }`
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={action} dat={data} flg={flags} cmp={component} (has extras) }`
 =================== 
``Skipping, withExcluded: {excluded}, tr.intent:Intent { act={action} dat={data} typ={type} flg={flags} cmp={component} (has extras) }``
 =================== 
`getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}`
 =================== 
``getRecentTasks: topActivity=ComponentInfo{${packageName}/${activityName}}``
 =================== 
`Skipping, withExcluded: {excluded}, tr.intent:Intent { flg={flag} cmp={component} bnds=[{bound1},{bound2}][{bound3},{bound4}] }`
 =================== 
``Skipping, withExcluded: {excluded}, tr.intent:Intent { act={action} flg={flags} cmp={component} (has extras) }``
 =================== 
`Skipping, withExcluded: {excluded}, tr.intent:Intent { flg={flag} cmp={component} (has extras) }`
 =================== 
``getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}``
 =================== 
``getRecentTasks: topActivity=ComponentInfo{${packageName}/${activityName}}``
 =================== 
``getTasks: caller {callerId} does not hold {permission}; limiting output``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``{action}``
 =================== 
``notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}``
 =================== 
``{functionName}: caller {callerId} does not hold {permissionName}; {limitingOutput}``
 =================== 
``release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws=WorkSource{ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Releasing suspend blocker "{blocker}".``
 =================== 
`Destroying surface Surface(name={surfaceName}) called by {caller}`
 =================== 
`Destroying surface Surface(name={surfaceName}) called by {caller}`
 =================== 
``getTasks: caller {callerId} does not hold {permission}; limiting output``
 =================== 
``{functionName}: caller {callerId} does not hold {permissionType}; {limitingAction}``
 =================== 
``{methodName}...``
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
`{action}`
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
`interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}`
 =================== 
`interceptKeyBeforeQueueing: key {key} , result : {result}`
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
`{action}`
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}``
 =================== 
`interceptKeyBeforeQueueing: key {key} , result : {result}`
 =================== 
``{action}SoundEffectsEnabled...``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``animateCollapsePanels:flags={flags}, force={force}, delayed={delayed}, mExpandedVisible={mExpandedVisible}``
 =================== 
`{action}`
 =================== 
`cancelPeek: {cancelPeek}`
 =================== 
`{logMessage}`
 =================== 
``cancelPeek: {cancelPeek}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``playSoundEffect   effectType: {effectType}``
 =================== 
``{action}SoundEffectsEnabled...``
 =================== 
``START u0 {act=<action> cat=<category> flg=<flags> cmp=<component> bnds=<bounds>} from uid <uid> on display <display>`
 =================== 
``ActivityRecord info: ActivityInfo{<activityInfo>}, euid: <euid>``
 =================== 
``acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws=WorkSource{{ws}}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Acquiring suspend blocker "{blocker}".``
 =================== 
``The change in {variable1} caused us to need to do a {variable2} begin``
 =================== 
``The change in {variable1} caused us to need to do a {variable2} end``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``update{Action}ActivatedHide{Attribute} overlap:{Boolean}``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
`{action}`
 =================== 
``notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}``
 =================== 
``{functionName}({parameter})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``Skipping, withExcluded: {excluded}, tr.intent:Intent { flg={flag} cmp={component} bnds=[{bound1},{bound2}][{bound3},{bound4}] }``
 =================== 
``Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={action} flg={flags} cmp={component} (has extras) }``
 =================== 
`Skipping, withExcluded: {excluded}, tr.intent:{intent}`
 =================== 
`Skipping, withExcluded: {excluded}, tr.intent:Intent { flg={flag} cmp={component} (has extras) }`
 =================== 
``Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={action} dat={data} flg={flags} cmp={component} (has extras) }``
 =================== 
``Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act=android.intent.action.VIEW dat={data} typ={type} flg={flags} cmp={component} (has extras) }``
 =================== 
``getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}``
 =================== 
`getRecentTasks: topActivity=ComponentInfo{${packageName}/${activityName}}`
 =================== 
`Skipping, withExcluded: {excluded}, tr.intent:Intent { flg={flag} cmp={component} bnds=[{bound1},{bound2}][{bound3},{bound4}] }`
 =================== 
`Skipping, withExcluded: {excluded}, tr.intent:{intent}`
 =================== 
`Skipping, withExcluded: {excluded}, tr.intent:Intent { flg={flag} cmp={component} (has extras) }`
 =================== 
``getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}``
 =================== 
`getRecentTasks: topActivity=ComponentInfo{${packageName}/${activityName}}`
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}``
 =================== 
``{action},{index}``
 =================== 
`{action},{lockedAction},callingUid = {uid},callingPid = {pid}`
 =================== 
``{methodName} called, tell the {app}, reason = {reason}``
 =================== 
``cancelNotificationLocked:{int}|{string}|{int}|{string}|{int}``
 =================== 
``cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}``
 =================== 
``cancelNotificationLocked,remove ={packageName}``
 =================== 
``cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}``
 =================== 
``updateLightsLocked,mInCall ={mInCall},mScreenOn = {mScreenOn},ledNotification == null?{ledNotification}``
 =================== 
``{methodName},{action}``
 =================== 
``cancelNotification,index:{index}``
 =================== 
``cancelNotification,index:{index}``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``{action}``
 =================== 
``notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}``
 =================== 
``cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}``
 =================== 
``cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}``
 =================== 
``cancelNotification,index:{index}``
 =================== 
``cancelNotification,index:{index}``
 =================== 
``cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}``
 =================== 
``cancelNotification,index:{index}``
 =================== 
``cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}``
 =================== 
``cancelNotification,index:{index}``
 =================== 
``{action} running ...``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``removeNotification:{notificationId}|{packageName}|{userId}|{extraInfo}|{errorCode}``
 =================== 
``updateNotificationShade: total={total}, active={active}``
 =================== 
``cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}``
 =================== 
``cancelNotification,index:{index}``
 =================== 
``{action}``
 =================== 
``animateCollapsePanels:flags={flags}, force={force}, delayed={delayed}, mExpandedVisible={mExpandedVisible}``
 =================== 
``{action}``
 =================== 
`cancelPeek: {cancelPeek}`
 =================== 
`{logMessage}`
 =================== 
`cancelPeek: {cancelPeek}`
 =================== 
``release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws=WorkSource{ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Releasing suspend blocker "{blocker}".``
 =================== 
``{action} isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``{functionName}({parameter})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}``
 =================== 
``cancelNotification,index:{index}``
 =================== 
``shouldBlockLocation  ret:{boolean}``
 =================== 
`{methodName} is blocked by permission manager . callingPackage = {packageName}`
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``{functionName}({parameter})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``{functionName}: caller {callerId} does not hold {permissionType}; {errorMessage}``
 =================== 
``{functionName}: caller {callerId} does not hold {permissionType}; {errorMessage}``
 =================== 
``{action}`` isMusicActive...
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``playSoundEffect   effectType: {effectType}``
 =================== 
``{action}SoundEffectsEnabled...``
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``{action} running ...``
 =================== 
``shouldBlockLocation  ret:{boolean}``
 =================== 
``{methodName} is blocked by permission manager. callingPackage = {packageName}``
 =================== 
``{action} running ...``
 =================== 
``shouldBlockLocation  ret:{boolean}``
 =================== 
``{functionName} is blocked by permission manager uid:{uid} pid:{pid}``
 =================== 
`{method}: caller {caller} does not hold {permission}; limiting output`
 =================== 
``HBM brightnessIn ={value}```
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
`setLightsOn({boolean})`
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``{functionName}({parameter})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``{functionName}({parameter})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``{functionName}({parameter})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``{functionName}({parameter})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``{functionName}({parameter})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
`setLightsOn({boolean})`
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``{functionName}({parameter})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``{action} running ...``
 =================== 
``shouldBlockLocation  ret:{boolean}``
 =================== 
``{methodName} is blocked by permission manager . callingPackage = {packageName}```
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
`{method}: caller {callerId} does not hold {permission}; limiting output`
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {limiting_output}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
`setLightsOn({boolean})`
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {additional_info}``
 =================== 
``{functionName}: caller {callerId} does not hold {permissionType}; {errorMessage}``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``{action}`` isMusicActive...
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}```
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``{functionName}({parameter})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}```
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``sending alarm Alarm{${alarmId} type ${alarmType} when ${timestamp} PendingIntent{${pendingIntentId}: PendingIntentRecord{${pendingIntentRecordId} android broadcastIntent}}},repeatInterval = ${repeatInterval},listenerTag =${listenerTag}`
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``Acquiring suspend blocker "{blocker}".``
 =================== 
``Received {event} alarm; {action}``
 =================== 
``scheduleTimeTickEvent triggerAtTime = {time}``
 =================== 
``{action} isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``{functionName} isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``received broadcast {action}``
 =================== 
`{handleTimeUpdate}`
 =================== 
`HBM brightnessIn ={value}`
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``playSoundEffect   effectType: {effectType}``
 =================== 
``{action}SoundEffectsEnabled...``
 =================== 
`Destroying surface Surface(name={surface_name}) called by {caller_method}:2060 {caller_method_locked}:913 {remove_locked}:1554 {remove_window_inner_locked}:2739 {remove_window_inner_locked}:2702 {remove_window_locked}:2691 {window_manager_service_re}`
 =================== 
`{action}...`
 =================== 
``Destroying surface Surface(name={surface_name}) called by {caller_method}:{line_number} {caller_method}:{line_number} {caller_method}:{line_number} {caller_method}:{line_number} {caller_method}:{line_number} {caller_method}:{line_number} {caller_method}:{line_number}``
 =================== 
``acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}```
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setDataSource({int1}, {int2}, {long1})``
 =================== 
``{functionName}({parameter})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``getStreamVolume  treamType: {streamType}``
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}```
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
`userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}`
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``Destroying surface Surface(name={surface_name}) called by {caller_method}``
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
`setLightsOn({boolean})`
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``setLightsOn({boolean})``
 =================== 
`setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})`
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``Destroying surface Surface(name={name}) called by {caller} com.android.server.wm.WindowStateAnimator.destroySurface:{line_number} com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:{line_number} com.android.server.wm.WindowState.destroyOrSaveSurface:{line_number} com.android.server.wm.WindowSurfacePlacer.performSurfacePlacementInner:{line_number} com.android.server.wm.WindowSurfacePlacer.performSurfacePlacementLoop:{line_number} com.android.server.wm.WindowSurfacePlacer.performSurfacePlacement:{line_number} com.android.server.wm.WindowManagerSe``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
`playSoundEffect   effectType: {effectType}`
 =================== 
``{functionName}...``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
`HBM brightnessIn ={value}`
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``updateIsPoweredLocked: wasPowered={}, mIsPowered={}, oldPlugType={}, mPlugType={}, mBatteryLevel={}``
 =================== 
``received broadcast {action}``
 =================== 
``ACTION_BATTERY_CHANGED AMP: {amp}; Volt: {volt}``
 =================== 
``updateChargingLocked: charging={charging}``
 =================== 
``onReceive, action:{intentAction}``
 =================== 
``ACTION_BATTERY_CHANGED pluggedType: {pluggedType}``
 =================== 
``ApStaDisabledState what={what}``
 =================== 
``DefaultState what={what}``
 =================== 
``battery changed pluggedType: {pluggedType}``
 =================== 
``RefreshBatteryInfo isBatteryLow: {batteryLevel}``
 =================== 
``ChargingSpeed  Wattage: {wattage} ST: {start_time} --> {end_time}``
 =================== 
``handle{EventName}``
 =================== 
``RefreshBatteryInfo isBatteryLow: {batteryLevel}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``release:lock={lock}, flg={flg}, tag="{tag}", name={name}", ws={ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Releasing suspend blocker "{blocker}".``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
`{method}: caller {callerId} does not hold {permission}; {additionalInfo}`
 =================== 
`{method}: caller {caller} does not hold {permission}; limiting output`
 =================== 
`HBM brightnessIn ={value}`
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
`{action}`
 =================== 
``interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}``
 =================== 
``interceptKeyBeforeQueueing: key {key} , result : {result}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``{action}``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``interceptKeyTq keycode={keycode} interactive={interactive} keyguardActive={keyguardActive} policyFlags={policyFlags} down {down} canceled {canceled}``
 =================== 
`interceptKeyBeforeQueueing: key {key} , result : {result}`
 =================== 
``{action}...``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``animateCollapsePanels:flags={flags}, force={force}, delayed={delayed}, mExpandedVisible={mExpandedVisible}``
 =================== 
`{action}Qs`
 =================== 
`cancelPeek: {cancelPeek}`
 =================== 
`{logMessage}`
 =================== 
``cancelPeek: {cancelPeek}``
 =================== 
`setLightsOn({boolean})`
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws=WorkSource{ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``Acquiring suspend blocker "{blocker}".``
 =================== 
``{functionName}({parameter})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``setLightsOn({boolean})``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
`{method}: caller {caller} does not hold {permission}; limiting output`
 =================== 
`setLightsOn({boolean})`
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``Taking screenshot from Surface with crop:[{Rect}], width:[{width}], height:[{height}], minLayer:[{minLayer}], maxLayer:[{maxLayer}], inRotation:[{inRotation}], rot:[{rotation}]``
 =================== 
``The change in {variable1} caused us to need to do a {variable2} begin``
 =================== 
``The change in {variable1} caused us to need to do a {variable2} end``
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``{action}``
 =================== 
``notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}``
 =================== 
``{functionName} isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``Skipping, withExcluded: {excluded}, tr.intent:Intent { flg={flag} cmp={component} bnds=[{left},{top}][{right},{bottom}] }``
 =================== 
``Skipping, withExcluded: {excluded}, tr.intent:Intent { act={action} flg={flags} cmp={component} (has extras) }``
 =================== 
``Skipping, withExcluded: {excluded}, tr.intent:Intent { flg={flag} cmp={component} (has extras) }``
 =================== 
``Skipping, withExcluded: {excluded}, tr.intent:Intent { flg={flag} cmp={component} (has extras) }``
 =================== 
`Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={action} dat={data} flg={flags} cmp={component} (has extras) }`
 =================== 
``Skipping, withExcluded: {excluded}, tr.intent:Intent { act={action} dat={data} typ={type} flg={flags} cmp={component} (has extras) }``
 =================== 
``getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}``
 =================== 
``getRecentTasks: topActivity=ComponentInfo{${packageName}/${activityName}}``
 =================== 
``Skipping, withExcluded: {excluded}, tr.intent:Intent { flg={flag} cmp={component} bnds=[{bound1},{bound2}][{bound3},{bound4}] }``
 =================== 
``Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={action} flg={flags} cmp={component} (has extras) }``
 =================== 
`Skipping, withExcluded: {excluded}, tr.intent:Intent { flg={flag} cmp={component} (has extras) }`
 =================== 
``getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}``
 =================== 
`getRecentTasks: topActivity=ComponentInfo{${packageName}/${activityName}}`
 =================== 
``setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left1}, {top1} - {right1}, {bottom1}), dockedStackBounds=Rect({left2}, {top2} - {right2}, {bottom2})``
 =================== 
``{action}``
 =================== 
``notifyUiVisibilityChanged:vis={vis}, SystemUiVisibility={SystemUiVisibility}``
 =================== 
``{methodName}...``
 =================== 
``release:lock={lock}, flg={flg}, tag="{tag}", name={name}, ws=WorkSource{ws}, uid={uid}, pid={pid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}``
 =================== 
``Releasing suspend blocker "{blocker}".``
 =================== 
`enqueueNotificationInternal: pkg={pkg} id={id} notification=Notification(pri={pri} contentView={contentView} vibrate={vibrate} sound={sound} tick defaults={defaults} flags={flags} color={color} category={category} vis={vis})`
 =================== 
``enqueueNotificationInternal: n.getKey = {key}|{packageName}|{id}|{tag}|{userId}``
 =================== 
``updateLightsLocked,mInCall ={mInCall},mScreenOn = {mScreenOn},ledNotification == null?{ledNotification}``
 =================== 
``{methodName},{action}``
 =================== 
``addNotification key={key}|{app_package}|{notification_id}|{extra_info}|{user_id}``
 =================== 
`{variable}`
 =================== 
`disable: < expand {ICONS*} alerts {SYSTEM_INFO*} back home recent clock navigationbar search quick_settings >`
 =================== 
`{action}`
 =================== 
``updateNotificationShade: total={total}, active={active}``
 =================== 
`{action}`
 =================== 
``updateNotificationShade: total={total}, active={active}``
 =================== 
`{action}`
 =================== 
``Marking notification as seen {number}|{app_name}|{notification_id}|{extra_info}|{user_id}``
 =================== 
``{functionName}: caller {callerId} does not hold {permissionName}; {limitingOutput}``
 =================== 
``{functionName}`: caller {callerId} does not hold {permissionName}; {errorMessage}`
 =================== 
``{functionName} called``
 =================== 
``Destroying surface Surface(name={app_package}/{activity_name}) called by {caller_method}``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``update{Action}ActivatedHide{Attribute} overlap:{Boolean}``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {limiting_output}``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
`{functionName}: caller {callerId} does not hold {permission}; {additionalInfo}`
 =================== 
``{functionName}: caller {callerId} does not hold {permissionType}; {errorMessage}``
 =================== 
``{functionName}: caller {callerId} does not hold {permissionType}; {errorMessage}``
 =================== 
``{functionName}: caller {callerId} does not hold {permissionType}; {errorMessage}``
 =================== 
``{functionName}: caller {callerId} does not hold {permissionType}; {errorMessage}``
 =================== 
``{method}: caller {caller_id} does not hold {permission}; {limiting_output}``
 =================== 
``sending alarm Alarm{<id> type <type> when <timestamp> PendingIntent{<pendingIntentId>: PendingIntentRecord{<recordId> <packageName> <intentType>}}},repeatInterval = <repeatInterval>,listenerTag =<listenerTag>`
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Acquiring suspend blocker "{blocker}".``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Releasing suspend blocker "{blocker}".``
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
``Acquiring suspend blocker "{blocker}".``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``{functionName} {action} {executionType}``
 =================== 
``{method} called``
 =================== 
``{action} runInThread {status}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
``Releasing suspend blocker "{blocker}".``
 =================== 
``userActivityNoUpdateLocked: eventTime={eventTime}, event={event}, flags={flags}, uid={uid}``
 =================== 
``ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}``
 =================== 
`onInterceptTouchEvent MotionEvent { action={action}, actionButton={actionButton}, id[0]={id[0]}, x[0]={x[0]}, y[0]={y[0]}, toolType[0]={toolType[0]}, buttonState={buttonState}, metaState={metaState}, flags={flags}, edgeFlags={edgeFlags}, pointerCount={pointerCount}, historySize={historySize}, eventTime={eventTime}, downTime={downTime}, deviceId={deviceId}, source={source} }, mBlockTouches={mBlockTouches}`
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``onInterceptTouchEvent MotionEvent { action={action}, actionButton={actionButton}, id[0]={id[0]}, x[0]={x[0]}, y[0]={y[0]}, toolType[0]={toolType[0]}, buttonState={buttonState}, metaState={metaState}, flags={flags}, edgeFlags={edgeFlags}, pointerCount={pointerCount}, historySize={historySize}, eventTime={eventTime}, downTime={downTime}, deviceId={deviceId}, source={source} }, mBlockTouches={mBlockTouches}`
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``playSoundEffect   effectType: {effectType}``
 =================== 
``{action}...``
 =================== 
``updateNotificationShade: total={total}, active={active}``
 =================== 
`{action}`
 =================== 
``animateCollapsePanels:flags={flags}, force={force}, delayed={delayed}, mExpandedVisible={mExpandedVisible}``
 =================== 
``{action}``
 =================== 
`cancelPeek: {cancelPeek}`
 =================== 
`{logMessage}`
 =================== 
`cancelPeek: {boolean}`
 =================== 
``updateNotificationShade: total={total}, active={active}``
 =================== 
`{action}`
 =================== 
``{action} runInThread {status}``
 =================== 
``{method} called``
 =================== 
``{functionName} runInThread {action}``
 =================== 
``START u0 {flg=<flg> cmp=<component>} from uid <uid> on display <display>``
 =================== 
``ActivityRecord info: ActivityInfo{<activity_info>}, euid: <euid>``
 =================== 
```
overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}
```
 =================== 
``state.clipTopAmount:{clipTopAmount}, i:{i}``
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``makeExpandedInvisible: mExpandedVisible={value}``
 =================== 
`{action}`
 =================== 
``cancelPeek: {cancelPeek}``
 =================== 
`{logMessage}`
 =================== 
`cancelPeek: {cancelPeek}`
 =================== 
``updateNotificationShade: total={total}, active={active}``
 =================== 
`{action}`
 =================== 
`{action}`
 =================== 
``startActivity called from {context}; forcing Intent.FLAG_ACTIVITY_NEW_TASK for: Intent { flg={flags} cmp={component} (has extras) }``
 =================== 
`{action}`
 =================== 
``disable: < {features} >``
 =================== 
```
overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}
```
 =================== 
``state.clipTopAmount:{clipTopAmount}, i:{i}``
 =================== 
``{functionName} isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``makeExpandedInvisible: mExpandedVisible={boolean}``
 =================== 
``acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws=WorkSource{{ws}}, uid={uid}, pid={pid}``
 =================== 
`ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj}userId={userId}`
 =================== 
``Acquiring suspend blocker "{blocker}".``
 =================== 
``{functionName} called``
 =================== 
`cancelNotification,index:{index}`
 =================== 
``applyOptionsLocked: Unknown animationType={value}``
 =================== 
`{method}: caller {caller} does not hold {permission}; limiting output`
 =================== 
`Skipping, withExcluded: {excluded}, tr.intent:Intent { flg={flag} cmp={component} bnds=[{bound1},{bound2}][{bound3},{bound4}] }`
 =================== 
``Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={action} flg={flags} cmp={component} (has extras) }``
 =================== 
``Skipping, withExcluded: {excluded}, tr.intent:Intent { flg={flag} cmp={component} (has extras) }``
 =================== 
`Skipping, withExcluded: {excluded}, tr.intent:Intent { flg={flag} cmp={component} (has extras) }`
 =================== 
``Skipping, withExcluded: {withExcluded}, tr.intent:Intent { act={action} dat={data} flg={flags} cmp={component} (has extras) }``
 =================== 
``Skipping, withExcluded: {excluded}, tr.intent:Intent { act=android.intent.action.VIEW dat={data} typ={type} flg={flags} cmp={component} (has extras) }``
 =================== 
``getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}``
 =================== 
`getRecentTasks: topActivity=ComponentInfo{${packageName}/${activityName}}`
 =================== 
``Skipping, withExcluded: {excluded}, tr.intent:Intent { flg={flag} cmp={component} bnds=[{bound1},{bound2}][{bound3},{bound4}] }``
 =================== 
``Skipping, withExcluded: {excluded}, tr.intent:Intent { act={action} flg={flags} cmp={component} (has extras) }``
 =================== 
``Skipping, withExcluded: {excluded}, tr.intent:Intent { flg={flag} cmp={component} (has extras) }``
 =================== 
`getRecentTasks: num={num},flags={flags},totalTasks={totalTasks}`
 =================== 
``getRecentTasks: topActivity=ComponentInfo{${packageName}/${activityName}}``
 =================== 
`{logMessage}`
 =================== 
``updateClipping isOverlap:{isOverlap}, getTopPadding={topPadding}, Translation={translation}``
 =================== 
``{action} overlap:{boolean}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
``HBM brightnessIn ={value}``
 =================== 
``HBM brightnessOut ={value}``
 =================== 
``Animating brightness: target={target}, rate={rate}``
 =================== 
