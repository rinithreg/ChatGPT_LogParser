printFreezingDisplayLogsopening app wtoken = AppWindowToken{9f4ef63 token=Token{a64f992 ActivityRecord{de9231d u0 com.tencent.qt.qtl/.activity.info.NewsDetailXmlActivity t761}}}, allDrawn= %b, startingDisplayed = %b, startingMoved = %b, isRelaunching = %b
 =================== 
acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}
 =================== 
ready={1},policy={2},wakefulness={3},wksummary={4},uasummary={5},bootcompleted={6},boostinprogress={7},waitmodeenable={8},mode={9},manual={10},auto={11},adj={12}userId={13}
 =================== 
Skipping AppWindowToken{token=Token{ActivityRecord{u0}}} -- going to hide
 =================== 
visible is {variable}.time.showampm
 =================== 
{functionName}.getValue is {value}
 =================== 
visible is {variable}
 =================== 
{functionName}.getValue is {value}
 =================== 
visible is {variable} gt {number}
 =================== 
{functionName}.getValue is {value}
 =================== 
visible is system.message.count gt 0
 =================== 
{action}.{property} is {value}
 =================== 
visible is {system}.{ownerinfo}.{show}
 =================== 
{methodName}.{property} is {value}
 =================== 
release:lock=?, flg=?, tag=?, name=?, ws=?, uid=?, pid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x23,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
Skipping AppWindowToken{token} -- going to hide
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
release:lock=?, flg=?, tag=?, name=?, ws=?, uid=?, pid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x23,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
setSystemUiVisibility vis=%vis% mask=%mask% oldVal=%oldVal% newVal=%newVal% diff=%diff% fullscreenStackVis=%fullscreenStackVis% dockedStackVis=%dockedStackVis% fullscreenStackBounds=%fullscreenStackBounds% dockedStackBounds=%dockedStackBounds%
 =================== 
cancelAutohide
 =================== 
notifyUiVisibilityChanged:vis=%vis%, SystemUiVisibility=%SystemUiVisibility%
 =================== 
Destroying surface Surface(name=%s) called by %s:%d %s:%d %s:%d %s:%d %s:%d <bottom of call stack> <bottom of call>
 =================== 
Destroying surface Surface(name={}) called by {}:{} {}:{} {}:{} {}:{} {}:{} {}:{} {}:{} {}:{}
 =================== 
release:lock=?, flg=?, tag=?, name=?, ws=?, uid=?, pid=?
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
orientation change is complete, call stopFreezingDisplayLocked
 =================== 
Screen frozen for +1s0ms due to Window{<window_id> <package_name>/<activity_name>}
 =================== 
startAnimation {action}
 =================== 
startAnimation end
 =================== 
release:lock=?, flg=?, tag=?, name=?, ws=?, uid=?, pid=?
 =================== 
ready={1},policy={2},wakefulness={3},wksummary={4},uasummary={5},bootcompleted={6},boostinprogress={7},waitmodeenable={8},mode={9},manual={10},auto={11},adj={12},userId={13}
 =================== 
remove({}) changed bounds; rebatching
 =================== 
rotationForOrientationLw(orient=?, last=?); user=? USER_ROTATION_LOCKED
 =================== 
Application requested orientation {orientation}, got rotation {rotation} which has compatible metrics
 =================== 
acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
getNeighboringCellInfo calling app is {calling_app}
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
release:lock=?, flg=?, tag=?, name=?, ws=?, uid=?, pid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
release:lock=?, flg=?, tag=?, name=?, ws=?, uid=?, pid=?
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
Releasing suspend blocker "{blocker_name}".
 =================== 
HBM brightnessIn ={brightness}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
suspendAutohide
 =================== 
interceptKeyTq keycode=%s interactive=%s keyguardActive=%s policyFlags=%s down %s canceled %s
 =================== 
interceptKeyBeforeQueueing: key {key} , result : {result}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
resumeSuspendedAutohide
 =================== 
interceptKeyTq keycode=%s interactive=%s keyguardActive=%s policyFlags=%s down %s canceled %s
 =================== 
interceptKeyBeforeQueueing: key {key} , result : {result}
 =================== 
querySoundEffectsEnabled...
 =================== 
acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
Acquiring suspend blocker "{blockerName}".
 =================== 
Skipping AppWindowToken{token=Token{ActivityRecord{u0 com.tencent.qt.qtl/.activity.info.NewsDetailXmlActivity}}} -- going to hide
 =================== 
setSystemUiVisibility vis=%d mask=%s oldVal=%s newVal=%d diff=%s fullscreenStackVis=%d dockedStackVis=%d, fullscreenStackBounds=Rect(%d, %d - %d, %d), dockedStackBounds=Rect(%d, %d - %d, %d)
 =================== 
cancelAutohide
 =================== 
notifyUiVisibilityChanged:vis=%vis%, SystemUiVisibility=%SystemUiVisibility%
 =================== 
Bad activity token: {activity_token}
 =================== 
java.lang.ClassCastException: {1} cannot be cast to {2}
 =================== 
Skipping AppWindowToken{token} -- going to hide
 =================== 
release:lock=?, flg=?, tag=?, name=?, ws=?, uid=?, pid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
Releasing suspend blocker "{blocker_name}".
 =================== 
setSystemUiVisibility vis=%vis% mask=%mask% oldVal=%oldVal% newVal=%newVal% diff=%diff% fullscreenStackVis=%fullscreenStackVis% dockedStackVis=%dockedStackVis% fullscreenStackBounds=%fullscreenStackBounds% dockedStackBounds=%dockedStackBounds%
 =================== 
cancelAutohide
 =================== 
notifyUiVisibilityChanged:vis=%vis%, SystemUiVisibility=%SystemUiVisibility%
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
suspendAutohide
 =================== 
suspendAutohide
 =================== 
onTouchEvent::{action}, x={x}, y={y}
 =================== 
schedulePeek
 =================== 
getRingtonePlayer...
 =================== 
disable: < expand ICONS* alerts SYSTEM_INFO* back home recent clock navigationbar search quick_settings >
 =================== 
suspendAutohide
 =================== 
updateLightsLocked,mInCall =false,mScreenOn = true,ledNotification == null?true
 =================== 
updateLightsLocked,turn off notificationLight
 =================== 
getRingtonePlayer...
 =================== 
updateLightsLocked,mInCall =false,mScreenOn = true,ledNotification == null?true
 =================== 
updateLightsLocked,turn off notificationLight
 =================== 
overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}
 =================== 
state.clipTopAmount:{clipTopAmount}, i:{i}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
setSystemUiVisibility vis=%vis% mask=%mask% oldVal=%oldVal% newVal=%newVal% diff=%diff% fullscreenStackVis=%fullscreenStackVis% dockedStackVis=%dockedStackVis% fullscreenStackBounds=%fullscreenStackBounds% dockedStackBounds=%dockedStackBounds%
 =================== 
notifyUiVisibilityChanged:vis=%vis%, SystemUiVisibility=%SystemUiVisibility%
 =================== 
suspendAutohide
 =================== 
on{Action}Started
 =================== 
suspendAutohide
 =================== 
onTrackingStarted
 =================== 
Destroying surface Surface(name={}) called by {}:{} {}:{} {}:{} {}:{} {}:{} {}:{}
 =================== 
suspendAutohide
 =================== 
overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}
 =================== 
state.clipTopAmount:{clipTopAmount}, i:{i}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
suspendAutohide
 =================== 
overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen()}
 =================== 
state.clipTopAmount:{clipTopAmount}, i:{i}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
suspendAutohide
 =================== 
overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}
 =================== 
state.clipTopAmount:{clipTopAmount}, i:{i}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
suspendAutohide
 =================== 
overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}
 =================== 
state.clipTopAmount:{clipTopAmount}, i:{i}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
suspendAutohide
 =================== 
overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}
 =================== 
state.clipTopAmount:{clipTopAmount}, i:{i}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:true
 =================== 
suspendAutohide
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
suspendAutohide
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
suspendAutohide
 =================== 
suspendAutohide
 =================== 
onTouchEvent::{id}, x={x}, y={y}
 =================== 
cancelPeek: {cancelPeek}
 =================== 
flingToHeight: vel=?, expand=?, target=?, collapseSpeedUpFactor=?, expandBecauseOfFalsing=?
 =================== 
onTrackingStopped: {value}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
on{Action}Finished
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
Sending non-protected broadcast {broadcast_name} from system {system_id}:{system_process} pkg {package_name}
 =================== 
logNotificationVisibilityChanges runInThread start
 =================== 
onNotificationVisibilityChanged called
 =================== 
logNotificationVisibilityChanges runInThread over
 =================== 
isSimPinSecure {0} is null or empty
 =================== 
{action} not in {location}.
 =================== 
`<error_type>: <error_message>`
 =================== 
register callback for com.android.systemui.statusbar.policy.KeyguardMonitor@{keyguardMonitorId}
 =================== 
{action} not in {location}.
 =================== 
`<error_type>: <error_message>`
 =================== 
`*** unregister callback for {callback}`
 =================== 
[PhoneIntfMgr] getDataEnabled: subId={subId} phoneId={phoneId}
 =================== 
[PhoneIntfMgr] getDataEnabled: subId={subId} retVal={retVal}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
onInterceptTouchEvent MotionEvent { action=, actionButton=, id[0]=, x[0]=, y[0]=, toolType[0]=, buttonState=, metaState=, flags=, edgeFlags=, pointerCount=, historySize=, eventTime=, downTime=, deviceId=, source= }, mBlockTouches=
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
onInterceptTouchEvent MotionEvent { action=?, actionButton=?, id[0]=?, x[0]=?, y[0]=?, toolType[0]=?, buttonState=?, metaState=?, flags=?, edgeFlags=?, pointerCount=?, historySize=?, eventTime=?, downTime=?, deviceId=?, source=? }, mBlockTouches=?
 =================== 
playSoundEffect   effectType: {effectType}
 =================== 
querySoundEffectsEnabled...
 =================== 
animateCollapsePanels:flags=?, force=?, delayed=?, mExpandedVisible=?
 =================== 
on{Action}Started
 =================== 
logNotificationVisibilityChanges runInThread start
 =================== 
onNotificationVisibilityChanged called
 =================== 
logNotificationVisibilityChanges runInThread over
 =================== 
START u0 {act=%act% flg=%flg% cmp=%cmp% (has extras)} from uid %uid% on display %display%
 =================== 
ActivityRecord info: ActivityInfo{packageName activityName}, euid: userId
 =================== 
setSystemUiVisibility vis=%vis% mask=%mask% oldVal=%oldVal% newVal=%newVal% diff=%diff% fullscreenStackVis=%fullscreenStackVis% dockedStackVis=%dockedStackVis%, fullscreenStackBounds=%fullscreenStackBounds% dockedStackBounds=%dockedStackBounds%
 =================== 
notifyUiVisibilityChanged:vis=%vis%, SystemUiVisibility=%SystemUiVisibility%
 =================== 
acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
Acquiring suspend blocker "{blockerName}".
 =================== 
onNotificationClick called
 =================== 
cancelNotification,index:{index}
 =================== 
cancelNotification,cancelNotificationLocked,callingUid = %d,callingPid = %d
 =================== 
cancelNotificationLocked called,tell the app,reason = %s
 =================== 
cancelNotificationLocked: <notificationId>|<packageName>|<userId>|<tag>|<notificationType>
 =================== 
cancelNotificationLocked,remove ={packageName}
 =================== 
applyOptionsLocked: Unknown animationType={animationType}
 =================== 
cancelPeek: {cancelPeek}
 =================== 
flingToHeight: vel=?, expand=?, target=?, collapseSpeedUpFactor=?, expandBecauseOfFalsing=?
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
Taking screenshot from Surface with crop:[Rect(%d, %d - %d, %d)], width:[%d], height:[%d], minLayer:[%d], maxLayer:[%d], inRotation:[%s], rot:[%d]
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
updateLightsLocked,mInCall =false,mScreenOn = true,ledNotification == null?true
 =================== 
updateLightsLocked,turn off notificationLight
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
removeNotification:{notificationId}|{packageName}|{userId}|{extraInfo}|{errorCode}
 =================== 
updateNotificationShade: total={}, active={}
 =================== 
animateCollapsePanels:flags=?, force=?, delayed=?, mExpandedVisible=?
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
The change in focus caused us to need to do a layout begin
 =================== 
The change in focus caused us to need to do a layout end
 =================== 
overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen()}
 =================== 
state.clipTopAmount:{clipTopAmount}, i:{i}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
setSystemUiVisibility vis=%d mask=%s oldVal=%s newVal=%s diff=%s fullscreenStackVis=%d dockedStackVis=%d, fullscreenStackBounds=Rect(%d, %d - %d, %d), dockedStackBounds=Rect(%d, %d - %d, %d)
 =================== 
cancelAutohide
 =================== 
notifyUiVisibilityChanged:vis=%vis%, SystemUiVisibility=%SystemUiVisibility%
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}
 =================== 
state.clipTopAmount:{clipTopAmount}, i:{i}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}
 =================== 
state.clipTopAmount:{clipTopAmount}, i:{i}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
updateNotificationShade: total={}, active={}
 =================== 
removeNotificationChildren
 =================== 
onExpandingFinished
 =================== 
updateNotificationShade: total=?, active=?
 =================== 
removeNotificationChildren
 =================== 
Sending non-protected broadcast {broadcast_name} from system {system_id}:{system_process} pkg {package_name}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
getRecentTasks: num=?,flags=?,totalTasks=?
 =================== 
getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity}
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
getRecentTasks: num=?,flags=?,totalTasks=?
 =================== 
getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity}
 =================== 
cancelNotificationWithTag pid %d,uid = %d,tag = %s,pkg =%s,id =%d
 =================== 
cancelNotification,index:{index}
 =================== 
cancelNotificationWithTag pid %d,uid = %d,tag = %s,pkg =%s,id =%d
 =================== 
cancelNotification,index:{index}
 =================== 
cancelNotificationWithTag pid %d,uid = %d,tag = %s,pkg =%s,id =%d
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setSystemUiVisibility vis=%vis% mask=%mask% oldVal=%oldVal% newVal=%newVal% diff=%diff% fullscreenStackVis=%fullscreenStackVis% dockedStackVis=%dockedStackVis% fullscreenStackBounds=%fullscreenStackBounds% dockedStackBounds=%dockedStackBounds%
 =================== 
cancelAutohide
 =================== 
notifyUiVisibilityChanged:vis=%vis%, SystemUiVisibility=%SystemUiVisibility%
 =================== 
makeExpandedInvisible: mExpandedVisible={}
 =================== 
closeQs
 =================== 
cancelPeek: {cancelPeek}
 =================== 
instantCollapse
 =================== 
cancelPeek: {cancelPeek}
 =================== 
closeQs
 =================== 
resumeSuspendedAutohide
 =================== 
disable: < * >
 =================== 
cancelNotificationWithTag pid %d,uid = %d,tag = %s,pkg =%s,id =%d
 =================== 
cancelNotification,index:{index}
 =================== 
cancelNotification,index:{index}
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
release:lock=?, flg=?, tag=?, name=?, ws=?, uid=?, pid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
cancelNotificationWithTag pid %d,uid = %d,tag = %s,pkg =%s,id =%d
 =================== 
cancelNotification,index:{index}
 =================== 
cancelNotificationWithTag pid %d,uid = %d,tag = %s,pkg =%s,id =%d
 =================== 
cancelNotificationWithTag pid %d,uid = %d,tag = %s,pkg =%s,id =%d
 =================== 
cancelNotificationWithTag pid %d,uid = %d,tag = %s,pkg =%s,id =%d
 =================== 
cancelNotification,index:{index}
 =================== 
cancelNotification,index:{index}
 =================== 
cancelNotification,index:{index}
 =================== 
cancelNotificationWithTag pid %d,uid = %d,tag = %s,pkg =%s,id =%d
 =================== 
cancelNotification,index:{index}
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
Releasing suspend blocker "{blockerName}".
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
{action} not in {location}.
 =================== 
`<error_type>: <error_message>`
 =================== 
*** unregister callback for {component} at {address}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
Destroying surface Surface(name={}) called by {}:{} {}:{} {}:{} {}:{} {}:{} {}:{}
 =================== 
HBM brightnessIn ={brightness}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
isMusicActive...
 =================== 
isMusicActive...
 =================== 
Start dump, calling from : pid=?, uid=?
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
Acquiring suspend blocker "{blockerName}".
 =================== 
setWiredDeviceConnectionState  type: {type}  state: {state}
 =================== 
acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
setWiredDeviceConnectionState  type: {type}  state: {state}
 =================== 
release:lock=?, flg=?, tag=?, name=?, ws=?, uid=?, pid=?
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
isMusicActive...
 =================== 
ActivityManagerService,attachApplication,callingPid = %d
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
acquire lock=?, flags=?, tag=?, name=?, ws=?, uid=?, pid=?
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
release:lock=?, flg=?, tag=?, name=?, ws=?, uid=?, pid=?
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
isBluetoothA2dpOn...
 =================== 
isMusicActive...
 =================== 
isBluetoothScoOn...
 =================== 
getLastAudibleStreamVolume  treamType: {}
 =================== 
ready={1},policy={2},wakefulness={3},wksummary={4},uasummary={5},bootcompleted={6},boostinprogress={7},waitmodeenable={8},mode={9},manual={10},auto={11},adj={12}userId={13}
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
cancelNotification,index:{index}
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
getLastAudibleStreamVolume  treamType: {streamType}
 =================== 
getLastAudibleStreamVolume  treamType: {streamType}
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
getDevicesForStream  streamType: {streamType}
 =================== 
getLastAudibleStreamVolume  treamType: {streamType}
 =================== 
getDevicesForStream  streamType: {streamType}
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
getLastAudibleStreamVolume  treamType: {streamType}
 =================== 
getLastAudibleStreamVolume  treamType: {streamType}
 =================== 
getLastAudibleStreamVolume  treamType: {streamType}
 =================== 
getLastAudibleStreamVolume  treamType: {streamType}
 =================== 
getLastAudibleStreamVolume  treamType: %d
 =================== 
cleanUpApplicationRecord -- {id}
 =================== 
cleanUpApplicationRecordLocked, pid: {pid}, restart: {restart}
 =================== 
cleanUpApplicationRecordLocked, reset pid: {pid}, euid: {euid}
 =================== 
stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=false
 =================== 
stopWifiDisplayScanLocked mWifiDisplayScanRequestCount=0
 =================== 
getMode...
 =================== 
setSpeakerphoneOn  on: {value}
 =================== 
setSpeakerphoneOn on:{boolean}
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
HBM brightnessIn ={brightness}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
release:lock=?, flg=?, tag=?, name=?, ws=?, uid=?, pid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
Releasing suspend blocker "{blockerName}".
 =================== 
sending alarm Alarm{aa90550 type 3 when 509142332 PendingIntent{1749923: PendingIntentRecord{9600e20 android broadcastIntent}}},repeatInterval = 0,listenerTag =time_tick
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
Acquiring suspend blocker "{blockerName}".
 =================== 
Received {alarm_type} alarm; rescheduling
 =================== 
scheduleTimeTickEvent triggerAtTime = {triggerAtTime}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
received broadcast {intent}
 =================== 
handleTimeUpdate
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
Releasing suspend blocker "{blocker}".
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
playSoundEffect   effectType: {effectType}
 =================== 
querySoundEffectsEnabled...
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
Destroying surface Surface(name=PopupWindow:9b04807) called by com.android.server.wm.WindowStateAnimator.destroySurface:2060 com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:913 com.android.server.wm.WindowState.removeLocked:1554 com.android.server.wm.WindowManagerService.removeWindowInnerLocked:2739 com.android.server.wm.WindowManagerService.removeWindowInnerLocked:2702 com.android.server.wm.WindowManagerService.removeWindowLocked:2691 com.android.server.wm.WindowManagerService.re
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
Destroying surface Surface(name={name}) called by {caller}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready={1},policy={2},wakefulness={3},wksummary={4},uasummary={5},bootcompleted={6},boostinprogress={7},waitmodeenable={8},mode={9},manual={10},auto={11},adj={12}userId={13}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready={1},policy={2},wakefulness={3},wksummary={4},uasummary={5},bootcompleted={6},boostinprogress={7},waitmodeenable={8},mode={9},manual={10},auto={11},adj={12}userId={13}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
Destroying surface Surface(name=PopupWindow:d76a91d) called by com.android.server.wm.WindowStateAnimator.destroySurface:2060 com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:913 com.android.server.wm.WindowState.removeLocked:1554 com.android.server.wm.WindowManagerService.removeWindowInnerLocked:2739 com.android.server.wm.WindowManagerService.removeWindowInnerLocked:2702 com.android.server.wm.WindowManagerService.removeWindowLocked:2691 com.android.server.wm.WindowManagerService.re
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
Destroying surface Surface(name=PopupWindow:9b04807) called by com.android.server.wm.WindowStateAnimator.destroySurface:2060 com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:913 com.android.server.wm.WindowState.removeLocked:1554 com.android.server.wm.WindowManagerService.removeWindowInnerLocked:2739 com.android.server.wm.WindowManagerService.removeWindowInnerLocked:2702 com.android.server.wm.WindowManagerService.removeWindowLocked:2691 com.android.server.wm.WindowManagerService.re
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
acquire lock=<lock>, flags=<flags>, tag="<tag>", name=<name>, ws=<ws>, uid=<uid>, pid=<pid>
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
Acquiring suspend blocker "{blockerName}".
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
getNeighboringCellInfo calling app is {calling_app}
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
ready={1},policy={2},wakefulness={3},wksummary={4},uasummary={5},bootcompleted={6},boostinprogress={7},waitmodeenable={8},mode={9},manual={10},auto={11},adj={12}userId={13}
 =================== 
release:lock=?, flg=?, tag=?, name=?, ws=?, uid=?, pid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
Releasing suspend blocker "{blockerName}".
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
Acquiring suspend blocker "{blocker}".
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
Releasing suspend blocker "{blocker}".
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
Acquiring suspend blocker "{blockerName}".
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
Releasing suspend blocker "{blockerName}".
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
Destroying surface Surface(name=PopupWindow:d76a91d) called by com.android.server.wm.WindowStateAnimator.destroySurface:2060 com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:913 com.android.server.wm.WindowState.removeLocked:1554 com.android.server.wm.WindowManagerService.removeWindowInnerLocked:2739 com.android.server.wm.WindowManagerService.removeWindowInnerLocked:2702 com.android.server.wm.WindowManagerService.removeWindowLocked:2691 com.android.server.wm.WindowManagerService.re
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
Destroying surface Surface(name=PopupWindow:9b04807) called by com.android.server.wm.WindowStateAnimator.destroySurface:2060 com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:913 com.android.server.wm.WindowState.removeLocked:1554 com.android.server.wm.WindowManagerService.removeWindowInnerLocked:2739 com.android.server.wm.WindowManagerService.removeWindowInnerLocked:2702 com.android.server.wm.WindowManagerService.removeWindowLocked:2691 com.android.server.wm.WindowManagerService.re
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
HBM brightnessIn ={brightness}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
HBM brightnessIn ={brightness}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
isMusicActive...
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
playSoundEffect   effectType: {effectType}
 =================== 
querySoundEffectsEnabled...
 =================== 
Destroying surface Surface(name=PopupWindow:9b04807) called by com.android.server.wm.WindowStateAnimator.destroySurface:2060 com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:913 com.android.server.wm.WindowState.removeLocked:1554 com.android.server.wm.WindowManagerService.removeWindowInnerLocked:2739 com.android.server.wm.WindowManagerService.removeWindowInnerLocked:2702 com.android.server.wm.WindowManagerService.removeWindowLocked:2691 com.android.server.wm.WindowManagerService.re
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
Destroying surface Surface(name=PopupWindow:317e46) called by com.android.server.wm.WindowStateAnimator.destroySurface:2060 com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:913 com.android.server.wm.WindowState.removeLocked:1554 com.android.server.wm.WindowManagerService.removeWindowInnerLocked:2739 com.android.server.wm.WindowManagerService.removeWindowInnerLocked:2702 com.android.server.wm.WindowManagerService.removeWindowLocked:2691 com.android.server.wm.WindowManagerService.rem
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
getRunningAppProcesses: caller %caller% does not hold %permission%; limiting output
 =================== 
getTasks: caller {caller_id} does not hold {permission}; limiting output
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
getTasks: caller {caller_id} does not hold {permission}; limiting output
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
isMusicActive...
 =================== 
sending alarm Alarm{type when PendingIntent{}},repeatInterval = ,listenerTag =null
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
Acquiring suspend blocker "{blocker}".
 =================== 
Killing <PID>:<process_name>/<user_id> (adj <adj_value>): empty for <duration>s
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
Releasing suspend blocker "{blocker_name}".
 =================== 
stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=false
 =================== 
stopWifiDisplayScanLocked mWifiDisplayScanRequestCount=0
 =================== 
cleanUpApplicationRecord -- {id}
 =================== 
cleanUpApplicationRecordLocked, pid: {pid}, restart: {restart}
 =================== 
cleanUpApplicationRecordLocked, reset pid: {pid}, euid: {euid}
 =================== 
stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=false
 =================== 
stopWifiDisplayScanLocked mWifiDisplayScanRequestCount=0
 =================== 
cleanUpApplicationRecord -- {id}
 =================== 
cleanUpApplicationRecordLocked, pid: {pid}, restart: {restart}
 =================== 
cleanUpApplicationRecordLocked, reset pid: {pid}, euid: {euid}
 =================== 
stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=false
 =================== 
stopWifiDisplayScanLocked mWifiDisplayScanRequestCount=<value>
 =================== 
cleanUpApplicationRecord -- {id}
 =================== 
cleanUpApplicationRecordLocked, pid: {pid}, restart: {restart}
 =================== 
cleanUpApplicationRecordLocked, reset pid: {pid}, euid: {euid}
 =================== 
HBM brightnessIn ={brightness}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
HBM brightnessIn ={brightness}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={value}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
HBM brightnessIn ={brightness}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
isMusicActive...
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
isMusicActive...
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
Acquiring suspend blocker "{blockerName}".
 =================== 
ready={1},policy={2},wakefulness={3},wksummary={4},uasummary={5},bootcompleted={6},boostinprogress={7},waitmodeenable={8},mode={9},manual={10},auto={11},adj={12}userId={13}
 =================== 
Releasing suspend blocker "{blockerName}".
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
sending alarm Alarm{<alarm_id> type <type> when <timestamp> PendingIntent{<pending_intent_id>: PendingIntentRecord{<record_id> android broadcastIntent}}},repeatInterval = <repeat_interval>,listenerTag =<tag>
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
Acquiring suspend blocker "{blockerName}".
 =================== 
Received {alarm_type} alarm; rescheduling
 =================== 
scheduleTimeTickEvent triggerAtTime = {triggerAtTime}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
received broadcast {intent}
 =================== 
handleTimeUpdate
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
Releasing suspend blocker "{blocker_name}".
 =================== 
acquire lock=<lock>, flags=<flags>, tag="<tag>", name=<name>, ws=<ws>, uid=<uid>, pid=<pid>
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
Acquiring suspend blocker "{blockerName}".
 =================== 
remove({}) changed bounds; rebatching
 =================== 
release:lock=?, flg=?, tag=?, name=?, ws=?, uid=?, pid=?
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
Releasing suspend blocker "{blocker}".
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
acquire lock=<lock>, flags=<flags>, tag="<tag>", name=<name>, ws=<ws>, uid=<uid>, pid=<pid>
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
Acquiring suspend blocker "{blocker}".
 =================== 
acquire lock=<lock>, flags=<flags>, tag="<tag>", name=<name>, ws=<ws>, uid=<uid>, pid=<pid>
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
release:lock=?, flg=?, tag=?, name=?, ws=?, uid=?, pid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
Releasing suspend blocker "{blocker_name}".
 =================== 
getNeighboringCellInfo calling app is {calling_app}
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
Acquiring suspend blocker "{blocker}".
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
Releasing suspend blocker "{blockerName}".
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
ready={1},policy={2},wakefulness={3},wksummary={4},uasummary={5},bootcompleted={6},boostinprogress={7},waitmodeenable={8},mode={9},manual={10},auto={11},adj={12}userId={13}
 =================== 
Acquiring suspend blocker "{blocker}".
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
Releasing suspend blocker "{blocker_name}".
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
Acquiring suspend blocker "{blocker}".
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
Releasing suspend blocker "{blocker_name}".
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
Unable to start service Intent { act=%s cmp=%s } U=%d: %s
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
Acquiring suspend blocker "{blockerName}".
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
Releasing suspend blocker "{blockerName}".
 =================== 
acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}
 =================== 
ready={1},policy={2},wakefulness={3},wksummary={4},uasummary={5},bootcompleted={6},boostinprogress={7},waitmodeenable={8},mode={9},manual={10},auto={11},adj={12}userId={13}
 =================== 
Acquiring suspend blocker "{blockerName}".
 =================== 
release:lock=?, flg=?, tag=?, name=?, ws=?, uid=?, pid=?
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
Releasing suspend blocker "{blocker_name}".
 =================== 
acquire lock=<lock>, flags=<flags>, tag="<tag>", name=<name>, ws=<ws>, uid=<uid>, pid=<pid>
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
Acquiring suspend blocker "{blockerName}".
 =================== 
acquire lock=<lock>, flags=<flags>, tag="<tag>", name=<name>, ws=<ws>, uid=<uid>, pid=<pid>
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
getNeighboringCellInfo calling app is {calling_app}
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
release:lock=?, flg=?, tag=?, name=?, ws=?, uid=?, pid=?
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
Releasing suspend blocker "{blocker_name}".
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
Acquiring suspend blocker "{blocker}".
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
Releasing suspend blocker "{blocker_name}".
 =================== 
ready={1},policy={2},wakefulness={3},wksummary={4},uasummary={5},bootcompleted={6},boostinprogress={7},waitmodeenable={8},mode={9},manual={10},auto={11},adj={12}userId={13}
 =================== 
Acquiring suspend blocker "{blockerName}".
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
Releasing suspend blocker "{blocker}".
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
HBM brightnessIn ={brightness}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
acquire lock=<lock>, flags=<flags>, tag="<tag>", name=<name>, ws=<ws>, uid=<uid>, pid=<pid>
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
Acquiring suspend blocker "{blockerName}".
 =================== 
acquire lock=<lock>, flags=<flags>, tag="<tag>", name=<name>, ws=<ws>, uid=<uid>, pid=<pid>
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
release:lock=?, flg=?, tag=?, name=?, ws=?, uid=?, pid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
Releasing suspend blocker "{blocker_name}".
 =================== 
getNeighboringCellInfo calling app is {calling_app}
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
Acquiring suspend blocker "{blockerName}".
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
Releasing suspend blocker "{blocker_name}".
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
HBM brightnessIn ={brightness}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
unregisterAudioFocusListener...
 =================== 
abandonAudioFocus
 =================== 
[HSM] stayAwake {boolean} uid: {number}, pid: {number}
 =================== 
`Pid:{pid} {message}`
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=false
 =================== 
stopWifiDisplayScanLocked mWifiDisplayScanRequestCount=0
 =================== 
Process {processName} (pid {pid}) has died
 =================== 
cleanUpApplicationRecord -- {id}
 =================== 
Scheduling restart of crashed service {service_name} in {restart_time}ms
 =================== 
cleanUpApplicationRecordLocked, pid: {pid}, restart: {restart}
 =================== 
cleanUpApplicationRecordLocked, reset pid: {pid}, euid: {euid}
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
isMusicActive...
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={value}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
new Process app=ProcessRecord{6eaaf00 0:%s/u0a%d}, name: %s, euid: %d
 =================== 
Start proc <pid>:<processName>:<userId> for service <serviceName>
 =================== 
ActivityManagerService,attachApplication,callingPid = {callingPid}
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
HBM brightnessIn ={brightness}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
getRunningAppProcesses: caller %caller% does not hold %permission%; limiting output
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
getRunningAppProcesses: caller %caller% does not hold %permission%; limiting output
 =================== 
getRunningAppProcesses: caller %caller% does not hold %permission%; limiting output
 =================== 
getRunningAppProcesses: caller %caller% does not hold %permission%; limiting output
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
getRunningAppProcesses: caller %caller% does not hold %permission%; limiting output
 =================== 
getRunningAppProcesses: caller %caller% does not hold %permission%; limiting output
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
HBM brightnessIn ={brightness}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
suspendAutohide
 =================== 
interceptKeyTq keycode=%s interactive=%s keyguardActive=%s policyFlags=%s down %s canceled %s
 =================== 
interceptKeyBeforeQueueing: key {key} , result : {result}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
Destroying surface Surface(name=PopupWindow:317e46) called by com.android.server.wm.WindowStateAnimator.destroySurface:2060 com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:913 com.android.server.wm.WindowState.removeLocked:1554 com.android.server.wm.WindowManagerService.removeWindowInnerLocked:2739 com.android.server.wm.WindowManagerService.removeWindowInnerLocked:2702 com.android.server.wm.WindowManagerService.removeWindowLocked:2691 com.android.server.wm.WindowManagerService.rem
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
resumeSuspendedAutohide
 =================== 
interceptKeyTq keycode=%s interactive=%s keyguardActive=%s policyFlags=%s down %s canceled %s
 =================== 
interceptKeyBeforeQueueing: key {key} , result : {result}
 =================== 
querySoundEffectsEnabled...
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
Destroying surface Surface(name=InputMethod) called by com.android.server.wm.WindowStateAnimator.destroySurface:2060 com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:913 com.android.server.wm.WindowState.destroyOrSaveSurface:2201 com.android.server.wm.WindowSurfacePlacer.performSurfacePlacementInner:517 com.android.server.wm.WindowSurfacePlacer.performSurfacePlacementLoop:291 com.android.server.wm.WindowSurfacePlacer.performSurfacePlacement:233 com.android.server.wm.WindowManagerSe
 =================== 
suspendAutohide
 =================== 
interceptKeyTq keycode=%s interactive=%s keyguardActive=%s policyFlags=%s down %s canceled %s
 =================== 
interceptKeyBeforeQueueing: key {key} , result : {result}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
resumeSuspendedAutohide
 =================== 
interceptKeyTq keycode=%s interactive=%s keyguardActive=%s policyFlags=%s down %s canceled %s
 =================== 
interceptKeyBeforeQueueing: key {key} , result : {result}
 =================== 
querySoundEffectsEnabled...
 =================== 
isMusicActive...
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
suspendAutohide
 =================== 
interceptKeyTq keycode=% interactive=% keyguardActive=% policyFlags=% down % canceled %
 =================== 
interceptKeyBeforeQueueing: key {key} , result : {result}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
resumeSuspendedAutohide
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
interceptKeyTq keycode=%d interactive=%b keyguardActive=%b policyFlags=%s down %b canceled %b
 =================== 
interceptKeyBeforeQueueing: key {key} , result : {result}
 =================== 
querySoundEffectsEnabled...
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
animateCollapsePanels:flags=?, force=?, delayed=?, mExpandedVisible=?
 =================== 
closeQs
 =================== 
cancelPeek: {cancelPeek}
 =================== 
instantCollapse
 =================== 
cancelPeek: {cancelPeek}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
Acquiring suspend blocker "{blockerName}".
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
HBM brightnessIn ={brightness}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
Taking screenshot from Surface with crop:[Rect(%d, %d - %d, %d)], width:[%d], height:[%d], minLayer:[%d], maxLayer:[%d], inRotation:[%s], rot:[%d]
 =================== 
The change in focus caused us to need to do a layout begin
 =================== 
The change in focus caused us to need to do a layout end
 =================== 
setSystemUiVisibility vis=%d mask=%s oldVal=%s newVal=%d diff=%s fullscreenStackVis=%d dockedStackVis=%d, fullscreenStackBounds=Rect(%d, %d - %d, %d), dockedStackBounds=Rect(%d, %d - %d, %d)
 =================== 
cancelAutohide
 =================== 
notifyUiVisibilityChanged:vis=%vis%, SystemUiVisibility=%SystemUiVisibility%
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
getRecentTasks: num=?,flags=?,totalTasks=?
 =================== 
getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
getRecentTasks: num=?,flags=?,totalTasks=?
 =================== 
getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity}
 =================== 
setSystemUiVisibility vis=%s mask=%s oldVal=%s newVal=%s diff=%s fullscreenStackVis=%d dockedStackVis=%d, fullscreenStackBounds=Rect(%d, %d - %d, %d), dockedStackBounds=Rect(%d, %d - %d, %d)
 =================== 
cancelAutohide
 =================== 
notifyUiVisibilityChanged:vis=%vis%, SystemUiVisibility=%SystemUiVisibility%
 =================== 
release:lock=?, flg=?, tag=?, name=?, ws=?, uid=?, pid=?
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
Releasing suspend blocker "{blocker}".
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
ActivityManagerService,attachApplication,callingPid = {callingPid}
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
Destroying surface Surface(name=${surfaceName}) called by ${caller}
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
Acquiring suspend blocker "{blocker}".
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
Releasing suspend blocker "{blockerName}".
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
Acquiring suspend blocker "{blockerName}".
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
Releasing suspend blocker "{blockerName}".
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=false
 =================== 
stopWifiDisplayScanLocked mWifiDisplayScanRequestCount=0
 =================== 
cleanUpApplicationRecord -- {id}
 =================== 
cleanUpApplicationRecordLocked, pid: {pid}, restart: {restart}
 =================== 
cleanUpApplicationRecordLocked, reset pid: {pid}, euid: {euid}
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
HBM brightnessIn ={brightness}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
HBM brightnessIn ={brightness}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
HBM brightnessIn ={brightness}
 =================== 
HBM brightnessOut ={value}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
HBM brightnessIn ={brightness}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
HBM brightnessIn = {value}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
HBM brightnessIn ={brightness}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
cancelNotificationWithTag pid %d,uid = %d,tag = %s,pkg =%s,id =%d
 =================== 
cancelNotification,index:{index}
 =================== 
cancelNotificationWithTag pid %d,uid = %d,tag = %s,pkg =%s,id =%d
 =================== 
cancelNotification,index:{index}
 =================== 
enqueueNotificationInternal: pkg={pkg} id={id} notification=Notification(pri={pri} contentView={contentView} vibrate={vibrate} sound={sound} tick defaults={defaults} flags={flags} color={color} vis={vis})
 =================== 
enqueueNotificationInternal: n.getKey = %d|%s|%d|null|%d
 =================== 
getRingerMode...
 =================== 
updateLightsLocked,mInCall =false,mScreenOn = true,ledNotification == null?false
 =================== 
updateLightsLocked,turn off notificationLight
 =================== 
addNotification key={key}|{packageName}|{userId}|{message}|{notificationId}
 =================== 
m{LogTemplateName}Runnable
 =================== 
disable: < expand ICONS* alerts SYSTEM_INFO* back home recent clock navigationbar search quick_settings >
 =================== 
suspendAutohide
 =================== 
updateNotificationShade: total={}, active={}
 =================== 
removeNotificationChildren
 =================== 
updateNotificationShade: total=?, active=?
 =================== 
removeNotificationChildren
 =================== 
Marking notification as seen {notification_id}|{app_package}|{user_id}|{timestamp}|{notification_type}
 =================== 
onNotificationExpansionChanged called
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
logNotificationVisibilityChanges runInThread start
 =================== 
onNotificationVisibilityChanged called
 =================== 
logNotificationVisibilityChanges runInThread over
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
playSoundEffect   effectType: {effectType}
 =================== 
querySoundEffectsEnabled...
 =================== 
START u0 {act=%s cat=%s flg=%s cmp=%s bnds=%s} from uid %d on display %d
 =================== 
ActivityRecord info: ActivityInfo{<package_name>.<activity_name>}, euid: <euid>
 =================== 
acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
Acquiring suspend blocker "{blockerName}".
 =================== 
rotationForOrientationLw(orient=?, last=?); user=? USER_ROTATION_LOCKED
 =================== 
Application requested orientation {requested_orientation}, got rotation {got_rotation} which has compatible metrics
 =================== 
The change in focus caused us to need to do a layout begin
 =================== 
The change in focus caused us to need to do a layout end
 =================== 
setSystemUiVisibility vis=%vis% mask=%mask% oldVal=%oldVal% newVal=%newVal% diff=%diff% fullscreenStackVis=%fullscreenStackVis% dockedStackVis=%dockedStackVis% fullscreenStackBounds=%fullscreenStackBounds% dockedStackBounds=%dockedStackBounds%
 =================== 
cancelAutohide
 =================== 
notifyUiVisibilityChanged:vis=%vis%, SystemUiVisibility=%SystemUiVisibility%
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
getRecentTasks: num=?,flags=?,totalTasks=?
 =================== 
getRecentTasks: topActivity=ComponentInfo{com.example.android.notepad/com.example.android.notepad.NoteEditor}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
getRecentTasks: num=?,flags=?,totalTasks=?
 =================== 
getRecentTasks: topActivity=ComponentInfo{com.example.android.notepad/com.example.android.notepad.NoteEditor}
 =================== 
setSystemUiVisibility vis=%vis% mask=%mask% oldVal=%oldVal% newVal=%newVal% diff=%diff% fullscreenStackVis=%fullscreenStackVis% dockedStackVis=%dockedStackVis% fullscreenStackBounds=%fullscreenStackBounds% dockedStackBounds=%dockedStackBounds%
 =================== 
cancelAutohide
 =================== 
notifyUiVisibilityChanged:vis=%vis%, SystemUiVisibility=%SystemUiVisibility%
 =================== 
release:lock=?, flg=?, tag=?, name=?, ws=?, uid=?, pid=?
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
Releasing suspend blocker "{blockerName}".
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
updateNotificationShade: total={}, active={}
 =================== 
removeNotificationChildren
 =================== 
overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}
 =================== 
state.clipTopAmount:{clipTopAmount}, i:{i}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
ACTIVITY check resid: {packageName}, size={size}
 =================== 
m{1}Runnable
 =================== 
updateNotificationShade: total={}, active={}
 =================== 
removeNotificationChildren
 =================== 
overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}
 =================== 
state.clipTopAmount:{clipTopAmount}, i:{i}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
makeExpandedInvisible: mExpandedVisible={}
 =================== 
closeQs
 =================== 
cancelPeek: {cancelPeek}
 =================== 
instantCollapse
 =================== 
cancelPeek: {cancelPeek}
 =================== 
closeQs
 =================== 
logNotificationVisibilityChanges runInThread start
 =================== 
onNotificationVisibilityChanged called
 =================== 
resumeSuspendedAutohide
 =================== 
disable: < * >
 =================== 
logNotificationVisibilityChanges runInThread over
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
Destroying surface Surface(name={}) called by {}.{}.{}:{} {}:{}:{}:{} {}:{}:{}:{} {}:{}:{}:{} {}:{}:{}:{}
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready={1},policy={2},wakefulness={3},wksummary={4},uasummary={5},bootcompleted={6},boostinprogress={7},waitmodeenable={8},mode={9},manual={10},auto={11},adj={12},userId={13}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
getRunningAppProcesses: caller %callerId% does not hold %permission%; limiting output
 =================== 
HBM brightnessIn ={brightness}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
HBM brightnessIn ={brightness}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
playSoundEffect   effectType: {effectType}
 =================== 
querySoundEffectsEnabled...
 =================== 
Destroying surface Surface(name=PopupWindow:317e46) called by com.android.server.wm.WindowStateAnimator.destroySurface:2060 com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:913 com.android.server.wm.WindowState.removeLocked:1554 com.android.server.wm.WindowManagerService.removeWindowInnerLocked:2739 com.android.server.wm.WindowManagerService.removeWindowInnerLocked:2702 com.android.server.wm.WindowManagerService.removeWindowLocked:2691 com.android.server.wm.WindowManagerService.rem
 =================== 
ActivityManagerService,attachApplication,callingPid = %d
 =================== 
Destroying surface Surface(name=InputMethod) called by com.android.server.wm.WindowStateAnimator.destroySurface:2060 com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:913 com.android.server.wm.WindowState.destroyOrSaveSurface:2201 com.android.server.wm.WindowSurfacePlacer.performSurfacePlacementInner:517 com.android.server.wm.WindowSurfacePlacer.performSurfacePlacementLoop:291 com.android.server.wm.WindowSurfacePlacer.performSurfacePlacement:233 com.android.server.wm.WindowManagerSe
 =================== 
ACTIVITY check resid: {package}, size={size}
 =================== 
setSystemUiVisibility vis=%vis% mask=%mask% oldVal=%oldVal% newVal=%newVal% diff=%diff% fullscreenStackVis=%fullscreenStackVis% dockedStackVis=%dockedStackVis% fullscreenStackBounds=%fullscreenStackBounds% dockedStackBounds=%dockedStackBounds%
 =================== 
notifyUiVisibilityChanged:vis=%vis%, SystemUiVisibility=%SystemUiVisibility%
 =================== 
setSystemUiVisibility vis=%vis% mask=%mask% oldVal=%oldVal% newVal=%newVal% diff=%diff% fullscreenStackVis=%fullscreenStackVis% dockedStackVis=%dockedStackVis%, fullscreenStackBounds=Rect(%left%, %top% - %right%, %bottom%), dockedStackBounds=Rect(%left%, %top% - %right%, %bottom%)
 =================== 
notifyUiVisibilityChanged:vis=%vis%, SystemUiVisibility=%SystemUiVisibility%
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
suspendAutohide
 =================== 
interceptKeyTq keycode=%d interactive=%b keyguardActive=%b policyFlags=%s down %b canceled %b
 =================== 
interceptKeyBeforeQueueing: key {key} , result : {result}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
resumeSuspendedAutohide
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
interceptKeyTq keycode=%d interactive=%b keyguardActive=%b policyFlags=%s down %b canceled %b
 =================== 
interceptKeyBeforeQueueing: key {key} , result : {result}
 =================== 
querySoundEffectsEnabled...
 =================== 
animateCollapsePanels:flags=?, force=?, delayed=?, mExpandedVisible=?
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
closeQs
 =================== 
cancelPeek: {cancelPeek}
 =================== 
instantCollapse
 =================== 
cancelPeek: {cancelPeek}
 =================== 
acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
Acquiring suspend blocker "{blockerName}".
 =================== 
rotationForOrientationLw(orient=?, last=?); user=? USER_ROTATION_LOCKED
 =================== 
Application requested orientation {orientation}, got rotation {rotation} which has compatible metrics
 =================== 
Taking screenshot from Surface with crop:[Rect(%d, %d - %d, %d)], width:[%d], height:[%d], minLayer:[%d], maxLayer:[%d], inRotation:[%s], rot:[%d]
 =================== 
The change in focus caused us to need to do a layout begin
 =================== 
The change in focus caused us to need to do a layout end
 =================== 
setSystemUiVisibility vis=%d mask=%s oldVal=%s newVal=%d diff=%s fullscreenStackVis=%d dockedStackVis=%d, fullscreenStackBounds=Rect(%d, %d - %d, %d), dockedStackBounds=Rect(%d, %d - %d, %d)
 =================== 
cancelAutohide
 =================== 
notifyUiVisibilityChanged:vis=%vis%, SystemUiVisibility=%SystemUiVisibility%
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: false, tr.intent:Intent { act=com.android.contacts.action.CHOOSE_SUB dat=tel:xxxxxxxxxxx flg=0x10808000 cmp=com.android.contacts/.ChooseSubActivity (has extras) }
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
getRecentTasks: num=?,flags=?,totalTasks=?
 =================== 
getRecentTasks: topActivity=ComponentInfo{com.example.android.notepad/com.example.android.notepad.NoteEditor}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
getRecentTasks: num=?,flags=?,totalTasks=?
 =================== 
getRecentTasks: topActivity=ComponentInfo{com.example.android.notepad/com.example.android.notepad.NoteEditor}
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
setSystemUiVisibility vis=%s mask=%s oldVal=%s newVal=%s diff=%s fullscreenStackVis=%d dockedStackVis=%d, fullscreenStackBounds=Rect(%d, %d - %d, %d), dockedStackBounds=Rect(%d, %d - %d, %d)
 =================== 
cancelAutohide
 =================== 
notifyUiVisibilityChanged:vis=%vis%, SystemUiVisibility=%SystemUiVisibility%
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
release:lock=?, flg=?, tag=?, name=?, ws=?, uid=?, pid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
Releasing suspend blocker "{blocker}".
 =================== 
Destroying surface Surface(name={}) called by {}:{} {}:{} {}:{} {}:{} {}:{} {}:{}
 =================== 
Destroying surface Surface(name={}) called by {}:{} {}:{} {}:{} {}:{} {}:{} {}:{}
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
getTasks: caller {caller_id} does not hold {permission}; limiting output
 =================== 
getRingerMode...
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
suspendAutohide
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
interceptKeyTq keycode=%d interactive=%b keyguardActive=%b policyFlags=%s down %b canceled %b
 =================== 
interceptKeyBeforeQueueing: key %d , result : %d
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
resumeSuspendedAutohide
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
interceptKeyTq keycode=%d interactive=%b keyguardActive=%b policyFlags=%s down %b canceled %b
 =================== 
interceptKeyBeforeQueueing: key {key} , result : {result}
 =================== 
querySoundEffectsEnabled...
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
animateCollapsePanels:flags=?, force=?, delayed=?, mExpandedVisible=?
 =================== 
closeQs
 =================== 
cancelPeek: {cancelPeek}
 =================== 
instantCollapse
 =================== 
cancelPeek: {cancelPeek}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
playSoundEffect   effectType: {effectType}
 =================== 
querySoundEffectsEnabled...
 =================== 
START u0 {act=%s cat=%s flg=%s cmp=%s bnds=%s} from uid %d on display %d
 =================== 
ActivityRecord info: ActivityInfo{<activity_info>}, euid: <euid>
 =================== 
acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
Acquiring suspend blocker "{blockerName}".
 =================== 
The change in focus caused us to need to do a layout begin
 =================== 
The change in focus caused us to need to do a layout end
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
setSystemUiVisibility vis=%s mask=%s oldVal=%s newVal=%s diff=%s fullscreenStackVis=%d dockedStackVis=%d, fullscreenStackBounds=Rect(%d, %d - %d, %d), dockedStackBounds=Rect(%d, %d - %d, %d)
 =================== 
cancelAutohide
 =================== 
notifyUiVisibilityChanged:vis=%vis%, SystemUiVisibility=%SystemUiVisibility%
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
getRecentTasks: num=?,flags=?,totalTasks=?
 =================== 
getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
getRecentTasks: num=?,flags=?,totalTasks=?
 =================== 
getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
cancelNotificationWithTag pid %d,uid = %d,tag = %s,pkg =%s,id =%d
 =================== 
cancelNotification,index:{index}
 =================== 
cancelNotification,cancelNotificationLocked,callingUid = %d,callingPid = %d
 =================== 
cancelNotificationLocked called,tell the app,reason = %s
 =================== 
cancelNotificationLocked:0|{packageName}|{notificationId}|{extraInfo}|{userId}
 =================== 
cancelNotificationWithTag pid %d,uid = %d,tag = %s,pkg =%s,id =%d
 =================== 
cancelNotificationLocked,remove ={packageName}
 =================== 
cancelNotificationWithTag pid %d,uid = %d,tag = %s,pkg =%s,id =%d
 =================== 
updateLightsLocked,mInCall =false,mScreenOn = true,ledNotification == null?true
 =================== 
updateLightsLocked,turn off notificationLight
 =================== 
cancelNotification,index:{index}
 =================== 
cancelNotification,index:{index}
 =================== 
setSystemUiVisibility vis=%vis% mask=%mask% oldVal=%oldVal% newVal=%newVal% diff=%diff% fullscreenStackVis=%fullscreenStackVis% dockedStackVis=%dockedStackVis% fullscreenStackBounds=%fullscreenStackBounds% dockedStackBounds=%dockedStackBounds%
 =================== 
cancelAutohide
 =================== 
notifyUiVisibilityChanged:vis=%vis%, SystemUiVisibility=%SystemUiVisibility%
 =================== 
cancelNotificationWithTag pid %d,uid = %d,tag = %s,pkg =%s,id =%d
 =================== 
cancelNotificationWithTag pid %d,uid = %d,tag = %s,pkg =%s,id =%d
 =================== 
cancelNotification,index:{index}
 =================== 
cancelNotification,index:{index}
 =================== 
cancelNotificationWithTag pid %d,uid = %d,tag = %s,pkg =%s,id =%d
 =================== 
cancelNotification,index:{index}
 =================== 
cancelNotificationWithTag pid %d,uid = %d,tag = %s,pkg =%s,id =%d
 =================== 
cancelNotification,index:{index}
 =================== 
shouldBlockLocation running ...
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
removeNotification:{notificationId}|{packageName}|{userId}|{extraInfo}|{errorCode}
 =================== 
updateNotificationShade: total={}, active={}
 =================== 
cancelNotificationWithTag pid %d,uid = %d,tag = %s,pkg =%s,id =%d
 =================== 
cancelNotification,index:{index}
 =================== 
removeNotificationChildren
 =================== 
animateCollapsePanels:flags=?, force=?, delayed=?, mExpandedVisible=?
 =================== 
closeQs
 =================== 
cancelPeek: {cancelPeek}
 =================== 
instantCollapse
 =================== 
cancelPeek: {cancelPeek}
 =================== 
release:lock=?, flg=?, tag=?, name=?, ws=?, uid=?, pid=?
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
Releasing suspend blocker "{blocker_name}".
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
cancelNotificationWithTag pid {pid},uid = {uid},tag = {tag},pkg ={pkg},id ={id}
 =================== 
cancelNotification,index:{index}
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
getAllCellInfo is blocked by permission manager . callingPackage = {callingPackage}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
isMusicActive...
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
playSoundEffect   effectType: {effectType}
 =================== 
querySoundEffectsEnabled...
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
HBM brightnessIn = {value}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
getAllCellInfo is blocked by permission manager . callingPackage = {callingPackage}
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
getCellLocation is blocked by permission manager uid:{uid} pid:{pid}
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
HBM brightnessIn = {value}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
shouldBlockLocation running ...
 =================== 
shouldBlockLocation  ret:{boolean}
 =================== 
getAllCellInfo is blocked by permission manager . callingPackage = {callingPackage}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
setLightsOn({param1})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
isMusicActive...
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
HBM brightnessIn ={brightness}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
sending alarm Alarm{type when PendingIntent},repeatInterval = ,listenerTag =
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
Acquiring suspend blocker "{blockerName}".
 =================== 
Received {alarm_type} alarm; rescheduling
 =================== 
scheduleTimeTickEvent triggerAtTime = {triggerAtTime}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
received broadcast {intent}
 =================== 
handleTimeUpdate
 =================== 
HBM brightnessIn ={brightness}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
playSoundEffect   effectType: {effectType}
 =================== 
querySoundEffectsEnabled...
 =================== 
Destroying surface Surface(name=PopupWindow:9b04807) called by com.android.server.wm.WindowStateAnimator.destroySurface:2060 com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:913 com.android.server.wm.WindowState.removeLocked:1554 com.android.server.wm.WindowManagerService.removeWindowInnerLocked:2739 com.android.server.wm.WindowManagerService.removeWindowInnerLocked:2702 com.android.server.wm.WindowManagerService.removeWindowLocked:2691 com.android.server.wm.WindowManagerService.re
 =================== 
isWiredHeadsetOn...
 =================== 
Destroying surface Surface(name={name}) called by {caller}
 =================== 
acquire lock=<lock>, flags=<flags>, tag="<tag>", name=<name>, ws=<ws>, uid=<uid>, pid=<pid>
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
acquire lock=<lock>, flags=<flags>, tag="<tag>", name=<name>, ws=<ws>, uid=<uid>, pid=<pid>
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
acquire lock=<lock>, flags=<flags>, tag="<tag>", name=<name>, ws=<ws>, uid=<uid>, pid=<pid>
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
acquire lock=?, flags=?, tag=?, name=?, ws=?, uid=?, pid=?
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setDataSource({0}, {1}, {2})
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
getStreamVolume  treamType: {streamType}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
HBM brightnessIn ={brightness}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
Destroying surface Surface(name={name}) called by {caller}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
Destroying surface Surface(name=InputMethod) called by com.android.server.wm.WindowStateAnimator.destroySurface:2060 com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:913 com.android.server.wm.WindowState.destroyOrSaveSurface:2201 com.android.server.wm.WindowSurfacePlacer.performSurfacePlacementInner:517 com.android.server.wm.WindowSurfacePlacer.performSurfacePlacementLoop:291 com.android.server.wm.WindowSurfacePlacer.performSurfacePlacement:233 com.android.server.wm.WindowManagerSe
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
playSoundEffect   effectType: {effectType}
 =================== 
querySoundEffectsEnabled...
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
HBM brightnessIn ={brightness}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
updateIsPoweredLocked: wasPowered={}, mIsPowered={}, oldPlugType={}, mPlugType={}, mBatteryLevel={}
 =================== 
received broadcast {intent}
 =================== 
ACTION_BATTERY_CHANGED AMP: %d; Volt: %d
 =================== 
updateChargingLocked: charging={charging}
 =================== 
onReceive, action:{action}
 =================== 
ACTION_BATTERY_CHANGED pluggedType: %d
 =================== 
ApStaDisabledState what=155652
 =================== 
DefaultState what=155652
 =================== 
battery changed pluggedType: {pluggedType}
 =================== 
RefreshBatteryInfo isBatteryLow: {batteryLevel}
 =================== 
ChargingSpeed  Wattage: -1 ST: {} --> {}
 =================== 
handleBatteryUpdate
 =================== 
RefreshBatteryInfo isBatteryLow: {batteryLevel}
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
release:lock=?, flg=?, tag=?, name=?, ws=?, uid=?, pid=?
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
release:lock=?, flg=?, tag=?, name=?, ws=?, uid=?, pid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
release:lock=?, flg=?, tag=?, name=?, ws=?, uid=?, pid=?
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
release:lock=?, flg=?, tag=?, name=?, ws=?, uid=?, pid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
Releasing suspend blocker "{blocker}".
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
HBM brightnessIn ={brightness}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
suspendAutohide
 =================== 
interceptKeyTq keycode=%d interactive=%b keyguardActive=%b policyFlags=%s down %b canceled %b
 =================== 
interceptKeyBeforeQueueing: key {key} , result : {result}
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
resumeSuspendedAutohide
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
interceptKeyTq keycode=%d interactive=%b keyguardActive=%b policyFlags=%s down %b canceled %b
 =================== 
interceptKeyBeforeQueueing: key {key} , result : {result}
 =================== 
querySoundEffectsEnabled...
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready={ready},policy={policy},wakefulness={wakefulness},wksummary={wksummary},uasummary={uasummary},bootcompleted={bootcompleted},boostinprogress={boostinprogress},waitmodeenable={waitmodeenable},mode={mode},manual={manual},auto={auto},adj={adj},userId={userId}
 =================== 
animateCollapsePanels:flags=?, force=?, delayed=?, mExpandedVisible=?
 =================== 
closeQs
 =================== 
cancelPeek: {boolean}
 =================== 
instantCollapse
 =================== 
cancelPeek: {cancelPeek}
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
Acquiring suspend blocker "{blockerName}".
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
setLightsOn({})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds=Rect({left}, {top} - {right}, {bottom}), dockedStackBounds=Rect({left}, {top} - {right}, {bottom})
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
setLightsOn({value})
 =================== 
setSystemUiVisibility vis={vis} mask={mask} oldVal={oldVal} newVal={newVal} diff={diff} fullscreenStackVis={fullscreenStackVis} dockedStackVis={dockedStackVis}, fullscreenStackBounds={fullscreenStackBounds}, dockedStackBounds={dockedStackBounds}
 =================== 
Taking screenshot from Surface with crop:[Rect(%d, %d - %d, %d)], width:[%d], height:[%d], minLayer:[%d], maxLayer:[%d], inRotation:[%s], rot:[%d]
 =================== 
The change in focus caused us to need to do a layout begin
 =================== 
The change in focus caused us to need to do a layout end
 =================== 
setSystemUiVisibility vis=%vis% mask=%mask% oldVal=%oldVal% newVal=%newVal% diff=%diff% fullscreenStackVis=%fullscreenStackVis% dockedStackVis=%dockedStackVis% fullscreenStackBounds=Rect(%left%, %top% - %right%, %bottom%) dockedStackBounds=Rect(%left%, %top% - %right%, %bottom%)
 =================== 
cancelAutohide
 =================== 
notifyUiVisibilityChanged:vis=%vis%, SystemUiVisibility=%SystemUiVisibility%
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
getRecentTasks: num=?,flags=?,totalTasks=?
 =================== 
getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
getRecentTasks: num=?,flags=?,totalTasks=?
 =================== 
getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity}
 =================== 
setSystemUiVisibility vis=%s mask=%s oldVal=%s newVal=%s diff=%s fullscreenStackVis=%d dockedStackVis=%d, fullscreenStackBounds=Rect(%d, %d - %d, %d), dockedStackBounds=Rect(%d, %d - %d, %d)
 =================== 
cancelAutohide
 =================== 
notifyUiVisibilityChanged:vis=%vis%, SystemUiVisibility=%SystemUiVisibility%
 =================== 
getRingerMode...
 =================== 
release:lock=?, flg=?, tag=?, name=?, ws=?, uid=?, pid=?
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x0,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
Releasing suspend blocker "{blocker}".
 =================== 
enqueueNotificationInternal: pkg={pkg} id={id} notification=Notification(pri={pri} contentView={contentView} vibrate={vibrate} sound={sound} tick defaults={defaults} flags={flags} color={color} category={category} vis={vis})
 =================== 
enqueueNotificationInternal: n.getKey = %d|%s|%d|%s|%d
 =================== 
updateLightsLocked,mInCall ={mInCall},mScreenOn = {mScreenOn},ledNotification == {ledNotification}
 =================== 
updateLightsLocked,turn off notificationLight
 =================== 
addNotification key={}|{}|{}|{}|{}
 =================== 
m{1}Runnable
 =================== 
disable: < expand ICONS* alerts SYSTEM_INFO* back home recent clock navigationbar search quick_settings >
 =================== 
suspendAutohide
 =================== 
updateNotificationShade: total={}, active={}
 =================== 
removeNotificationChildren
 =================== 
updateNotificationShade: total={}, active={}
 =================== 
removeNotificationChildren
 =================== 
Marking notification as seen {notification_id}|{app_package}|{user_id}|{extra_info}|{notification_type}
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
onNotificationExpansionChanged called
 =================== 
Destroying surface Surface(name=${surfaceName}) called by ${caller}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
getTasks: caller {callerId} does not hold {permission}; limiting output
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
sending alarm Alarm{<id> type <type> when <timestamp> PendingIntent{<pendingIntent>}},repeatInterval = <repeatInterval>,listenerTag =<listenerTag>
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
Acquiring suspend blocker "{blockerName}".
 =================== 
ready={1},policy={2},wakefulness={3},wksummary={4},uasummary={5},bootcompleted={6},boostinprogress={7},waitmodeenable={8},mode={9},manual={10},auto={11},adj={12}userId={13}
 =================== 
Releasing suspend blocker "{blockerName}".
 =================== 
ready=true,policy=3,wakefulness=1,wksummary=0x1,uasummary=0x1,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=38,auto=-1,adj=0.0userId=0
 =================== 
Acquiring suspend blocker "{blockerName}".
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
logNotificationVisibilityChanges runInThread start
 =================== 
onNotificationVisibilityChanged called
 =================== 
logNotificationVisibilityChanges runInThread over
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
Releasing suspend blocker "{blocker_name}".
 =================== 
userActivityNoUpdateLocked: eventTime=?, event=?, flags=?, uid=?
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
onInterceptTouchEvent MotionEvent { action=, actionButton=, id[0]=, x[0]=, y[0]=, toolType[0]=, buttonState=, metaState=, flags=, edgeFlags=, pointerCount=, historySize=, eventTime=, downTime=, deviceId=, source= }, mBlockTouches=
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
onInterceptTouchEvent MotionEvent { action=?, actionButton=?, id[0]=?, x[0]=?, y[0]=?, toolType[0]=?, buttonState=?, metaState=?, flags=?, edgeFlags=?, pointerCount=?, historySize=?, eventTime=?, downTime=?, deviceId=?, source=? }, mBlockTouches=?
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
playSoundEffect   effectType: {effectType}
 =================== 
querySoundEffectsEnabled...
 =================== 
updateNotificationShade: total=?, active=?
 =================== 
removeNotificationChildren
 =================== 
animateCollapsePanels:flags=?, force=?, delayed=?, mExpandedVisible=?
 =================== 
closeQs
 =================== 
cancelPeek: {boolean}
 =================== 
instantCollapse
 =================== 
cancelPeek: {boolean}
 =================== 
updateNotificationShade: total={}, active={}
 =================== 
removeNotificationChildren
 =================== 
logNotificationVisibilityChanges runInThread start
 =================== 
onNotificationVisibilityChanged called
 =================== 
logNotificationVisibilityChanges runInThread over
 =================== 
START u0 {flg=%{flg} cmp=%{component} (has extras)} from uid %{uid} on display %{display}
 =================== 
ActivityRecord info: ActivityInfo{<activity_info>}, euid: <euid>
 =================== 
overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}
 =================== 
state.clipTopAmount:{clipTopAmount}, i:{i}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
makeExpandedInvisible: mExpandedVisible={}
 =================== 
closeQs
 =================== 
cancelPeek: {cancelPeek}
 =================== 
instantCollapse
 =================== 
cancelPeek: {cancelPeek}
 =================== 
updateNotificationShade: total=?, active=?
 =================== 
removeNotificationChildren
 =================== 
closeQs
 =================== 
startActivity called from non-Activity context; forcing Intent.FLAG_ACTIVITY_NEW_TASK for: Intent { flg=0x24000000 cmp=com.tencent.mm/.ui.LauncherUI (has extras) }
 =================== 
resumeSuspendedAutohide
 =================== 
disable: < * >
 =================== 
overlapAmount:{overlapAmount}, previousNotificationEnd:{previousNotificationEnd}, newYTranslation:{newYTranslation}, location:{location}, i:{i}, getTopPadding:{getTopPadding}, getLocationOnScreen():{getLocationOnScreen}
 =================== 
state.clipTopAmount:{clipTopAmount}, i:{i}
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
makeExpandedInvisible: mExpandedVisible={}
 =================== 
acquire lock={lock}, flags={flags}, tag="{tag}", name={name}, ws={ws}, uid={uid}, pid={pid}
 =================== 
ready=true,policy=?,wakefulness=?,wksummary=?,uasummary=?,bootcompleted=?,boostinprogress=?,waitmodeenable=?,mode=?,manual=?,auto=?,adj=?,userId=?
 =================== 
Acquiring suspend blocker "{blockerName}".
 =================== 
{action} called
 =================== 
cancelNotification,index:{index}
 =================== 
applyOptionsLocked: Unknown animationType={animationType}
 =================== 
getRunningAppProcesses: caller %d does not hold %s; limiting output
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: false, tr.intent:Intent { act=android.intent.action.VIEW dat=file:///storage/emulated/0/Tencent/QQfile_recv/b.apk typ=application/vnd.android.package-archive flg=0x10800000 cmp=com.android.packageinstaller/.PackageInstallerActivity (has extras) }
 =================== 
getRecentTasks: num=?,flags=?,totalTasks=?
 =================== 
getRecentTasks: topActivity=ComponentInfo{com.tencent.mm/com.tencent.mm.ui.LauncherUI}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
Skipping, withExcluded: {withExcluded}, tr.intent:{intent}
 =================== 
getRecentTasks: num=?,flags=?,totalTasks=?
 =================== 
getRecentTasks: topActivity=ComponentInfo{com.tencent.mm/com.tencent.mm.ui.LauncherUI}
 =================== 
m{1}Runnable
 =================== 
updateClipping isOverlap:{}, getTopPadding={}, Translation={}
 =================== 
updateDimmedActivatedHideSensitive overlap:{boolean}
 =================== 
HBM brightnessIn ={brightness}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
HBM brightnessIn ={brightnessLevel}
 =================== 
HBM brightnessOut ={brightnessLevel}
 =================== 
Animating brightness: target={}, rate={}
 =================== 
